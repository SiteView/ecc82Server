// This may look like C code, but it's really -*- C++ -*-
/*
 * Copyright (C) 2005 Koen Deforche, Kessel-Lo, Belgium.
 *
 * See the LICENSE file for terms of use.
 */
#ifndef WCONTAINER_WIDGET_H_
#define WCONTAINER_WIDGET_H_

#ifdef WIN32
#pragma warning (disable: 4251)
#endif

#include <WInteractWidget>

/*! \brief A WWidget that may hold (and manage) children.
 *
 * A WContainerWidget acts as a container for child widgets.
 *
 * By default, a WContainerWidget is not \link WWidget::isInline()
 * inline \endlink, and manages its children within a rectangle.
 *
 * When setting the WContainerWidget as \link WWidget::isInline()
 * inline \endlink, the container only acts as a conceptual container,
 * offering a common style to its children. Inline children are still
 * layed out inline within its parent, as if they were inserted directly
 * into its parent.
 *
 * FIXME: We still need to provide a method to specify an inline-block,
 * this is a container that itself has an inline layout, but that manages
 * it children in a block.
 *
 */
class __declspec(dllexport) WContainerWidget : public WInteractWidget
{
  //MOC: W_OBJECT WContainerWidget:WInteractWidget
  W_OBJECT;

public:
  /*! \brief Create a container with optional parent.
   */
  WContainerWidget(WContainerWidget *parent = 0);

  /*! \brief Add a child widget to this container.
   *
   * This is equivalent to passing this container as the parent when
   * constructing the child. The widget is appended to the list of
   * children, and thus also layed-out at the end.
   */
  virtual void addWidget(WWidget *widget);

  /*! \brief Remove a child widget from this container.
   *
   * This removes the widget from this container, but does not delete
   * the widget !
   */
  virtual void removeWidget(WWidget *widget);

  /*! \brief Remove and delete all child widgets.
   *
   * This deletes all children that have been added to this container.
   */
  void clear();

  /*! \brief Specify how child widgets must be aligned within the container
   *
   * Specify the horizontal alignment of child widgets. Note that there
   * is no way to specify vertical alignment: children are always pushed
   * to the top of the container. Only in a WTableCell, there is a method
   * to align the children vertically.
   */
  void setContentAlignment(HorizontalAlignment contentAlignment);

  /*! \brief Set padding inside the widget
   *
   * Setting padding has the effect of adding distance between the
   * widget children and the border.
   */
  void setPadding(WLength padding, int sides = All);

  /*! \brief Get the padding set for the widget.
   *
   * \sa setPadding(WLength padding, Side sides);
   */
  WLength padding(Side side) const;

  /*! \brief Get the horizontal alignment of children
   *
   * \sa setContentAlignment(HorizontalAlignment)
   */
  HorizontalAlignment contentAlignment() const { return contentAlignment_; }

private:
  HorizontalAlignment       contentAlignment_;
  std::vector<WWidget *>    addedChildren_;

  WLength		    padding_[4];

  bool                      contentAlignmentChanged_;
  bool                      paddingsChanged_;

protected:
  void                removeChild(WWidget *child);

  void		      createDomChildren(DomElement& parent);

  void                updateDom(DomElement& element, bool all);
  virtual DomElement *createDomElement();
  virtual void        getDomChanges(std::vector<DomElement *>& result);
};

#endif // WCONTAINER_WIDGET_H_
