<?xml version="1.0" encoding="ISO-8859-1" ?>
<messages>
  <message id="home.intro">

<h2><span>What is Wt ?</span></h2>

<p>Wt (pronounced 'witty'), is a C++ library to develop web
applications.</p>

<p>The API is widget-centric, and inspired by existing C++ Graphical
User Interface APIs. To the developer, it offers complete abstraction
of any web-specific implementation details.</p>

<p>Page-based frameworks (such as based on PHP or JSP/JSF (+ servlets
+ struts)) for developing web application do not make abstraction of
the peculiarities of the underlying technologies (HTML, JavaScript,
CSS, AJAX, Forms, DHTML). As a consequence, a developer must gain
familiarity with all of these (evolving) technologies. Moreover, when
chosing to use a technology (such the currently popular AJAX), the
developer is responsible for graceful degradation when the technology
is not available or disabled in the browser. At the same time, the
structure of the application follows mostly the page-centric paradigm
of early day HTML.</p>

<p>Exposing the underlying technologies, such as JavaScript, to the
developer also brings real security threats such as XSS
(Cross-Site-Scripting).</p>

<p>In contrast, a web application developed with Wt does not differ in
structure from an application developed for other graphical user
interface systems, such as Windows or the X Windowing System. Most
imporantly, the entire application is written in only one compiled
language (C++), from which the library generates the necessary HTML,
Javascript, CGI, and AJAX code. The responsibility of writing
browser-portable web applications is transferred to the library
implementation. For example, if available, Wt will maximally use
JavaScript and AJAX, but applications developed with Wt will also
function correctly when AJAX is not available, or when JavaScript is
disabled, reverting to a different methods for communication between
browser and server. An application developed with Wt is
technology-agnostic. In addition, by having complete control over
the generated HTML/JavaScript, Wt checks that no XSS attacks
are inserted into the web page.</p>

<h3>Some benefits of using Wt</h3>

<ul>
  <li>Program web applications in the same way as you are used to
    for developing desktop applications.</li>
  <li>Event handling code may provide both client-side
    (aka JavaScript) and server-side event handling.</li>
  <li>There is no need to talk about dynamic view tier and three-tier
    framework nonsense, whatever it may be.</li>
  <li>Complete freedom of the <i>look</i> of your application, which
    should not necesarilly look like a desktop application --
    after all, it does look like a web page since it is sitting in
    a web browser and not on a desktop.</li>
  <li>Your application also works in older browsers or without
    JavaScript, while fully taking advantage of capabilities of modern
    (DOM-compatible) browsers, including use of XHTMLRequest.</li>
  <li>No need for quirky JavaScript programming, not even to implement
    client side event handling.</li>
  <li>Port your legacy C++ desktop application to the web.</li>
  <li>Low server footprint, ideal for embedded servers.</li>
  <li>No need to care about AJAX or the other next hype.</li>
  <li>No XSS security risks.</li>
</ul>

  </message>
  <message id="home.status">

<h2><span>Status</span></h2>

Wt 2.0.0 covers most of our wishlist. Let us know about yours !

<h3><span>Plan</span></h3>

<ul>
  <li>Implement WImageMap (image with clickable areas).</li>
  <li>Support for a message box dialog window.</li>
  <li>Improve WTable rendering.</li>
  <li>Finish the WVirtualImage implementation.</li>
  <li>Spawning of new windows, modal and non-modal.</li>
</ul>

<h3><span>Known bugs</span></h3>

<ul>
  <li>For some events such as changed, we have no alternative when
    JavaScript is disabled. This actually breaks the Form example
    in Lynx, Links, and all other browsers when JavaScript is disabled
  </li>
  <li>Browser history tracking only properly works on Firefox and
    Internet Explorer.</li>
</ul>

  </message>
  <message id="home.features">

<h2><span>Features</span></h2>

<h3>Core library</h3>

<ul>
  <li>Supports all major browsers (tested with Firefox (Gecko),
    Internet Explorer, Konqueror, and Opera) but also browsers that
    do not support JavaScript (tested with Links and Lynx).</li>
  <li>Develop and deploy on Unix/GNU Linux (gcc) or Microsoft Windows
    (Visual Studio).</li>
  <li>Equal behaviour with or without support for JavaScript or AJAX
    (as far as possible).</li>
  <li>Unicode (UTF-8) support.</li>
  <li>High-performance CGI library.</li>
  <li>Incremental rendering of changes to the web page (when AJAX
    is available).</li>
  <li>Configurable session tracking options that include URL rewriting
    and cookies.</li>
  <li>Read start up arguments, and read or set cookies.</li>
  <li>Two-phase rendering of changes to the web page, with first
    visible, and in the background invisible changes (when AJAX is
    available). When AJAX is not available, only visible contents is
    rendered.</li>
  <li>Supports timed events.</li>
  <li>Gdb or valgrind for debugging.</li>
  <li>Different session-to-process mapping strategies.</li>
  <li>Hot deployment: new sessions use the new application version while 
    older sessions may continue with their application version.</li>
  <li>Simultaneous handling of requests within and inbetween sessions
    (using multi-threading)</li>
  <li>Support for browser history navigation (back/forward buttons and
    bookmarks).</li>
</ul>

<h3>Event handling</h3>

<ul>
  <li>Listen for keyboard, mouse and focus events.</li> 
  <li>Uses a signal/slot system for event handling, based on Boost.Signals.
    </li>
  <li>By default, server-side event handling, in C++.</li>
  <li>Dynamic C++-to-JavaScript translation, by specifying
    <i>stateless slot</i> implementations. A single C++ slot implementation
    provides both client-side and server-side event handling: visual changes
    at client-side and application state at server side.</li>
  <li>Possibility to hook in custom JavaScript for special client-side only
    event handling.</li>
  <li>Easy Drag&amp;Drop interface.</li> 
</ul>

<h3>GUI components</h3>
<ul>
  <li>Basic widgets: WAnchor, WCheckBox, WComboBox, WContainerWidget,
    WFileUpload, WImage, WLabel, WLineEdit, WPushButton, WRadioButton,
    WScrollArea, WSelectionBox, WTable, WText, WTextArea.</li>
  <li>Form widgets have built-in support for (server-side) validation
    using WValidator classes.</li>
  <li>Composite widgets (that are built on top of basic widgets, and use
    only the Wt public API): WValidationStatus, WTreeNode, WTreeTable, WMenu,
    WInPlaceEdit, WVirtualImage.</li>
  <li>Client-side only widgets, such as WSuggestionPopup for
    auto-completion.</li>
  <li>Built-in internationalization using messages resource bundles.</li>
  <li>CSS either inline, or using internal or external style sheets.</li>
</ul>

<h3>Built-in security</h3>
<ul>
  <li>Kernel-level memory protection protects against privacy issues
   arising from programming bugs, since sessions are completely isolated
   (in dedicated-process mode).</li>
  <li>Supports encryption and server authentication using Secure Sockets
   Layer (SSL) or Transport Layer Security (TLS) through HTTPS.</li>
  <li>Enables continuous use of HTTPS through low bandwidth
   requirements.</li>
  <li>Built-in Cross-Site Scripting (XSS) prevention (since 1.1.6).
   All dynamically rendered text is always filtered against
   potentially dangerous code, making XSS attacks against any
   Wt application impossible.</li>
</ul>

  </message>
  <message id="home.examples">

<h2><span>Examples</span></h2>

<p>Explore some live examples of Wt below.</p>

<p>
  The source code of these examples is included in the Wt source
  distribution. You may also browse through the source code of each
  example in the tree widget.
</p>

<p>
  Cross-linked source code for these examples is also in
  <a href="doc/examples/html/index.html" TARGET="_blank">
  doxygen documentation (in a new window)</a>.
</p>

  </message>
  <message id="home.examples.hello">

<h3>Hello world!</h3>

<p>The most ubiquitious of all examples:
<a href="examples/hello/hello.fcg" target="_BLANK">Hello world</a>.</p>

<p>This simple example illustrates some basic Wt concepts:
<ul>
  <li>
    How to bootstrap a new Wt application using <b>WRun()</b>, and a
    function to create a new <a
    href="doc/reference/html/classWt_1_1WApplication.html">WApplication</a>,
    corresponding to a new session.
  </li>
  <li>
    <b>Creating widgets</b>, and adding it to <b>the widget tree</b>.
  </li>
  <li>
    Reacting to a click event using the <b>signal/slot</b> mechanism.
  </li>
</ul>
</p>

<p>Browse the source code:</p>

  </message>
  <message id="home.examples.wt">

<h3>Wt homepage</h3>
<p>This website itself is a Wt application. </p>

<p>
  Not a very interactive application, the most interesting part of the
  wt-homepage <i>was</i> the menu implementation. Because it is such
  a generic component, this has now been integrated in the library
  itself (see <a href="doc/reference/html/classWt_1_1WMenu.html">WMenu</a>).
  Still, the implementation is plain C++ and uses nothing but the
  public Wt API (this is true for all <a
  href="doc/reference/html/classWt_1_1WCompositeWidget.html">WCompositeWidget</a>
  widgets.)
</p>

<p>
  Despite its compact implementation (in less than 200 lines of C++
  code), the menu widget provides a horizontal or vertical layout,
  control over <b>pre-loading</b> versus <b>lazy loading</b> the
  contents for every menu item, and both <b>client-side</b> and
  <b>server-side event handling</b>.</p>

<p>
  For example, the Wt homepage itself uses two WMenu instantiations:
  a <i>main menu</i> (the vertical menu on your left) whose contents is
  pre-loaded in advance, and the <i>example menu</i> (the horizontal one
  just a few lines higher), which uses lazy loading for each example
  (loaded only when activated for the first time). Nevertheless, once
  loaded, switching between items is implemented entirely in client-side
  JavaScript code. Note that pre-loading does not increase the load
  time. This is because the Wt render engine always optimizes the
  response time by only transmitting visual widgets or changes
  first. Everything invisible (such as the contents for other pre-loaded
  menu items) is transmitted in the background, after rendering the
  visible contents !
</p>

<p>
  By default, menu items are simple <a
  href="doc/reference/html/classWt_1_1WText.html">WText</a> items, whose
  state is reflected using two style classes. This may be customized
  the OO-way, by specializing the <a
  href="doc/reference/html/classWt_1_1WMenuItem.html">WMenuItem</a> class.
</p>

<p>Browse the source code:</p>

  </message>
  <message id="home.examples.form">

<h3>Form example</h3>

<p>Getting user-input is especially straight forward with Wt. The <a
href="examples/form/formexample.fcg" TARGET="_blank">Form example</a>
illustrates the use of different form widgets. In addition it showcases
the built-in support for <b>validation</b> and <b>validation feed-back</b>,
as well as the built-in support for <b>localization</b>.</p>

<p>
  The code illustrates a number of Wt concepts:
<ul>
  <li>
    The <i>Form</i> widget inherits from <a
    href="doc/reference/html/classWt_1_1WTable.html">WTable</a> and lays out
    the different fields in a grid layout: labels in column 0,
    validation feed-back in column 1, and the actual form fields in
    column 2.
  </li>
  <li>
    <a href="doc/reference/html/classWt_1_1WValidator.html">WValidator</a> classes
    are used to determine validity of field contents,
    including the definition of a custom validator that validates
    dates (<i>DateValidator</i>).</li>
  <li>
    The use of <a href="doc/reference/html/classWt_1_1WValidationStatus.html">
    WValidationStatus</a> widgets to continously provide validation feed-back
    to the user.
  </li>
  <li>
    We populate the contents of the <i>city</i> combo box based on
    the selected <i>country</i>, by reacting to the changed
    event signal of the country combo box.
  </li>
  <li>
    <a href="doc/reference/html/classWt_1_1WMessage.html">WMessage</a>,
    which is used for displayed text, may hold either literal or
    localized text. For localized text, the message receives a key
    which is used to lookup the text in an xml-based <b>message
    resource bundle</b>, which in this example is available in
    two languages.</li>
  <li>The use of locale information and ability to change locale
    which automatically translates the entire application.</li>
</ul>
</p>

<p>Browse the source code:</p>

  </message>
  <message id="home.examples.hangman">

<h3>Hangman game</h3>

<p>
  The classic hangman game was contributed by Wim Dumon.
</p>

<p>
  It was written as part of the <a href="doc/tutorial/wt-sdj.xhtml"
  TARGET="_blank">Wt tutorial</a>. <br /> You can play the game
  <a href="examples/hangman/hangman.fcg" TARGET="_blank"> here (in a new
  window)</a>.
</p>

  </message>
  <message id="home.examples.treelist">

<h3>TreeList</h3>
<p>
  This example implements a Tree List widget with client-side event
  handling, in about 350 lines of C++ code.</p>
<p>
  Since version 1.1.8, a more elaborate and flexible Tree List widget
  has been added to the library (see <a
  href="doc/reference/html/classWt_1_1WTreeNode.html">WTreeNode</a>
  documentation), of which this example is a down-stripped
  version. This example serves as a demonstration of using <b>stateless
  slot implementations</b> to achieve client-side event handling, and is
  meant to show that you are in no way restricted to using widgets
  offered by the library. Indeed, you can easily create your own
  highly interactive widgets that may do client-side event handling,
  entirely in C++.
</p>

<p>
  The leafs of the tree hold the source code of this example,
  including the implementation of the tree itself in the
  classes <i>TreeNode</i> and <i>IconPair</i>.
</p>
<p>
  A more detailed walk-through of this example may be found in <a
  href="doc/reference/html/example.html" TARGET="_blank">a tutorial</a>
  dedicated to explaining Wt stateless slot mechanisms.
</p>

  </message>
  <message id="home.examples.treelist-remarks">

<p>What am I really looking at ?
<ul>
  <li> 
    <p>This is not the instantiation of a pre-defined tree list
    component, but the implementation of such a component from <a
    href="doc/reference/html/classWt_1_1WImage.html">WImage</a> and <a
    href="doc/reference/html/classWt_1_1WText.html">WText</a> widgets, in
    about 350 lines of C++ code !  In comparison, the <a
    href='http://myfaces.apache.org'> Apache MyFaces</a> JSF
    implementation of tree2, with similar functionality, uses about
    2400 lines of Java, and 140 lines of JavaScript code.
    </p>
  </li>
  <li>
    <p>When JavaScript is available, the tree list does
    not require any interaction with the server for handling the click
    events on the <img src='icons/nav-plus-line-middle.gif' /> and
    <img src='icons/nav-minus-line-middle.gif'/> icons, because these
    events have been connected to slots which have prelearned stateless
    implementations. Such slots are optimised into client-side
    JavaScript code, even though the TreeNode::expand() and collapse()
    methods are plain C++.
    </p>
  </li>
  <li>
    <p>The buttons for manipulating the test map contents use dynamic
    connections, and thus the update is computed at server-side, and
    communicated back to the browser (using AJAX if available).
    </p>
  </li>
</ul>
</p>

  </message>

  <message id="home.examples.style">

<h3>Style example</h3>

<p>
  HTML/CSS is especially convenient for adding style to your web page or
  web application, and Wt supports both inline and stylesheets for applying
  style to your application.
</p>
<p>
  In <a href="examples/style/styleexample.fcg" TARGET="_blank">this
  example</a> we show how to create a widget class that has rounded
  corners, <i>RoundedWidget</i>. Since rounded corners are not part of
  CSS 2, the current accepted solution is to use some CSS tricks with
  images. In this example, we <b>compute the corner images on the fly</b>
  (with the specified colors and radius), using the graphics library
  gd. Using the widget is completely straight forward (as also
  demonstrated around the menus in the wt homepage itself), and the
  contents is an ordinary <a
  href="doc/reference/html/classWt_1_1WContainerWidget.html">WContainerWidget</a>
  into which widgets may be added.
</p>

<p>
  This examples shows how to use a <a
  href="doc/reference/html/classWt_1_1WFileResource.html">WFileResource</a>,
  which is an implementation of the abstract class <a
  href="doc/reference/html/classWt_1_1WResource.html">WResource</a>. A
  WResource may be the target of a browser request, and may thus
  represent any kind of file. In particular, a <a
  href="doc/reference/html/classWt_1_1WImage.html">WImage</a> may be defined
  using an image resource, as in this example. A WFileResource serves
  the response to the request from a temporary file.
</p>

<p>Browse the source code:</p>

  </message>
  <message id="home.examples.composer">

<h3>Mail composer</h3>

<p>
  This <a href="examples/composer/composer.fcg"> GMail-like mail
  composer</a> example is a more practical demonstration of various
  capabilities of Wt.
</p>

<p>
  Some perhaps remarkable things about this example:
  <ul>
    <li>
      Like the Wt homepage, it uses only <b>style sheets</b> and style
      classes for accurate control over the look.
    </li>
    <li>
      The <i>ContactSuggestions</i> class provides auto-completion of
      the addressees in the To: Cc: and Bcc: fields. The widget
      derives from the <a
      href="doc/reference/html/classWt_1_1WSuggestionPopup.html">WSuggestionPopup</a>
      class, which is currently the only widget in Wt that uses a
      number of <a
      href="doc/reference/html/classWt_1_1WJavascriptSlot.html">WJavascriptSlot</a>
      objects. These are slots for which the client-side JavaScript
      event handling code is specified manually. In this way, the
      sorting through available contacts for suitable suggestions is
      done entirely client-side. Note that the contacts for this
      suggestion box are automatically transferred in the background,
      simply because they are invisible.
    </li>
    <li>
      The <i>AttachmentEdit</i> widget also demonstrates the use of <a
      href="doc/reference/html/classWt_1_1WFileUpload.html">WFileUpload</a>
      which allows for <b>asynchronous transfer of files</b>, in this
      case for uploading the attachments while editing the message.
    </li>
    <li>
      The <i>Option</i> and <i>OptionList</i> classes show how
      stateless slots may be used even when the behaviour is not
      entirely stateless. In this case, the hiding of an Option
      affects neighbouring visible options to set the separator
      correctly. By <b>invalidating the stateless slot
      implementations</b> when state has changed, we can still
      get away with a stateless slot implementation, and thus
      client-side event handling performance!
    </li>
  </ul>
</p>

<p>Browse the source code:</p>

  </message>
  <message id="home.examples.dragdrop">

<h3>Drag &amp; Drop</h3>

<p>
  <a href="examples/dragdrop/dragdrop.fcg">This little example</a>
  demonstrates the usage of the Drag and drop API. Drag and drop is only
  available when JavaScript is available or enabled, so you should
  always provide an alternative if you wish to support other browsers.
</p>

<p>
  Add drag &amp; drop functionality to your application in three steps:
  <ul>
    <li>
      Specify that a
      <a href="doc/reference/html/classWt_1_1WInteractWidget.html">
      WInteractWidget</a> is draggable (using
      <b>WInteractWidget::setDraggable()</b>). You must chose a mime
      type, and properties that specify how the dragging must be
      rendered.
    </li>
    <li>
      A drop site declares itself to accept drops of a particular
      mime type (see <a href="doc/reference/html/classWt_1_1WWidget.html#a38">
      WWidget::acceptDrops()</a>. Visual feed-back of a drop site may be
      specified by changing the style when the mouse hovers on top of it with
      a compatible mime type.
    </li>
    <li>
      Finally, a dropsite reimplements <b>WWidget::dropEvent(WDropEvent)</b>
      which is called when something was dropped, and provides details on the
      mime type and the sender.</li>
  </ul>
</p>

<p>Browse the source code:</p>

  </message>
  <message id="home.examples.fileexplorer">

<h3>File explorer</h3>

<p>
  You can <a href="examples/filetreetable/filetreetable.fcg">browse
  the Wt source code tree</a> in an example demonstrating the use of
  <a href="doc/reference/html/classWt_1_1WTreeTable.html">WTreeTable
  </a>.
</p>
<p>
  WTreeTable organizes its data using <a
  href="doc/reference/html/classWt_1_1WTreeTableNode.html">WTreeTableNode</a>
  objects, which derive from <a
  href="doc/reference/html/classWt_1_1WTreeNode.html">WTreeNode</a>. All
  these widgets inherit from <a
  href="doc/reference/html/classWt_1_1WCompositeWidget.html">WCompositeWidget</a>,
  and therefore use only the public Wt API, and are all plain C++ (and
  only few lines of that).
</p>
<p>
  FileTreeTableNode reimplements WTreeNode::populate() to retrieve the
  contents of a directory only when needed. In addition, we use the
  LazyLoading policy of WTreeNode to only load nodes when they are
  viewed, unlike for the treelists like the one just below for which
  we use a NextLevelLoading policy.
</p>

<p>Browse the source code:</p>

  </message>
  <message id="home.download.license">

<h3>License</h3>

<p>Witty is offered under both GPL or a commercial license.</p>

<p>As of version 1.1.4, the library is offered under the GNU General
Public License (GPL). This means that it is now possible to build
a web application with Wt, and deploy it to your own web server, without
needing to make the source code freely available.</p>

<p>Note that if you are passing on your web application in binary form,
be it selling or giving away for free, then you must include the source
code, as per terms of the GPL. This also applies to redistribution of
the Wt library, in original or modified form.</p>

<p>The commercial license has no such limitations. If you create proprietary
software and do not want to share the source code while sharing the binary
executable, you need this license. Contact
<a href="mailto:sales@sobicom.com">sales@sobicom.com</a> for more information on
the commercial license, support and training programmes.</p>

  </message>
  <message id="home.download.requirements">

<h3>System requirements</h3>

For building and installing the latest version of Wt, you need the 
following software and libraries (all available in Gentoo portage). 
<ul> 
  <li><a href='http://www.cmake.org/'>CMake cross-platform make</a> provides
    an alternative to the libtool/automake/autoconf world, and was adopted
    by Wt since version 1.1.4.

    <p>Apparently, cmake-2.2 does not work out of the box, but cmake-2.0 or
    cmake 2.6 does. A workaround for cmake-2.2 is to fix the generated
    makefiles with:
<pre>
for i in `find . -name "build.make"`; do echo ".SUFFIXES:" >> $i; done
</pre>
    </p>
  </li>

  <li>Apache 1 or 2</li> 
  <li>
    <a href='http://www.fastcgi.com/#TheDevKit'>FastCGI development kit</a>
    : fcgi-2.4.0
  </li>

   <li>
     Apache <a href='http://www.fastcgi.com/dist/mod_fastcgi-2.4.2.tar.gz'>
     mod_fastcgi</a>: mod_fastcgi-2.4.2.<br />Alternatively you may use
     <a href='http://fastcgi.coremail.cn/'>mod_fcgid</a>: mod_fcgid-1.07.
  </li> 

  <li>
    The indispensible <a href='http://www.boost.org/'>boost C++ library</a>:
    boost-1.31.0
  </li> 

  <li>
    (Since 1.1.4:) <a href='http://xml.apache.org/xerces-c/'>Xerces-C++ parser</a>
  </li> 
</ul> 

  </message>
  <message id="home.community">

<h2><span>Community</span></h2>

<h3>Authors</h3>

<p>
Initially written by <a href="mailto:koen.deforche@gmail.com">Koen Deforche</a>.</p>
<p>
The current release contains contributions from Abdiel Janulgue
and Wim Dumon.</p>

<h3>Support</h3>

Please send any questions for support to
<a href="mailto:witty-interest@lists.sourceforge.net">the mailinglist</a>.
<br />
You are also welcome to
<a href="http://lists.sourceforge.net/lists/listinfo/witty-interest">
join the mailinglist</a>. 

<h3>Developers blog</h3>

Co-developer Abdiel organized <a href="http://codesketch.blogspot.com/">a blog here</a>. Next to phylosophical and spiritual aspects of Wt in a world full of
hype and fervent religions, but also down-to-earth matters are discussed
such as the current buffer contents of our favourite editors revealing
on-going development on future Wt features.

<h3>Sourceforge</h3>

<a href="http://sourceforge.net"><img src="http://sflogo.sourceforge.net/sflogo.php?group_id=153710&amp;type=1" style="vertical-align:middle" width="88" height="31" border="0" alt="SourceForge.net Logo" /></a>
The Wt project is hosted at sourceforge <a href="http://sourceforge.net/projects/witty/">here</a>.

  </message>

  <message id="home.documentation">
 
<h2><span>Documentation</span></h2>

<h3>Build and install</h3>

<p>
Generic installation instructions (UNIX) are <a href="doc/reference/html/Installation.html">here</a>, which is also included in the source package (INSTALL or
INSTALL.html).</p>
<p>
In addition, Tim Sutton maintains a page on <a href="https://wiki.ubuntu.com/BuildingWtFromSource">installing Wt on Ubuntu</a> which also has a nice
apache configuration module that should work on other distributions.</p>

<h3>Introduction and tutorial</h3>

Wim Dumon and Koen Deforche wrote an article for the Software
Developers Journal, April 2006 issue (which was focussed on C/C++
programming). The article provides a good introduction and a nice
tutorial featuring the Hangman example code (see also in
the examples section!). You can view a copy of the article <a
href="doc/tutorial/wt-sdj.xhtml" TARGET="_blank">on-line</a> or grab a <a
href="doc/tutorial/wt-sdj.pdf">PDF copy</a>.

<h3>Reference manual</h3>

<p>There is a a <a href="doc/reference/html/index.html"
TARGET="_blank"> reference manual (in a new window)</a>, generated
from the source code using doxygen. This also contains a small
tutorial on the tree list example, focussing in particular on the
stateless slot implementation mechanism, which was not covered in the
introductory article.</p>

<h3>Annotated examples</h3>

<p>Source-level documentation has also been generated for the
examples and can be viewed <a href="doc/examples/html/modules.html"
TARGET="_blank">here (in a new window)</a>.</p>

  </message>
</messages>
