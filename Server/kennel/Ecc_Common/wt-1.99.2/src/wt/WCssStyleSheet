// This may look like C code, but it's really -*- C++ -*-
/*
 * Copyright (C) 2005 Koen Deforche, Kessel-Lo, Belgium.
 *
 * See the LICENSE file for terms of use.
 */
#ifndef WCSS_STYLE_SHEET_H_
#define WCSS_STYLE_SHEET_H_

#include <map>
#include <string>

#include <WMessage>
#include <WCssDecorationStyle>

namespace Wt {

class WCssRule
{
public:
  WCssRule(std::string selector);
  virtual ~WCssRule();

  const std::string selector() const { return selector_; }

  virtual const std::string declarations() = 0;

private:
  std::string selector_;
};

class WCssDecorationRule : public WCssRule
{
public:
  WCssDecorationRule(std::string selector, const WCssDecorationStyle& style);

  WCssDecorationStyle& style() { return style_; }

  const std::string declarations();

private:
  WCssDecorationStyle style_;
};

class WCssOtherRule : public WCssRule
{
public:
  WCssOtherRule(std::string selector, const std::wstring declarations);

  const std::string declarations();

private:
  std::wstring declarations_;
};

/*! \class WCssStyleSheet WCssStyleSheet WCssStyleSheet
 *  \brief A CSS style sheet.
 *
 * \sa WApplication::styleSheet()
 */
class WT_API WCssStyleSheet
{
public:
  /*! \brief Create a new empty style sheet.
   */
  WCssStyleSheet();

  /*! \brief Destroy a style sheet, and all rules in it.
   */
  ~WCssStyleSheet();

  /*! \brief Add a decoration rule.
   */
  void addRule(const std::string selector, const WCssDecorationStyle& style);
  void addRule(const std::string selector, const std::wstring declarations);
  std::string cssText() const;

private:
  std::map<std::string, WCssRule *> rules_;
};

}

#endif // WCSS_STYLE_SHEET_H_
