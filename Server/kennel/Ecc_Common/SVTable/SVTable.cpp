
#include "SVTable.h"

//////////////////////////////////////////////////////////////////////////////////
// class SVTable

SVTable::SVTable()
{
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
SVTable::~SVTable()
{
    m_Row.clear();
}

void SVTable::clear()
{
    m_Row.clear();
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
SVTableCell * SVTable::Cell(string szKey, int nCol)
{
    row it = m_Row.find(szKey);
    if (it != m_Row.end())
    {
        return (*it).second.Cell(nCol);        
    }
    else
        return NULL;
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
void SVTable::DelCell(string szKey, int nCol)
{
    row it = m_Row.find(szKey);
    if (it != m_Row.end())
    {
        (*it).second.DelCell(nCol);        
    }
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
void SVTable::DelRow(string szKey)
{
    row it = m_Row.find(szKey);
    if (it != m_Row.end())
    {
        m_Row.erase(it);       
    }
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
void SVTable::WriteCell(string szKey, int nCol, SVTableCell &cellValue)
{
    row it = m_Row.find(szKey);
    if (it != m_Row.end())
    {
        (*it).second.WriteCell(nCol, cellValue);
    }
    else
    {
        SVTableRow rowTmp;
        rowTmp.m_szRow = szKey;
        cellValue.m_szRow = szKey;
        cellValue.m_nCol = nCol;
        rowTmp.m_Cells[nCol] = cellValue;
        m_Row[szKey] = rowTmp;
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int SVTable::RowCount()
{
    return static_cast<int>(m_Row.size());
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int SVTable::ColCount(string szKey)
{    
    row it = m_Row.find(szKey);
    if (it != m_Row.end())
        return static_cast<int>((*it).second.m_Cells.size());
    else
        return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
SVTableRow * SVTable::Row(string szKey)
{
    row it = m_Row.find(szKey);
    if (it != m_Row.end())
        return &(*it).second;
    else
        return NULL;
}


// end SVTable
//////////////////////////////////////////////////////////////////////////////////

SVIntTable::SVIntTable()
{
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
SVIntTable::~SVIntTable()
{
    m_Row.clear();
}

void SVIntTable::clear()
{
    m_Row.clear();
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
SVTableCell * SVIntTable::Cell(int nRow, int nCol)
{
    irow it = m_Row.find(nRow);
    if (it != m_Row.end())
    {
        return (*it).second.Cell(nCol);        
    }
    else
        return NULL;
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
void SVIntTable::DelCell(int nRow, int nCol)
{
    irow it = m_Row.find(nRow);
    if (it != m_Row.end())
    {
        (*it).second.DelCell(nCol);        
    }
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
void SVIntTable::DelRow(int nRow)
{
    irow it = m_Row.find(nRow);
    if (it != m_Row.end())
    {
        m_Row.erase(it);       
    }
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
void SVIntTable::WriteCell(int nRow, int nCol, SVTableCell &cellValue)
{
    irow it = m_Row.find(nRow);
    if (it != m_Row.end())
    {
        (*it).second.WriteCell(nCol, cellValue);
    }
    else
    {
        SVTableRow rowTmp;
        rowTmp.m_nRow = nRow;
        cellValue.m_nRow = nRow;
        cellValue.m_nCol = nCol;
        rowTmp.m_Cells[nCol] = cellValue;
        m_Row[nRow] = rowTmp;
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int SVIntTable::RowCount()
{
    return static_cast<int>(m_Row.size());
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int SVIntTable::ColCount(int nRow)
{    
    irow it = m_Row.find(nRow);
    if (it != m_Row.end())
        return static_cast<int>((*it).second.m_Cells.size());
    else
        return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
SVTableRow * SVIntTable::Row(int nRow)
{
    irow it = m_Row.find(nRow);
    if (it != m_Row.end())
        return &(*it).second;
    else
        return NULL;
}


// end SVIntTable
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// class CSVTableCell

SVTableCell::SVTableCell()
{
    m_nCol = -1;
    m_szRow = "";
    m_nType = adNULL;
    m_pValue = NULL;
    m_szProperty = "";
    m_nTag = 0;
    m_nRow = 0;
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
SVTableCell::SVTableCell(const SVTableCell &cell)
{
    if(cell.m_nType == adString && cell.m_pValue)
    {
        m_pValue = new char[strlen((char*)(cell.m_pValue)) + 1];
        strcpy((char*)m_pValue, (const char*)(cell.m_pValue));
    }
    else if(cell.m_pValue)
        m_pValue = cell.m_pValue;
    else
        m_pValue = NULL;

    m_nRow  = cell.m_nRow;
    m_nType = cell.m_nType;
    m_nTag  = cell.m_nTag;
    m_nCol = cell.m_nCol;
    m_szProperty = cell.m_szProperty;
    m_szRow      = cell.m_szRow;
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
SVTableCell::~SVTableCell()
{
    if(m_nType == adString && m_pValue)
        delete []m_pValue;
    m_pValue = NULL;
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
const int SVTableCell::Col() 
{
    return m_nCol;
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
const int SVTableCell::RowIndex() 
{
    return m_nRow;
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
const char * SVTableCell::Row() 
{
    return m_szRow.c_str();
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
void SVTableCell::setValue(const void * pVoid)
{
    if(pVoid != NULL)
    {
        if(m_nType == adString)
        {
            m_pValue = new char[strlen((char*)pVoid) + 1];
            strcpy((char*)m_pValue, (const char*)pVoid);
        }
        else
            m_pValue = const_cast<void*>(pVoid);
    }
    else
    {
        if(m_nType == adString)
        {
            m_pValue = new char[strlen((char*)pVoid) + 1];
            strcpy((char*)m_pValue, (const char*)pVoid);
        }
        m_pValue = NULL;
    }
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
void SVTableCell::setType(int nType)
{
    if(m_nType == adString)
        if(m_pValue)
            delete []m_pValue;

    m_pValue = NULL;
    m_nType = nType;
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
const int SVTableCell::Type() 
{
    return m_nType;
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
const void * SVTableCell::Value() 
{
    if(m_pValue != NULL)
        return (const void*)m_pValue;
    else
        return NULL;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SVTableCell::setProperty(const char * szProperty)
{
    m_szProperty = szProperty;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SVTableCell::setTag(int nTag)
{
    m_nTag = nTag;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char * SVTableCell::Property()
{
    return m_szProperty.c_str();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int SVTableCell::Tag()
{
    return m_nTag;
}
// end SVTableCell
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// class SVTableRow

SVTableRow::SVTableRow()
{
    m_szProperty = "";
    m_nTag = -1;
    m_szRow = "";
    m_nRow = 0;
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
SVTableRow::~SVTableRow()
{
    m_Cells.clear();
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
SVTableCell * SVTableRow::Cell(int nCol)
{
    cell it = m_Cells.find(nCol); 
    if (it != m_Cells.end())
        return &(*it).second;
    else
        return NULL;
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
void SVTableRow::DelCell(int nCol)
{
    cell it = m_Cells.find(nCol); 
    if (it != m_Cells.end())
        m_Cells.erase(it);
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
void SVTableRow::WriteCell(int nCol, SVTableCell &cellValue)
{
    //m_Cells.rbegin();
    cell it = m_Cells.find(nCol);
    if (it == m_Cells.end())
    {
        cellValue.m_szRow = m_szRow;
        cellValue.m_nCol = nCol;
        m_Cells[nCol] = cellValue;
    }
    else
    {
        (*it).second.m_nType = cellValue.m_nType;
        (*it).second.m_pValue = cellValue.m_pValue;
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SVTableRow::setProperty(const char * szProperty)
{
    m_szProperty = szProperty;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SVTableRow::setTag(int nTag)
{
    m_nTag = nTag;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char * SVTableRow::getProperty()
{
    return m_szProperty.c_str();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
int SVTableRow::getTag()
{
    return m_nTag;
}
// end SVTableCell
//////////////////////////////////////////////////////////////////////////////////
