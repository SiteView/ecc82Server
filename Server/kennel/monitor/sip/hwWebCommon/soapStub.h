/* soapStub.h
   Generated by gSOAP 2.7.12 from huaWei.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE__cwmp__SetParameterAttributesStruct_Notification
#define SOAP_TYPE__cwmp__SetParameterAttributesStruct_Notification (53)
/* cwmp:SetParameterAttributesStruct-Notification */
enum _cwmp__SetParameterAttributesStruct_Notification {_cwmp__SetParameterAttributesStruct_Notification__0 = 0, _cwmp__SetParameterAttributesStruct_Notification__1 = 1, _cwmp__SetParameterAttributesStruct_Notification__2 = 2};
#endif

#ifndef SOAP_TYPE__cwmp__ParameterAttributeStruct_Notification
#define SOAP_TYPE__cwmp__ParameterAttributeStruct_Notification (55)
/* cwmp:ParameterAttributeStruct-Notification */
enum _cwmp__ParameterAttributeStruct_Notification {_cwmp__ParameterAttributeStruct_Notification__0 = 0, _cwmp__ParameterAttributeStruct_Notification__1 = 1, _cwmp__ParameterAttributeStruct_Notification__2 = 2};
#endif

#ifndef SOAP_TYPE__cwmp__SetParameterValuesResponse_Status
#define SOAP_TYPE__cwmp__SetParameterValuesResponse_Status (58)
/* cwmp:SetParameterValuesResponse-Status */
enum _cwmp__SetParameterValuesResponse_Status {_cwmp__SetParameterValuesResponse_Status__0 = 0, _cwmp__SetParameterValuesResponse_Status__1 = 1};
#endif

#ifndef SOAP_TYPE__cwmp__DownloadResponse_Status
#define SOAP_TYPE__cwmp__DownloadResponse_Status (65)
/* cwmp:DownloadResponse-Status */
enum _cwmp__DownloadResponse_Status {_cwmp__DownloadResponse_Status__0 = 0, _cwmp__DownloadResponse_Status__1 = 1};
#endif

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_cwmp__DeviceIdStruct
#define SOAP_TYPE_cwmp__DeviceIdStruct (10)
/* cwmp:DeviceIdStruct */
class SOAP_CMAC cwmp__DeviceIdStruct
{
public:
	std::string Manufacturer;	/* required element of type xsd:string */
	std::string OUI;	/* required element of type xsd:string */
	std::string ProductClass;	/* required element of type xsd:string */
	std::string SerialNumber;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_cwmp__DeviceIdStruct */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cwmp__DeviceIdStruct() : soap(NULL) { }
	virtual ~cwmp__DeviceIdStruct() { }
};
#endif

#ifndef SOAP_TYPE_cwmp__FaultStruct
#define SOAP_TYPE_cwmp__FaultStruct (11)
/* cwmp:FaultStruct */
class SOAP_CMAC cwmp__FaultStruct
{
public:
	std::string FaultCode;	/* required element of type xsd:string */
	std::string FaultString;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_cwmp__FaultStruct */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cwmp__FaultStruct() : soap(NULL) { }
	virtual ~cwmp__FaultStruct() { }
};
#endif

#ifndef SOAP_TYPE_cwmp__EventStruct
#define SOAP_TYPE_cwmp__EventStruct (12)
/* cwmp:EventStruct */
class SOAP_CMAC cwmp__EventStruct
{
public:
	std::string EventCode;	/* required element of type xsd:string */
	std::string CommandKey;	/* required element of type cwmp:CommandKeyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_cwmp__EventStruct */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cwmp__EventStruct() : soap(NULL) { }
	virtual ~cwmp__EventStruct() { }
};
#endif

#ifndef SOAP_TYPE_cwmp__ParameterValueStruct
#define SOAP_TYPE_cwmp__ParameterValueStruct (14)
/* cwmp:ParameterValueStruct */
class SOAP_CMAC cwmp__ParameterValueStruct
{
public:
	std::string Name;	/* required element of type xsd:string */
	std::string Value;	/* required element of type xsd:anySimpleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_cwmp__ParameterValueStruct */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cwmp__ParameterValueStruct() : soap(NULL) { }
	virtual ~cwmp__ParameterValueStruct() { }
};
#endif

#ifndef SOAP_TYPE_cwmp__ParameterInfoStruct
#define SOAP_TYPE_cwmp__ParameterInfoStruct (16)
/* cwmp:ParameterInfoStruct */
class SOAP_CMAC cwmp__ParameterInfoStruct
{
public:
	std::string Name;	/* required element of type xsd:string */
	bool Writable;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_cwmp__ParameterInfoStruct */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cwmp__ParameterInfoStruct() : Writable((bool)0), soap(NULL) { }
	virtual ~cwmp__ParameterInfoStruct() { }
};
#endif

#ifndef SOAP_TYPE_cwmp__SetParameterAttributesStruct
#define SOAP_TYPE_cwmp__SetParameterAttributesStruct (20)
/* cwmp:SetParameterAttributesStruct */
class SOAP_CMAC cwmp__SetParameterAttributesStruct
{
public:
	std::string *Name;	/* optional element of type xsd:string */
	bool NotificationChange;	/* required element of type xsd:boolean */
	enum _cwmp__SetParameterAttributesStruct_Notification Notification;	/* required element of type cwmp:SetParameterAttributesStruct-Notification */
	bool AccessListChange;	/* required element of type xsd:boolean */
	class AccessList *AccessList_;	/* required element of type ArrayOfstring */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_cwmp__SetParameterAttributesStruct */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cwmp__SetParameterAttributesStruct() : Name(NULL), NotificationChange((bool)0), Notification((enum _cwmp__SetParameterAttributesStruct_Notification)0), AccessListChange((bool)0), AccessList_(NULL), soap(NULL) { }
	virtual ~cwmp__SetParameterAttributesStruct() { }
};
#endif

#ifndef SOAP_TYPE_cwmp__ParameterAttributeStruct
#define SOAP_TYPE_cwmp__ParameterAttributeStruct (22)
/* cwmp:ParameterAttributeStruct */
class SOAP_CMAC cwmp__ParameterAttributeStruct
{
public:
	std::string Name;	/* required element of type xsd:string */
	enum _cwmp__ParameterAttributeStruct_Notification Notification;	/* required element of type cwmp:ParameterAttributeStruct-Notification */
	AccessList *AccessList_;	/* required element of type ArrayOfstring */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_cwmp__ParameterAttributeStruct */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cwmp__ParameterAttributeStruct() : Notification((enum _cwmp__ParameterAttributeStruct_Notification)0), AccessList_(NULL), soap(NULL) { }
	virtual ~cwmp__ParameterAttributeStruct() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__SetParameterValues
#define SOAP_TYPE__cwmp__SetParameterValues (24)
/* cwmp:SetParameterValues */
class SOAP_CMAC _cwmp__SetParameterValues
{
public:
	cwmp__DeviceIdStruct *DeviceId;	/* required element of type cwmp:DeviceIdStruct */
	std::string Ip;	/* required element of type xsd:string */
	std::string UserName;	/* required element of type xsd:string */
	std::string PassWord;	/* required element of type xsd:string */
	class ParameterValueList *ParameterList;	/* required element of type ArrayOfParameterValueStruct */
	std::string ParameterKey;	/* required element of type cwmp:ParameterKeyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE__cwmp__SetParameterValues */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__SetParameterValues() : DeviceId(NULL), ParameterList(NULL), soap(NULL) { }
	virtual ~_cwmp__SetParameterValues() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__SetParameterValuesResponse
#define SOAP_TYPE__cwmp__SetParameterValuesResponse (25)
/* cwmp:SetParameterValuesResponse */
class SOAP_CMAC _cwmp__SetParameterValuesResponse
{
public:
	enum _cwmp__SetParameterValuesResponse_Status Status;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cwmp:SetParameterValuesResponse-Status */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE__cwmp__SetParameterValuesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__SetParameterValuesResponse() : Status((enum _cwmp__SetParameterValuesResponse_Status)0), soap(NULL) { }
	virtual ~_cwmp__SetParameterValuesResponse() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__GetParameterValues
#define SOAP_TYPE__cwmp__GetParameterValues (26)
/* cwmp:GetParameterValues */
class SOAP_CMAC _cwmp__GetParameterValues
{
public:
	cwmp__DeviceIdStruct *DeviceId;	/* required element of type cwmp:DeviceIdStruct */
	std::string Ip;	/* required element of type xsd:string */
	std::string UserName;	/* required element of type xsd:string */
	std::string PassWord;	/* required element of type xsd:string */
	class ParameterNames *ParameterNames_;	/* required element of type ArrayOfstring */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE__cwmp__GetParameterValues */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__GetParameterValues() : DeviceId(NULL), ParameterNames_(NULL), soap(NULL) { }
	virtual ~_cwmp__GetParameterValues() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__GetParameterValuesResponse
#define SOAP_TYPE__cwmp__GetParameterValuesResponse (27)
/* cwmp:GetParameterValuesResponse */
class SOAP_CMAC _cwmp__GetParameterValuesResponse
{
public:
	ParameterValueList *ParameterList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ArrayOfParameterValueStruct */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE__cwmp__GetParameterValuesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__GetParameterValuesResponse() : ParameterList(NULL), soap(NULL) { }
	virtual ~_cwmp__GetParameterValuesResponse() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__SetParameterAttributes
#define SOAP_TYPE__cwmp__SetParameterAttributes (28)
/* cwmp:SetParameterAttributes */
class SOAP_CMAC _cwmp__SetParameterAttributes
{
public:
	cwmp__DeviceIdStruct *DeviceId;	/* required element of type cwmp:DeviceIdStruct */
	std::string Ip;	/* required element of type xsd:string */
	std::string UserName;	/* required element of type xsd:string */
	std::string PassWord;	/* required element of type xsd:string */
	class SetParameterAttributesList *ParameterList;	/* required element of type ArrayOfSetParameterAttributesStruct */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE__cwmp__SetParameterAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__SetParameterAttributes() : DeviceId(NULL), ParameterList(NULL), soap(NULL) { }
	virtual ~_cwmp__SetParameterAttributes() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__SetParameterAttributesResponse
#define SOAP_TYPE__cwmp__SetParameterAttributesResponse (29)
/* cwmp:SetParameterAttributesResponse */
class SOAP_CMAC _cwmp__SetParameterAttributesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE__cwmp__SetParameterAttributesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__SetParameterAttributesResponse() : soap(NULL) { }
	virtual ~_cwmp__SetParameterAttributesResponse() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__GetParameterAttributes
#define SOAP_TYPE__cwmp__GetParameterAttributes (30)
/* cwmp:GetParameterAttributes */
class SOAP_CMAC _cwmp__GetParameterAttributes
{
public:
	cwmp__DeviceIdStruct *DeviceId;	/* required element of type cwmp:DeviceIdStruct */
	std::string Ip;	/* required element of type xsd:string */
	std::string UserName;	/* required element of type xsd:string */
	std::string PassWord;	/* required element of type xsd:string */
	ParameterNames *ParameterNames_;	/* required element of type ArrayOfstring */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE__cwmp__GetParameterAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__GetParameterAttributes() : DeviceId(NULL), ParameterNames_(NULL), soap(NULL) { }
	virtual ~_cwmp__GetParameterAttributes() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__GetParameterAttributesResponse
#define SOAP_TYPE__cwmp__GetParameterAttributesResponse (31)
/* cwmp:GetParameterAttributesResponse */
class SOAP_CMAC _cwmp__GetParameterAttributesResponse
{
public:
	class ParameterAttributeList *ParameterList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ArrayOfParameterAttributeStruct */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE__cwmp__GetParameterAttributesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__GetParameterAttributesResponse() : ParameterList(NULL), soap(NULL) { }
	virtual ~_cwmp__GetParameterAttributesResponse() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__CpeTransferComplete
#define SOAP_TYPE__cwmp__CpeTransferComplete (32)
/* cwmp:CpeTransferComplete */
class SOAP_CMAC _cwmp__CpeTransferComplete
{
public:
	cwmp__DeviceIdStruct *DeviceId;	/* required element of type cwmp:DeviceIdStruct */
	std::string Ip;	/* required element of type xsd:string */
	std::string CommandKey;	/* required element of type cwmp:CommandKeyType */
	cwmp__FaultStruct *FaultStruct;	/* required element of type cwmp:FaultStruct */
	time_t StartTime;	/* required element of type xsd:dateTime */
	time_t CompleteTime;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE__cwmp__CpeTransferComplete */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__CpeTransferComplete() : DeviceId(NULL), FaultStruct(NULL), StartTime(0), CompleteTime(0), soap(NULL) { }
	virtual ~_cwmp__CpeTransferComplete() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__CpeTransferCompleteResponse
#define SOAP_TYPE__cwmp__CpeTransferCompleteResponse (33)
/* cwmp:CpeTransferCompleteResponse */
class SOAP_CMAC _cwmp__CpeTransferCompleteResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE__cwmp__CpeTransferCompleteResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__CpeTransferCompleteResponse() : soap(NULL) { }
	virtual ~_cwmp__CpeTransferCompleteResponse() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__Boot
#define SOAP_TYPE__cwmp__Boot (34)
/* cwmp:Boot */
class SOAP_CMAC _cwmp__Boot
{
public:
	cwmp__DeviceIdStruct *DeviceId;	/* required element of type cwmp:DeviceIdStruct */
	std::string Ip;	/* required element of type xsd:string */
	unsigned int MaxEnvelopes;	/* required element of type xsd:unsignedInt */
	time_t CurrentTime;	/* required element of type xsd:dateTime */
	unsigned int RetryCount;	/* required element of type xsd:unsignedInt */
	std::string DeviceSummary;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE__cwmp__Boot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__Boot() : DeviceId(NULL), MaxEnvelopes(0), CurrentTime(0), RetryCount(0), soap(NULL) { }
	virtual ~_cwmp__Boot() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__ValueChange
#define SOAP_TYPE__cwmp__ValueChange (35)
/* cwmp:ValueChange */
class SOAP_CMAC _cwmp__ValueChange
{
public:
	cwmp__DeviceIdStruct *DeviceId;	/* required element of type cwmp:DeviceIdStruct */
	std::string Ip;	/* required element of type xsd:string */
	unsigned int MaxEnvelopes;	/* required element of type xsd:unsignedInt */
	time_t CurrentTime;	/* required element of type xsd:dateTime */
	unsigned int RetryCount;	/* required element of type xsd:unsignedInt */
	ParameterValueList *ParameterList;	/* required element of type ArrayOfParameterValueStruct */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE__cwmp__ValueChange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__ValueChange() : DeviceId(NULL), MaxEnvelopes(0), CurrentTime(0), RetryCount(0), ParameterList(NULL), soap(NULL) { }
	virtual ~_cwmp__ValueChange() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__Periodic
#define SOAP_TYPE__cwmp__Periodic (36)
/* cwmp:Periodic */
class SOAP_CMAC _cwmp__Periodic
{
public:
	cwmp__DeviceIdStruct *DeviceId;	/* required element of type cwmp:DeviceIdStruct */
	std::string Ip;	/* required element of type xsd:string */
	unsigned int MaxEnvelopes;	/* required element of type xsd:unsignedInt */
	time_t CurrentTime;	/* required element of type xsd:dateTime */
	unsigned int RetryCount;	/* required element of type xsd:unsignedInt */
	std::string DeviceSummary;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE__cwmp__Periodic */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__Periodic() : DeviceId(NULL), MaxEnvelopes(0), CurrentTime(0), RetryCount(0), soap(NULL) { }
	virtual ~_cwmp__Periodic() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__PeriodicResponse
#define SOAP_TYPE__cwmp__PeriodicResponse (37)
/* cwmp:PeriodicResponse */
class SOAP_CMAC _cwmp__PeriodicResponse
{
public:
	unsigned int MaxEnvelopes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE__cwmp__PeriodicResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__PeriodicResponse() : MaxEnvelopes(0), soap(NULL) { }
	virtual ~_cwmp__PeriodicResponse() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__BootResponse
#define SOAP_TYPE__cwmp__BootResponse (38)
/* cwmp:BootResponse */
class SOAP_CMAC _cwmp__BootResponse
{
public:
	unsigned int MaxEnvelopes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE__cwmp__BootResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__BootResponse() : MaxEnvelopes(0), soap(NULL) { }
	virtual ~_cwmp__BootResponse() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__ValueChangeResponse
#define SOAP_TYPE__cwmp__ValueChangeResponse (39)
/* cwmp:ValueChangeResponse */
class SOAP_CMAC _cwmp__ValueChangeResponse
{
public:
	unsigned int MaxEnvelopes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE__cwmp__ValueChangeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__ValueChangeResponse() : MaxEnvelopes(0), soap(NULL) { }
	virtual ~_cwmp__ValueChangeResponse() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__XFileEventResponse
#define SOAP_TYPE__cwmp__XFileEventResponse (40)
/* cwmp:XFileEventResponse */
class SOAP_CMAC _cwmp__XFileEventResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE__cwmp__XFileEventResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__XFileEventResponse() : soap(NULL) { }
	virtual ~_cwmp__XFileEventResponse() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__XFileEvent
#define SOAP_TYPE__cwmp__XFileEvent (41)
/* cwmp:XFileEvent */
class SOAP_CMAC _cwmp__XFileEvent
{
public:
	cwmp__DeviceIdStruct *DeviceId;	/* required element of type cwmp:DeviceIdStruct */
	std::string Event;	/* required element of type xsd:string */
	std::string OUI;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE__cwmp__XFileEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__XFileEvent() : DeviceId(NULL), soap(NULL) { }
	virtual ~_cwmp__XFileEvent() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__Download
#define SOAP_TYPE__cwmp__Download (42)
/* cwmp:Download */
class SOAP_CMAC _cwmp__Download
{
public:
	cwmp__DeviceIdStruct *DeviceId;	/* required element of type cwmp:DeviceIdStruct */
	std::string Ip;	/* required element of type xsd:string */
	std::string UserName;	/* required element of type xsd:string */
	std::string PassWord;	/* required element of type xsd:string */
	std::string CommandKey;	/* required element of type cwmp:CommandKeyType */
	std::string FileType;	/* required element of type xsd:string */
	std::string URL;	/* required element of type xsd:string */
	std::string Username;	/* required element of type xsd:string */
	std::string Password;	/* required element of type xsd:string */
	unsigned int FileSize;	/* required element of type xsd:unsignedInt */
	std::string TargetFileName;	/* required element of type xsd:string */
	unsigned int DelaySeconds;	/* required element of type xsd:unsignedInt */
	std::string SuccessURL;	/* required element of type xsd:string */
	std::string FailureURL;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE__cwmp__Download */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__Download() : DeviceId(NULL), FileSize(0), DelaySeconds(0), soap(NULL) { }
	virtual ~_cwmp__Download() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__DownloadResponse
#define SOAP_TYPE__cwmp__DownloadResponse (43)
/* cwmp:DownloadResponse */
class SOAP_CMAC _cwmp__DownloadResponse
{
public:
	enum _cwmp__DownloadResponse_Status Status;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type cwmp:DownloadResponse-Status */
	time_t StartTime;	/* required element of type xsd:dateTime */
	time_t CompleteTime;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE__cwmp__DownloadResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__DownloadResponse() : Status((enum _cwmp__DownloadResponse_Status)0), StartTime(0), CompleteTime(0), soap(NULL) { }
	virtual ~_cwmp__DownloadResponse() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__FactoryReset
#define SOAP_TYPE__cwmp__FactoryReset (44)
/* cwmp:FactoryReset */
class SOAP_CMAC _cwmp__FactoryReset
{
public:
	cwmp__DeviceIdStruct *DeviceId;	/* required element of type cwmp:DeviceIdStruct */
	std::string Ip;	/* required element of type xsd:string */
	std::string UserName;	/* required element of type xsd:string */
	std::string PassWord;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE__cwmp__FactoryReset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__FactoryReset() : DeviceId(NULL), soap(NULL) { }
	virtual ~_cwmp__FactoryReset() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__FactoryResetResponse
#define SOAP_TYPE__cwmp__FactoryResetResponse (45)
/* cwmp:FactoryResetResponse */
class SOAP_CMAC _cwmp__FactoryResetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE__cwmp__FactoryResetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__FactoryResetResponse() : soap(NULL) { }
	virtual ~_cwmp__FactoryResetResponse() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__Reboot
#define SOAP_TYPE__cwmp__Reboot (46)
/* cwmp:Reboot */
class SOAP_CMAC _cwmp__Reboot
{
public:
	cwmp__DeviceIdStruct *DeviceId;	/* required element of type cwmp:DeviceIdStruct */
	std::string Ip;	/* required element of type xsd:string */
	std::string UserName;	/* required element of type xsd:string */
	std::string PassWord;	/* required element of type xsd:string */
	std::string CommandKey;	/* required element of type cwmp:CommandKeyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE__cwmp__Reboot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__Reboot() : DeviceId(NULL), soap(NULL) { }
	virtual ~_cwmp__Reboot() { }
};
#endif

#ifndef SOAP_TYPE__cwmp__RebootResponse
#define SOAP_TYPE__cwmp__RebootResponse (47)
/* cwmp:RebootResponse */
class SOAP_CMAC _cwmp__RebootResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE__cwmp__RebootResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cwmp__RebootResponse() : soap(NULL) { }
	virtual ~_cwmp__RebootResponse() { }
};
#endif

#ifndef SOAP_TYPE_EventList
#define SOAP_TYPE_EventList (13)
/* SOAP encoded array of cwmp:EventStruct schema type: */
class SOAP_CMAC EventList
{
public:
	cwmp__EventStruct **__ptrEventStruct;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_EventList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         EventList() : __ptrEventStruct(NULL), __size(0), soap(NULL) { }
	virtual ~EventList() { }
};
#endif

#ifndef SOAP_TYPE_ParameterValueList
#define SOAP_TYPE_ParameterValueList (15)
/* SOAP encoded array of cwmp:ParameterValueStruct schema type: */
class SOAP_CMAC ParameterValueList
{
public:
	cwmp__ParameterValueStruct **__ptrParameterValueStruct;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ParameterValueList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ParameterValueList() : __ptrParameterValueStruct(NULL), __size(0), soap(NULL) { }
	virtual ~ParameterValueList() { }
};
#endif

#ifndef SOAP_TYPE_ParameterInfoList
#define SOAP_TYPE_ParameterInfoList (17)
/* SOAP encoded array of cwmp:ParameterInfoStruct schema type: */
class SOAP_CMAC ParameterInfoList
{
public:
	cwmp__ParameterInfoStruct **__ptrParameterInfoStruct;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ParameterInfoList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ParameterInfoList() : __ptrParameterInfoStruct(NULL), __size(0), soap(NULL) { }
	virtual ~ParameterInfoList() { }
};
#endif

#ifndef SOAP_TYPE_ParameterNames
#define SOAP_TYPE_ParameterNames (18)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC ParameterNames
{
public:
	std::string *__ptrstring;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_ParameterNames */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ParameterNames() : __ptrstring(NULL), __size(0), soap(NULL) { }
	virtual ~ParameterNames() { }
};
#endif

#ifndef SOAP_TYPE_AccessList
#define SOAP_TYPE_AccessList (19)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC AccessList
{
public:
	std::string *__ptrstring;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_AccessList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         AccessList() : __ptrstring(NULL), __size(0), soap(NULL) { }
	virtual ~AccessList() { }
};
#endif

#ifndef SOAP_TYPE_SetParameterAttributesList
#define SOAP_TYPE_SetParameterAttributesList (21)
/* SOAP encoded array of cwmp:SetParameterAttributesStruct schema type: */
class SOAP_CMAC SetParameterAttributesList
{
public:
	cwmp__SetParameterAttributesStruct **__ptrSetParameterAttributesStruct;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_SetParameterAttributesList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         SetParameterAttributesList() : __ptrSetParameterAttributesStruct(NULL), __size(0), soap(NULL) { }
	virtual ~SetParameterAttributesList() { }
};
#endif

#ifndef SOAP_TYPE_ParameterAttributeList
#define SOAP_TYPE_ParameterAttributeList (23)
/* SOAP encoded array of cwmp:ParameterAttributeStruct schema type: */
class SOAP_CMAC ParameterAttributeList
{
public:
	cwmp__ParameterAttributeStruct **__ptrParameterAttributeStruct;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_ParameterAttributeList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ParameterAttributeList() : __ptrParameterAttributeStruct(NULL), __size(0), soap(NULL) { }
	virtual ~ParameterAttributeList() { }
};
#endif

#ifndef SOAP_TYPE___cwmp__XFileEvent
#define SOAP_TYPE___cwmp__XFileEvent (79)
/* Operation wrapper: */
struct __cwmp__XFileEvent
{
public:
	_cwmp__XFileEvent *cwmp__XFileEvent;	/* optional element of type cwmp:XFileEvent */
};
#endif

#ifndef SOAP_TYPE___cwmp__Boot
#define SOAP_TYPE___cwmp__Boot (83)
/* Operation wrapper: */
struct __cwmp__Boot
{
public:
	_cwmp__Boot *cwmp__Boot;	/* optional element of type cwmp:Boot */
};
#endif

#ifndef SOAP_TYPE___cwmp__ValueChange
#define SOAP_TYPE___cwmp__ValueChange (87)
/* Operation wrapper: */
struct __cwmp__ValueChange
{
public:
	_cwmp__ValueChange *cwmp__ValueChange;	/* optional element of type cwmp:ValueChange */
};
#endif

#ifndef SOAP_TYPE___cwmp__Periodic
#define SOAP_TYPE___cwmp__Periodic (91)
/* Operation wrapper: */
struct __cwmp__Periodic
{
public:
	_cwmp__Periodic *cwmp__Periodic;	/* optional element of type cwmp:Periodic */
};
#endif

#ifndef SOAP_TYPE___cwmp__CpeTransferComplete
#define SOAP_TYPE___cwmp__CpeTransferComplete (95)
/* Operation wrapper: */
struct __cwmp__CpeTransferComplete
{
public:
	_cwmp__CpeTransferComplete *cwmp__CpeTransferComplete;	/* optional element of type cwmp:CpeTransferComplete */
};
#endif

#ifndef SOAP_TYPE___cwmp__Download
#define SOAP_TYPE___cwmp__Download (99)
/* Operation wrapper: */
struct __cwmp__Download
{
public:
	_cwmp__Download *cwmp__Download;	/* optional element of type cwmp:Download */
};
#endif

#ifndef SOAP_TYPE___cwmp__SetParameterValues
#define SOAP_TYPE___cwmp__SetParameterValues (103)
/* Operation wrapper: */
struct __cwmp__SetParameterValues
{
public:
	_cwmp__SetParameterValues *cwmp__SetParameterValues;	/* optional element of type cwmp:SetParameterValues */
};
#endif

#ifndef SOAP_TYPE___cwmp__GetParameterValues
#define SOAP_TYPE___cwmp__GetParameterValues (107)
/* Operation wrapper: */
struct __cwmp__GetParameterValues
{
public:
	_cwmp__GetParameterValues *cwmp__GetParameterValues;	/* optional element of type cwmp:GetParameterValues */
};
#endif

#ifndef SOAP_TYPE___cwmp__SetParameterAttributes
#define SOAP_TYPE___cwmp__SetParameterAttributes (111)
/* Operation wrapper: */
struct __cwmp__SetParameterAttributes
{
public:
	_cwmp__SetParameterAttributes *cwmp__SetParameterAttributes;	/* optional element of type cwmp:SetParameterAttributes */
};
#endif

#ifndef SOAP_TYPE___cwmp__GetParameterAttributes
#define SOAP_TYPE___cwmp__GetParameterAttributes (115)
/* Operation wrapper: */
struct __cwmp__GetParameterAttributes
{
public:
	_cwmp__GetParameterAttributes *cwmp__GetParameterAttributes;	/* optional element of type cwmp:GetParameterAttributes */
};
#endif

#ifndef SOAP_TYPE___cwmp__Reboot
#define SOAP_TYPE___cwmp__Reboot (119)
/* Operation wrapper: */
struct __cwmp__Reboot
{
public:
	_cwmp__Reboot *cwmp__Reboot;	/* optional element of type cwmp:Reboot */
};
#endif

#ifndef SOAP_TYPE___cwmp__FactoryReset
#define SOAP_TYPE___cwmp__FactoryReset (123)
/* Operation wrapper: */
struct __cwmp__FactoryReset
{
public:
	_cwmp__FactoryReset *cwmp__FactoryReset;	/* optional element of type cwmp:FactoryReset */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (124)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (125)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (127)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (130)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (131)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__anySimpleType
#define SOAP_TYPE_xsd__anySimpleType (9)
typedef std::string xsd__anySimpleType;
#endif

#ifndef SOAP_TYPE_cwmp__CommandKeyType
#define SOAP_TYPE_cwmp__CommandKeyType (48)
typedef std::string cwmp__CommandKeyType;
#endif

#ifndef SOAP_TYPE_cwmp__ParameterKeyType
#define SOAP_TYPE_cwmp__ParameterKeyType (49)
typedef std::string cwmp__ParameterKeyType;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___cwmp__XFileEvent(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cwmp__XFileEvent *cwmp__XFileEvent, _cwmp__XFileEventResponse *cwmp__XFileEventResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cwmp__Boot(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cwmp__Boot *cwmp__Boot, _cwmp__BootResponse *cwmp__BootResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cwmp__ValueChange(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cwmp__ValueChange *cwmp__ValueChange, _cwmp__ValueChangeResponse *cwmp__ValueChangeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cwmp__Periodic(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cwmp__Periodic *cwmp__Periodic, _cwmp__PeriodicResponse *cwmp__PeriodicResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cwmp__CpeTransferComplete(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cwmp__CpeTransferComplete *cwmp__CpeTransferComplete, _cwmp__CpeTransferCompleteResponse *cwmp__CpeTransferCompleteResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cwmp__Download(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cwmp__Download *cwmp__Download, _cwmp__DownloadResponse *cwmp__DownloadResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cwmp__SetParameterValues(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cwmp__SetParameterValues *cwmp__SetParameterValues, _cwmp__SetParameterValuesResponse *cwmp__SetParameterValuesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cwmp__GetParameterValues(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cwmp__GetParameterValues *cwmp__GetParameterValues, _cwmp__GetParameterValuesResponse *cwmp__GetParameterValuesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cwmp__SetParameterAttributes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cwmp__SetParameterAttributes *cwmp__SetParameterAttributes, _cwmp__SetParameterAttributesResponse *cwmp__SetParameterAttributesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cwmp__GetParameterAttributes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cwmp__GetParameterAttributes *cwmp__GetParameterAttributes, _cwmp__GetParameterAttributesResponse *cwmp__GetParameterAttributesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cwmp__Reboot(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cwmp__Reboot *cwmp__Reboot, _cwmp__RebootResponse *cwmp__RebootResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cwmp__FactoryReset(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cwmp__FactoryReset *cwmp__FactoryReset, _cwmp__FactoryResetResponse *cwmp__FactoryResetResponse);

#endif

/* End of soapStub.h */
