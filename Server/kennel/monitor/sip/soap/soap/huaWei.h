// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* D:\program\huaWei\soap\soap\huaWei.h
   Generated by wsdl2h 1.2.12 from D:\program\huaWei\soap\cwmp.wsdl and typemap.dat
   2009-05-15 01:26:05 GMT
   Copyright (C) 2001-2008 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * urn:dslforum-org:cwmp-1-1                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to disable)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "urn:dslforum-org:cwmp-1-1"

*/

//gsoap ns1   schema namespace:	urn:dslforum-org:cwmp-1-1
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:anySimpleType"
typedef std::string xsd__anySimpleType;


//  Forward declaration of class ns1__DeviceIdStruct.
class ns1__DeviceIdStruct;

//  Forward declaration of class ns1__EventStruct.
class ns1__EventStruct;

//  Forward declaration of class EventList.
class EventList;

//  Forward declaration of class ns1__ParameterValueStruct.
class ns1__ParameterValueStruct;

//  Forward declaration of class ParameterValueList.
class ParameterValueList;

//  Forward declaration of class ns1__ParameterInfoStruct.
class ns1__ParameterInfoStruct;

//  Forward declaration of class ParameterInfoList.
class ParameterInfoList;

//  Forward declaration of class ParameterNames.
class ParameterNames;

//  Forward declaration of class AccessList.
class AccessList;

//  Forward declaration of class ns1__SetParameterAttributesStruct.
class ns1__SetParameterAttributesStruct;

//  Forward declaration of class SetParameterAttributesList.
class SetParameterAttributesList;

//  Forward declaration of class ns1__ParameterAttributeStruct.
class ns1__ParameterAttributeStruct;

//  Forward declaration of class ParameterAttributeList.
class ParameterAttributeList;

//  Forward declaration of class _ns1__SetParameterValues.
class _ns1__SetParameterValues;

//  Forward declaration of class _ns1__SetParameterValuesResponse.
class _ns1__SetParameterValuesResponse;

//  Forward declaration of class _ns1__GetParameterValues.
class _ns1__GetParameterValues;

//  Forward declaration of class _ns1__GetParameterValuesResponse.
class _ns1__GetParameterValuesResponse;

//  Forward declaration of class _ns1__SetParameterAttributes.
class _ns1__SetParameterAttributes;

//  Forward declaration of class _ns1__SetParameterAttributesResponse.
class _ns1__SetParameterAttributesResponse;

//  Forward declaration of class _ns1__GetParameterAttributes.
class _ns1__GetParameterAttributes;

//  Forward declaration of class _ns1__GetParameterAttributesResponse.
class _ns1__GetParameterAttributesResponse;

/// "urn:dslforum-org:cwmp-1-1":CommandKeyType is a simpleType restriction of xs:string.
/// Length of this string is within 0..32 characters
typedef std::string ns1__CommandKeyType:32;

/// "urn:dslforum-org:cwmp-1-1":ParameterKeyType is a simpleType restriction of xs:string.
/// Length of this string is within 0..32 characters
typedef std::string ns1__ParameterKeyType:32;

/// "urn:dslforum-org:cwmp-1-1":DeviceIdStruct is a complexType.
class ns1__DeviceIdStruct
{ public:
/// Length of this string is within 0..64 characters
    std::string                                                        
                                         Manufacturer                   1;	///< Required element.
/// Length of this string is exactly 6 characters
/// Content pattern is "[0-9A-F]{6}"
    std::string                                                        
                                         OUI                            1;	///< Required element.
/// Length of this string is within 0..64 characters
    std::string                                                        
                                         ProductClass                   1;	///< Required element.
/// Length of this string is within 0..64 characters
    std::string                                                        
                                         SerialNumber                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:dslforum-org:cwmp-1-1":EventStruct is a complexType.
class ns1__EventStruct
{ public:
/// Length of this string is within 0..64 characters
/// Content pattern is "0 BOOTSTRAP"
/// Content pattern is "1 BOOT"
/// Content pattern is "2 PERIODIC"
/// Content pattern is "3 SCHEDULED"
/// Content pattern is "4 VALUE CHANGE"
/// Content pattern is "5 KICKED"
/// Content pattern is "6 CONNECTION REQUEST"
/// Content pattern is "7 TRANSFER COMPLETE"
/// Content pattern is "8 DIAGNOSTICS COMPLETE"
/// Content pattern is "9 REQUEST DOWNLOAD"
/// Content pattern is "10 AUTONOMOUS TRANSFER COMPLETE"
/// Content pattern is "\\d+( \\S+)+"
/// Content pattern is "M Reboot"
/// Content pattern is "M ScheduleInform"
/// Content pattern is "M Download"
/// Content pattern is "M Upload"
/// Content pattern is "M \\S+"
/// Content pattern is "M X_\\S+"
/// Content pattern is "X [0-9A-F]{6} .*"
    std::string                                                        
                                         EventCode                      1;	///< Required element.
/// Element CommandKey of type "urn:dslforum-org:cwmp-1-1":CommandKeyType.
    ns1__CommandKeyType                  CommandKey                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:dslforum-org:cwmp-1-1":ParameterValueStruct is a complexType.
class ns1__ParameterValueStruct
{ public:
/// Length of this string is within 0..256 characters
    std::string                                                        
                                         Name                           1;	///< Required element.
/// Element Value of type xs:anySimpleType.
    xsd__anySimpleType                   Value                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:dslforum-org:cwmp-1-1":ParameterInfoStruct is a complexType.
class ns1__ParameterInfoStruct
{ public:
/// Length of this string is within 0..256 characters
    std::string                                                        
                                         Name                           1;	///< Required element.
/// Element Writable of type xs:boolean.
    bool                                 Writable                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:dslforum-org:cwmp-1-1":SetParameterAttributesStruct is a complexType.
class ns1__SetParameterAttributesStruct
{ public:
/// Length of this string is within 0..256 characters
    std::string                                                        
                                        *Name                          ;	///< Nullable pointer.
/// Element NotificationChange of type xs:boolean.
    bool                                 NotificationChange             1;	///< Required element.
    enum _ns1__SetParameterAttributesStruct_Notification
    {
/// @brief Notification off. The CPE need not inform the ACS of a change to the specified parameter(s)
	_ns1__SetParameterAttributesStruct_Notification__0 = 0,	///< xs:int value="0"
/// @brief Passive notification. Whenever the specified parameter value changes, the CPE MUST include the new value in the ParameterList in the Inform message that is sent the next time a session is established to the ACS
	_ns1__SetParameterAttributesStruct_Notification__1 = 1,	///< xs:int value="1"
/// @brief Active notification. Whenever the specified parameter value changes, the CPE MUST initiate a session to the ACS, and include the new value in the ParameterList in the associated Inform message
	_ns1__SetParameterAttributesStruct_Notification__2 = 2,	///< xs:int value="2"
    }
                                         Notification                   1;	///< Required element.
/// Element AccessListChange of type xs:boolean.
    bool                                 AccessListChange               1;	///< Required element.
/// Element AccessList of type "urn:dslforum-org:cwmp-1-1":AccessList.
    AccessList*                          AccessList_                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:dslforum-org:cwmp-1-1":ParameterAttributeStruct is a complexType.
class ns1__ParameterAttributeStruct
{ public:
/// Length of this string is within 0..256 characters
    std::string                                                        
                                         Name                           1;	///< Required element.
    enum _ns1__ParameterAttributeStruct_Notification
    {
	_ns1__ParameterAttributeStruct_Notification__0 = 0,	///< xs:int value="0"
	_ns1__ParameterAttributeStruct_Notification__1 = 1,	///< xs:int value="1"
	_ns1__ParameterAttributeStruct_Notification__2 = 2,	///< xs:int value="2"
    }
                                         Notification                   1;	///< Required element.
/// Element AccessList of type "urn:dslforum-org:cwmp-1-1":AccessList.
    AccessList*                          AccessList_                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:dslforum-org:cwmp-1-1":SetParameterValues of complexType.
/// @brief SetParameterValues message - Annex A.3.2.1

/// "urn:dslforum-org:cwmp-1-1":SetParameterValues is a complexType.
class _ns1__SetParameterValues
{ public:
/// Element DeviceId of type "urn:dslforum-org:cwmp-1-1":DeviceIdStruct.
    ns1__DeviceIdStruct*                 DeviceId                       1;	///< Required element.
/// Element Ip of type xs:string.
    std::string                          Ip                             1;	///< Required element.
/// Element ParameterList of type "urn:dslforum-org:cwmp-1-1":ParameterValueList.
    ParameterValueList*                  ParameterList                  1;	///< Required element.
/// Element ParameterKey of type "urn:dslforum-org:cwmp-1-1":ParameterKeyType.
    ns1__ParameterKeyType                ParameterKey                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:dslforum-org:cwmp-1-1":SetParameterValuesResponse of complexType.
/// @brief SetParameterValuesResponse message - Annex A.3.2.1

/// "urn:dslforum-org:cwmp-1-1":SetParameterValuesResponse is a complexType.
class _ns1__SetParameterValuesResponse
{ public:
    enum _ns1__SetParameterValuesResponse_Status
    {
/// @brief All Parameter changes have been validated and applied
	_ns1__SetParameterValuesResponse_Status__0 = 0,	///< xs:int value="0"
/// @brief All Parameter changes have been validated and committed, but some or all are not yet applied (for example, if a reboot is required before the new values are applied)
	_ns1__SetParameterValuesResponse_Status__1 = 1,	///< xs:int value="1"
    }
                                         Status                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:dslforum-org:cwmp-1-1":GetParameterValues of complexType.
/// @brief GetParameterValues message - Annex A.3.2.2

/// "urn:dslforum-org:cwmp-1-1":GetParameterValues is a complexType.
class _ns1__GetParameterValues
{ public:
/// Element DeviceId of type "urn:dslforum-org:cwmp-1-1":DeviceIdStruct.
    ns1__DeviceIdStruct*                 DeviceId                       1;	///< Required element.
/// Element Ip of type xs:string.
    std::string                          Ip                             1;	///< Required element.
/// Element ParameterNames of type "urn:dslforum-org:cwmp-1-1":ParameterNames.
    ParameterNames*                      ParameterNames_                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:dslforum-org:cwmp-1-1":GetParameterValuesResponse of complexType.
/// @brief GetParameterValuesResponse message - Annex A.3.2.2

/// "urn:dslforum-org:cwmp-1-1":GetParameterValuesResponse is a complexType.
class _ns1__GetParameterValuesResponse
{ public:
/// Element ParameterList of type "urn:dslforum-org:cwmp-1-1":ParameterValueList.
    ParameterValueList*                  ParameterList                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:dslforum-org:cwmp-1-1":SetParameterAttributes of complexType.
/// @brief SetParameterAttributes message - Annex A.3.2.4

/// "urn:dslforum-org:cwmp-1-1":SetParameterAttributes is a complexType.
class _ns1__SetParameterAttributes
{ public:
/// Element DeviceId of type "urn:dslforum-org:cwmp-1-1":DeviceIdStruct.
    ns1__DeviceIdStruct*                 DeviceId                       1;	///< Required element.
/// Element Ip of type xs:string.
    std::string                          Ip                             1;	///< Required element.
/// Element ParameterList of type "urn:dslforum-org:cwmp-1-1":SetParameterAttributesList.
    SetParameterAttributesList*          ParameterList                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:dslforum-org:cwmp-1-1":SetParameterAttributesResponse of complexType.
/// @brief SetParameterAttributesResponse message - Annex A.3.2.4

/// "urn:dslforum-org:cwmp-1-1":SetParameterAttributesResponse is a complexType.
class _ns1__SetParameterAttributesResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:dslforum-org:cwmp-1-1":GetParameterAttributes of complexType.
/// @brief GetParameterAttributes message - Annex A.3.2.5

/// "urn:dslforum-org:cwmp-1-1":GetParameterAttributes is a complexType.
class _ns1__GetParameterAttributes
{ public:
/// Element DeviceId of type "urn:dslforum-org:cwmp-1-1":DeviceIdStruct.
    ns1__DeviceIdStruct*                 DeviceId                       1;	///< Required element.
/// Element Ip of type xs:string.
    std::string                          Ip                             1;	///< Required element.
/// Element ParameterNames of type "urn:dslforum-org:cwmp-1-1":ParameterNames.
    ParameterNames*                      ParameterNames_                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:dslforum-org:cwmp-1-1":GetParameterAttributesResponse of complexType.
/// @brief GetParameterAttributesResponse message - Annex A.3.2.5

/// "urn:dslforum-org:cwmp-1-1":GetParameterAttributesResponse is a complexType.
class _ns1__GetParameterAttributesResponse
{ public:
/// Element ParameterList of type "urn:dslforum-org:cwmp-1-1":ParameterAttributeList.
    ParameterAttributeList*              ParameterList                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:dslforum-org:cwmp-1-1":EventList is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "urn:dslforum-org:cwmp-1-1":EventStruct
class EventList
{ public:
/// Pointer to array of ns1__EventStruct*.
    ns1__EventStruct*                   *__ptrEventStruct              ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:dslforum-org:cwmp-1-1":ParameterValueList is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "urn:dslforum-org:cwmp-1-1":ParameterValueStruct
class ParameterValueList
{ public:
/// Pointer to array of ns1__ParameterValueStruct*.
    ns1__ParameterValueStruct*          *__ptrParameterValueStruct     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:dslforum-org:cwmp-1-1":ParameterInfoList is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "urn:dslforum-org:cwmp-1-1":ParameterInfoStruct
class ParameterInfoList
{ public:
/// Pointer to array of ns1__ParameterInfoStruct*.
    ns1__ParameterInfoStruct*           *__ptrParameterInfoStruct      ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:dslforum-org:cwmp-1-1":ParameterNames is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of xs:string
class ParameterNames
{ public:
/// Pointer to array of std::string.
    std::string                         *__ptrstring                   ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:dslforum-org:cwmp-1-1":AccessList is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of xs:string
class AccessList
{ public:
/// Pointer to array of std::string.
    std::string                         *__ptrstring                   ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:dslforum-org:cwmp-1-1":SetParameterAttributesList is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "urn:dslforum-org:cwmp-1-1":SetParameterAttributesStruct
class SetParameterAttributesList
{ public:
/// Pointer to array of ns1__SetParameterAttributesStruct*.
    ns1__SetParameterAttributesStruct*  *__ptrSetParameterAttributesStruct;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:dslforum-org:cwmp-1-1":ParameterAttributeList is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "urn:dslforum-org:cwmp-1-1":ParameterAttributeStruct
class ParameterAttributeList
{ public:
/// Pointer to array of ns1__ParameterAttributeStruct*.
    ns1__ParameterAttributeStruct*      *__ptrParameterAttributeStruct ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	cwmp 
//gsoap ns1  service type:	cwmpPortType 
//gsoap ns1  service port:	http://localhost:8080/cwmp 
//gsoap ns1  service namespace:	urn:dslforum-org:cwmp-1-1 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage cwmp Definitions

@section cwmp_bindings Bindings
  - @ref cwmp

*/

/**

@page cwmp Binding "cwmp"

@section cwmp_service Service Documentation "cwmp"
CWMP service definition for CPE and ACS

@section cwmp_operations Operations of Binding  "cwmp"
  - @ref __ns1__SetParameterValues
  - @ref __ns1__GetParameterValues
  - @ref __ns1__SetParameterAttributes
  - @ref __ns1__GetParameterAttributes

@section cwmp_ports Endpoints of Binding  "cwmp"
  - http://localhost:8080/cwmp

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * cwmp                                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * __ns1__SetParameterValues                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetParameterValues" of service binding "cwmp"

/**

Operation details:

Service definition of function cwmp__SetParameterValues
  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetParameterValues(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetParameterValues*           ns1__SetParameterValues,
    // response parameters:
    _ns1__SetParameterValuesResponse*   ns1__SetParameterValuesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetParameterValues(
    struct soap *soap,
    // request parameters:
    _ns1__SetParameterValues*           ns1__SetParameterValues,
    // response parameters:
    _ns1__SetParameterValuesResponse*   ns1__SetParameterValuesResponse
  );
@endcode

C++ proxy class (defined in soapcwmpProxy.h):
  class cwmp;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	SetParameterValues document
//gsoap ns1  service method-encoding:	SetParameterValues literal
//gsoap ns1  service method-action:	SetParameterValues ""
int __ns1__SetParameterValues(
    _ns1__SetParameterValues*           ns1__SetParameterValues,	///< Request parameter
    _ns1__SetParameterValuesResponse*   ns1__SetParameterValuesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __ns1__GetParameterValues                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetParameterValues" of service binding "cwmp"

/**

Operation details:

Service definition of function cwmp__GetParameterValues
  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetParameterValues(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetParameterValues*           ns1__GetParameterValues,
    // response parameters:
    _ns1__GetParameterValuesResponse*   ns1__GetParameterValuesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetParameterValues(
    struct soap *soap,
    // request parameters:
    _ns1__GetParameterValues*           ns1__GetParameterValues,
    // response parameters:
    _ns1__GetParameterValuesResponse*   ns1__GetParameterValuesResponse
  );
@endcode

C++ proxy class (defined in soapcwmpProxy.h):
  class cwmp;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	GetParameterValues document
//gsoap ns1  service method-encoding:	GetParameterValues literal
//gsoap ns1  service method-action:	GetParameterValues ""
int __ns1__GetParameterValues(
    _ns1__GetParameterValues*           ns1__GetParameterValues,	///< Request parameter
    _ns1__GetParameterValuesResponse*   ns1__GetParameterValuesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __ns1__SetParameterAttributes                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetParameterAttributes" of service binding "cwmp"

/**

Operation details:

Service definition of function cwmp__SetParameterAttributes
  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetParameterAttributes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetParameterAttributes*       ns1__SetParameterAttributes,
    // response parameters:
    _ns1__SetParameterAttributesResponse* ns1__SetParameterAttributesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetParameterAttributes(
    struct soap *soap,
    // request parameters:
    _ns1__SetParameterAttributes*       ns1__SetParameterAttributes,
    // response parameters:
    _ns1__SetParameterAttributesResponse* ns1__SetParameterAttributesResponse
  );
@endcode

C++ proxy class (defined in soapcwmpProxy.h):
  class cwmp;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	SetParameterAttributes document
//gsoap ns1  service method-encoding:	SetParameterAttributes literal
//gsoap ns1  service method-action:	SetParameterAttributes ""
int __ns1__SetParameterAttributes(
    _ns1__SetParameterAttributes*       ns1__SetParameterAttributes,	///< Request parameter
    _ns1__SetParameterAttributesResponse* ns1__SetParameterAttributesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __ns1__GetParameterAttributes                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetParameterAttributes" of service binding "cwmp"

/**

Operation details:

Service definition of function cwmp__GetParameterAttributes
  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetParameterAttributes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetParameterAttributes*       ns1__GetParameterAttributes,
    // response parameters:
    _ns1__GetParameterAttributesResponse* ns1__GetParameterAttributesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetParameterAttributes(
    struct soap *soap,
    // request parameters:
    _ns1__GetParameterAttributes*       ns1__GetParameterAttributes,
    // response parameters:
    _ns1__GetParameterAttributesResponse* ns1__GetParameterAttributesResponse
  );
@endcode

C++ proxy class (defined in soapcwmpProxy.h):
  class cwmp;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	GetParameterAttributes document
//gsoap ns1  service method-encoding:	GetParameterAttributes literal
//gsoap ns1  service method-action:	GetParameterAttributes ""
int __ns1__GetParameterAttributes(
    _ns1__GetParameterAttributes*       ns1__GetParameterAttributes,	///< Request parameter
    _ns1__GetParameterAttributesResponse* ns1__GetParameterAttributesResponse	///< Response parameter
);

/* End of D:\program\huaWei\soap\soap\huaWei.h */
