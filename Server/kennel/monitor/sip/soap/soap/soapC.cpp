/* soapC.cpp
   Generated by gSOAP 2.7.12 from D:\program\huaWei\soap\soap\huaWei.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.12 2009-05-15 01:26:06 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE__ns1__SetParameterValuesResponse_Status:
		return soap_in__ns1__SetParameterValuesResponse_Status(soap, NULL, NULL, "ns1:SetParameterValuesResponse-Status");
	case SOAP_TYPE__ns1__ParameterAttributeStruct_Notification:
		return soap_in__ns1__ParameterAttributeStruct_Notification(soap, NULL, NULL, "ns1:ParameterAttributeStruct-Notification");
	case SOAP_TYPE__ns1__SetParameterAttributesStruct_Notification:
		return soap_in__ns1__SetParameterAttributesStruct_Notification(soap, NULL, NULL, "ns1:SetParameterAttributesStruct-Notification");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns1__ParameterKeyType:
		return soap_in_ns1__ParameterKeyType(soap, NULL, NULL, "ns1:ParameterKeyType");
	case SOAP_TYPE_ns1__CommandKeyType:
		return soap_in_ns1__CommandKeyType(soap, NULL, NULL, "ns1:CommandKeyType");
	case SOAP_TYPE_ParameterAttributeList:
		return soap_in_ParameterAttributeList(soap, NULL, NULL, "ns1:ParameterAttributeStruct");
	case SOAP_TYPE_ns1__ParameterAttributeStruct:
		return soap_in_ns1__ParameterAttributeStruct(soap, NULL, NULL, "ns1:ParameterAttributeStruct");
	case SOAP_TYPE_SetParameterAttributesList:
		return soap_in_SetParameterAttributesList(soap, NULL, NULL, "ns1:SetParameterAttributesStruct");
	case SOAP_TYPE_ns1__SetParameterAttributesStruct:
		return soap_in_ns1__SetParameterAttributesStruct(soap, NULL, NULL, "ns1:SetParameterAttributesStruct");
	case SOAP_TYPE_AccessList:
		return soap_in_AccessList(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ParameterNames:
		return soap_in_ParameterNames(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ParameterInfoList:
		return soap_in_ParameterInfoList(soap, NULL, NULL, "ns1:ParameterInfoStruct");
	case SOAP_TYPE_ns1__ParameterInfoStruct:
		return soap_in_ns1__ParameterInfoStruct(soap, NULL, NULL, "ns1:ParameterInfoStruct");
	case SOAP_TYPE_ParameterValueList:
		return soap_in_ParameterValueList(soap, NULL, NULL, "ns1:ParameterValueStruct");
	case SOAP_TYPE_ns1__ParameterValueStruct:
		return soap_in_ns1__ParameterValueStruct(soap, NULL, NULL, "ns1:ParameterValueStruct");
	case SOAP_TYPE_EventList:
		return soap_in_EventList(soap, NULL, NULL, "ns1:EventStruct");
	case SOAP_TYPE_ns1__EventStruct:
		return soap_in_ns1__EventStruct(soap, NULL, NULL, "ns1:EventStruct");
	case SOAP_TYPE_ns1__DeviceIdStruct:
		return soap_in_ns1__DeviceIdStruct(soap, NULL, NULL, "ns1:DeviceIdStruct");
	case SOAP_TYPE_xsd__anySimpleType:
		return soap_in_xsd__anySimpleType(soap, NULL, NULL, "xsd:anySimpleType");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__GetParameterAttributesResponse:
		return soap_in_PointerTo_ns1__GetParameterAttributesResponse(soap, NULL, NULL, "ns1:GetParameterAttributesResponse");
	case SOAP_TYPE_PointerTo_ns1__GetParameterAttributes:
		return soap_in_PointerTo_ns1__GetParameterAttributes(soap, NULL, NULL, "ns1:GetParameterAttributes");
	case SOAP_TYPE_PointerTo_ns1__SetParameterAttributesResponse:
		return soap_in_PointerTo_ns1__SetParameterAttributesResponse(soap, NULL, NULL, "ns1:SetParameterAttributesResponse");
	case SOAP_TYPE_PointerTo_ns1__SetParameterAttributes:
		return soap_in_PointerTo_ns1__SetParameterAttributes(soap, NULL, NULL, "ns1:SetParameterAttributes");
	case SOAP_TYPE_PointerTo_ns1__GetParameterValuesResponse:
		return soap_in_PointerTo_ns1__GetParameterValuesResponse(soap, NULL, NULL, "ns1:GetParameterValuesResponse");
	case SOAP_TYPE_PointerTo_ns1__GetParameterValues:
		return soap_in_PointerTo_ns1__GetParameterValues(soap, NULL, NULL, "ns1:GetParameterValues");
	case SOAP_TYPE_PointerTo_ns1__SetParameterValuesResponse:
		return soap_in_PointerTo_ns1__SetParameterValuesResponse(soap, NULL, NULL, "ns1:SetParameterValuesResponse");
	case SOAP_TYPE_PointerTo_ns1__SetParameterValues:
		return soap_in_PointerTo_ns1__SetParameterValues(soap, NULL, NULL, "ns1:SetParameterValues");
	case SOAP_TYPE_PointerToPointerTons1__ParameterAttributeStruct:
		return soap_in_PointerToPointerTons1__ParameterAttributeStruct(soap, NULL, NULL, "ns1:ParameterAttributeStruct");
	case SOAP_TYPE_PointerTons1__ParameterAttributeStruct:
		return soap_in_PointerTons1__ParameterAttributeStruct(soap, NULL, NULL, "ns1:ParameterAttributeStruct");
	case SOAP_TYPE_PointerToPointerTons1__SetParameterAttributesStruct:
		return soap_in_PointerToPointerTons1__SetParameterAttributesStruct(soap, NULL, NULL, "ns1:SetParameterAttributesStruct");
	case SOAP_TYPE_PointerTons1__SetParameterAttributesStruct:
		return soap_in_PointerTons1__SetParameterAttributesStruct(soap, NULL, NULL, "ns1:SetParameterAttributesStruct");
	case SOAP_TYPE_PointerToPointerTons1__ParameterInfoStruct:
		return soap_in_PointerToPointerTons1__ParameterInfoStruct(soap, NULL, NULL, "ns1:ParameterInfoStruct");
	case SOAP_TYPE_PointerTons1__ParameterInfoStruct:
		return soap_in_PointerTons1__ParameterInfoStruct(soap, NULL, NULL, "ns1:ParameterInfoStruct");
	case SOAP_TYPE_PointerToPointerTons1__ParameterValueStruct:
		return soap_in_PointerToPointerTons1__ParameterValueStruct(soap, NULL, NULL, "ns1:ParameterValueStruct");
	case SOAP_TYPE_PointerTons1__ParameterValueStruct:
		return soap_in_PointerTons1__ParameterValueStruct(soap, NULL, NULL, "ns1:ParameterValueStruct");
	case SOAP_TYPE_PointerToPointerTons1__EventStruct:
		return soap_in_PointerToPointerTons1__EventStruct(soap, NULL, NULL, "ns1:EventStruct");
	case SOAP_TYPE_PointerTons1__EventStruct:
		return soap_in_PointerTons1__EventStruct(soap, NULL, NULL, "ns1:EventStruct");
	case SOAP_TYPE_PointerToParameterAttributeList:
		return soap_in_PointerToParameterAttributeList(soap, NULL, NULL, "ns1:ParameterAttributeStruct");
	case SOAP_TYPE_PointerToSetParameterAttributesList:
		return soap_in_PointerToSetParameterAttributesList(soap, NULL, NULL, "ns1:SetParameterAttributesStruct");
	case SOAP_TYPE_PointerToParameterNames:
		return soap_in_PointerToParameterNames(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerToParameterValueList:
		return soap_in_PointerToParameterValueList(soap, NULL, NULL, "ns1:ParameterValueStruct");
	case SOAP_TYPE_PointerTons1__DeviceIdStruct:
		return soap_in_PointerTons1__DeviceIdStruct(soap, NULL, NULL, "ns1:DeviceIdStruct");
	case SOAP_TYPE_PointerToAccessList:
		return soap_in_PointerToAccessList(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:ParameterKeyType"))
		{	*type = SOAP_TYPE_ns1__ParameterKeyType;
			return soap_in_ns1__ParameterKeyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CommandKeyType"))
		{	*type = SOAP_TYPE_ns1__CommandKeyType;
			return soap_in_ns1__CommandKeyType(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns1:ParameterAttributeStruct"))
		{	*type = SOAP_TYPE_ParameterAttributeList;
			return soap_in_ParameterAttributeList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ParameterAttributeStruct"))
		{	*type = SOAP_TYPE_ns1__ParameterAttributeStruct;
			return soap_in_ns1__ParameterAttributeStruct(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns1:SetParameterAttributesStruct"))
		{	*type = SOAP_TYPE_SetParameterAttributesList;
			return soap_in_SetParameterAttributesList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetParameterAttributesStruct"))
		{	*type = SOAP_TYPE_ns1__SetParameterAttributesStruct;
			return soap_in_ns1__SetParameterAttributesStruct(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "xsd:string"))
		{	*type = SOAP_TYPE_AccessList;
			return soap_in_AccessList(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "xsd:string"))
		{	*type = SOAP_TYPE_ParameterNames;
			return soap_in_ParameterNames(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns1:ParameterInfoStruct"))
		{	*type = SOAP_TYPE_ParameterInfoList;
			return soap_in_ParameterInfoList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ParameterInfoStruct"))
		{	*type = SOAP_TYPE_ns1__ParameterInfoStruct;
			return soap_in_ns1__ParameterInfoStruct(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns1:ParameterValueStruct"))
		{	*type = SOAP_TYPE_ParameterValueList;
			return soap_in_ParameterValueList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ParameterValueStruct"))
		{	*type = SOAP_TYPE_ns1__ParameterValueStruct;
			return soap_in_ns1__ParameterValueStruct(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns1:EventStruct"))
		{	*type = SOAP_TYPE_EventList;
			return soap_in_EventList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:EventStruct"))
		{	*type = SOAP_TYPE_ns1__EventStruct;
			return soap_in_ns1__EventStruct(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DeviceIdStruct"))
		{	*type = SOAP_TYPE_ns1__DeviceIdStruct;
			return soap_in_ns1__DeviceIdStruct(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anySimpleType"))
		{	*type = SOAP_TYPE_xsd__anySimpleType;
			return soap_in_xsd__anySimpleType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetParameterValuesResponse-Status"))
		{	*type = SOAP_TYPE__ns1__SetParameterValuesResponse_Status;
			return soap_in__ns1__SetParameterValuesResponse_Status(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ParameterAttributeStruct-Notification"))
		{	*type = SOAP_TYPE__ns1__ParameterAttributeStruct_Notification;
			return soap_in__ns1__ParameterAttributeStruct_Notification(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetParameterAttributesStruct-Notification"))
		{	*type = SOAP_TYPE__ns1__SetParameterAttributesStruct_Notification;
			return soap_in__ns1__SetParameterAttributesStruct_Notification(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:GetParameterAttributesResponse"))
		{	*type = SOAP_TYPE__ns1__GetParameterAttributesResponse;
			return soap_in__ns1__GetParameterAttributesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetParameterAttributes"))
		{	*type = SOAP_TYPE__ns1__GetParameterAttributes;
			return soap_in__ns1__GetParameterAttributes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetParameterAttributesResponse"))
		{	*type = SOAP_TYPE__ns1__SetParameterAttributesResponse;
			return soap_in__ns1__SetParameterAttributesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetParameterAttributes"))
		{	*type = SOAP_TYPE__ns1__SetParameterAttributes;
			return soap_in__ns1__SetParameterAttributes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetParameterValuesResponse"))
		{	*type = SOAP_TYPE__ns1__GetParameterValuesResponse;
			return soap_in__ns1__GetParameterValuesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetParameterValues"))
		{	*type = SOAP_TYPE__ns1__GetParameterValues;
			return soap_in__ns1__GetParameterValues(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetParameterValuesResponse"))
		{	*type = SOAP_TYPE__ns1__SetParameterValuesResponse;
			return soap_in__ns1__SetParameterValuesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetParameterValues"))
		{	*type = SOAP_TYPE__ns1__SetParameterValues;
			return soap_in__ns1__SetParameterValues(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE__ns1__SetParameterValuesResponse_Status:
		return soap_out__ns1__SetParameterValuesResponse_Status(soap, tag, id, (const enum _ns1__SetParameterValuesResponse_Status *)ptr, "ns1:SetParameterValuesResponse-Status");
	case SOAP_TYPE__ns1__ParameterAttributeStruct_Notification:
		return soap_out__ns1__ParameterAttributeStruct_Notification(soap, tag, id, (const enum _ns1__ParameterAttributeStruct_Notification *)ptr, "ns1:ParameterAttributeStruct-Notification");
	case SOAP_TYPE__ns1__SetParameterAttributesStruct_Notification:
		return soap_out__ns1__SetParameterAttributesStruct_Notification(soap, tag, id, (const enum _ns1__SetParameterAttributesStruct_Notification *)ptr, "ns1:SetParameterAttributesStruct-Notification");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns1__ParameterKeyType:
		return soap_out_ns1__ParameterKeyType(soap, tag, id, (const std::string *)ptr, "ns1:ParameterKeyType");
	case SOAP_TYPE_ns1__CommandKeyType:
		return soap_out_ns1__CommandKeyType(soap, tag, id, (const std::string *)ptr, "ns1:CommandKeyType");
	case SOAP_TYPE__ns1__GetParameterAttributesResponse:
		return ((_ns1__GetParameterAttributesResponse *)ptr)->soap_out(soap, "ns1:GetParameterAttributesResponse", id, NULL);
	case SOAP_TYPE__ns1__GetParameterAttributes:
		return ((_ns1__GetParameterAttributes *)ptr)->soap_out(soap, "ns1:GetParameterAttributes", id, NULL);
	case SOAP_TYPE__ns1__SetParameterAttributesResponse:
		return ((_ns1__SetParameterAttributesResponse *)ptr)->soap_out(soap, "ns1:SetParameterAttributesResponse", id, NULL);
	case SOAP_TYPE__ns1__SetParameterAttributes:
		return ((_ns1__SetParameterAttributes *)ptr)->soap_out(soap, "ns1:SetParameterAttributes", id, NULL);
	case SOAP_TYPE__ns1__GetParameterValuesResponse:
		return ((_ns1__GetParameterValuesResponse *)ptr)->soap_out(soap, "ns1:GetParameterValuesResponse", id, NULL);
	case SOAP_TYPE__ns1__GetParameterValues:
		return ((_ns1__GetParameterValues *)ptr)->soap_out(soap, "ns1:GetParameterValues", id, NULL);
	case SOAP_TYPE__ns1__SetParameterValuesResponse:
		return ((_ns1__SetParameterValuesResponse *)ptr)->soap_out(soap, "ns1:SetParameterValuesResponse", id, NULL);
	case SOAP_TYPE__ns1__SetParameterValues:
		return ((_ns1__SetParameterValues *)ptr)->soap_out(soap, "ns1:SetParameterValues", id, NULL);
	case SOAP_TYPE_ParameterAttributeList:
		return ((ParameterAttributeList *)ptr)->soap_out(soap, tag, id, "ns1:ParameterAttributeStruct");
	case SOAP_TYPE_ns1__ParameterAttributeStruct:
		return ((ns1__ParameterAttributeStruct *)ptr)->soap_out(soap, tag, id, "ns1:ParameterAttributeStruct");
	case SOAP_TYPE_SetParameterAttributesList:
		return ((SetParameterAttributesList *)ptr)->soap_out(soap, tag, id, "ns1:SetParameterAttributesStruct");
	case SOAP_TYPE_ns1__SetParameterAttributesStruct:
		return ((ns1__SetParameterAttributesStruct *)ptr)->soap_out(soap, tag, id, "ns1:SetParameterAttributesStruct");
	case SOAP_TYPE_AccessList:
		return ((AccessList *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_ParameterNames:
		return ((ParameterNames *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_ParameterInfoList:
		return ((ParameterInfoList *)ptr)->soap_out(soap, tag, id, "ns1:ParameterInfoStruct");
	case SOAP_TYPE_ns1__ParameterInfoStruct:
		return ((ns1__ParameterInfoStruct *)ptr)->soap_out(soap, tag, id, "ns1:ParameterInfoStruct");
	case SOAP_TYPE_ParameterValueList:
		return ((ParameterValueList *)ptr)->soap_out(soap, tag, id, "ns1:ParameterValueStruct");
	case SOAP_TYPE_ns1__ParameterValueStruct:
		return ((ns1__ParameterValueStruct *)ptr)->soap_out(soap, tag, id, "ns1:ParameterValueStruct");
	case SOAP_TYPE_EventList:
		return ((EventList *)ptr)->soap_out(soap, tag, id, "ns1:EventStruct");
	case SOAP_TYPE_ns1__EventStruct:
		return ((ns1__EventStruct *)ptr)->soap_out(soap, tag, id, "ns1:EventStruct");
	case SOAP_TYPE_ns1__DeviceIdStruct:
		return ((ns1__DeviceIdStruct *)ptr)->soap_out(soap, tag, id, "ns1:DeviceIdStruct");
	case SOAP_TYPE_xsd__anySimpleType:
		return soap_out_xsd__anySimpleType(soap, tag, id, (const std::string *)ptr, "xsd:anySimpleType");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__GetParameterAttributesResponse:
		return soap_out_PointerTo_ns1__GetParameterAttributesResponse(soap, tag, id, (_ns1__GetParameterAttributesResponse *const*)ptr, "ns1:GetParameterAttributesResponse");
	case SOAP_TYPE_PointerTo_ns1__GetParameterAttributes:
		return soap_out_PointerTo_ns1__GetParameterAttributes(soap, tag, id, (_ns1__GetParameterAttributes *const*)ptr, "ns1:GetParameterAttributes");
	case SOAP_TYPE_PointerTo_ns1__SetParameterAttributesResponse:
		return soap_out_PointerTo_ns1__SetParameterAttributesResponse(soap, tag, id, (_ns1__SetParameterAttributesResponse *const*)ptr, "ns1:SetParameterAttributesResponse");
	case SOAP_TYPE_PointerTo_ns1__SetParameterAttributes:
		return soap_out_PointerTo_ns1__SetParameterAttributes(soap, tag, id, (_ns1__SetParameterAttributes *const*)ptr, "ns1:SetParameterAttributes");
	case SOAP_TYPE_PointerTo_ns1__GetParameterValuesResponse:
		return soap_out_PointerTo_ns1__GetParameterValuesResponse(soap, tag, id, (_ns1__GetParameterValuesResponse *const*)ptr, "ns1:GetParameterValuesResponse");
	case SOAP_TYPE_PointerTo_ns1__GetParameterValues:
		return soap_out_PointerTo_ns1__GetParameterValues(soap, tag, id, (_ns1__GetParameterValues *const*)ptr, "ns1:GetParameterValues");
	case SOAP_TYPE_PointerTo_ns1__SetParameterValuesResponse:
		return soap_out_PointerTo_ns1__SetParameterValuesResponse(soap, tag, id, (_ns1__SetParameterValuesResponse *const*)ptr, "ns1:SetParameterValuesResponse");
	case SOAP_TYPE_PointerTo_ns1__SetParameterValues:
		return soap_out_PointerTo_ns1__SetParameterValues(soap, tag, id, (_ns1__SetParameterValues *const*)ptr, "ns1:SetParameterValues");
	case SOAP_TYPE_PointerToPointerTons1__ParameterAttributeStruct:
		return soap_out_PointerToPointerTons1__ParameterAttributeStruct(soap, tag, id, (ns1__ParameterAttributeStruct **const*)ptr, "ns1:ParameterAttributeStruct");
	case SOAP_TYPE_PointerTons1__ParameterAttributeStruct:
		return soap_out_PointerTons1__ParameterAttributeStruct(soap, tag, id, (ns1__ParameterAttributeStruct *const*)ptr, "ns1:ParameterAttributeStruct");
	case SOAP_TYPE_PointerToPointerTons1__SetParameterAttributesStruct:
		return soap_out_PointerToPointerTons1__SetParameterAttributesStruct(soap, tag, id, (ns1__SetParameterAttributesStruct **const*)ptr, "ns1:SetParameterAttributesStruct");
	case SOAP_TYPE_PointerTons1__SetParameterAttributesStruct:
		return soap_out_PointerTons1__SetParameterAttributesStruct(soap, tag, id, (ns1__SetParameterAttributesStruct *const*)ptr, "ns1:SetParameterAttributesStruct");
	case SOAP_TYPE_PointerToPointerTons1__ParameterInfoStruct:
		return soap_out_PointerToPointerTons1__ParameterInfoStruct(soap, tag, id, (ns1__ParameterInfoStruct **const*)ptr, "ns1:ParameterInfoStruct");
	case SOAP_TYPE_PointerTons1__ParameterInfoStruct:
		return soap_out_PointerTons1__ParameterInfoStruct(soap, tag, id, (ns1__ParameterInfoStruct *const*)ptr, "ns1:ParameterInfoStruct");
	case SOAP_TYPE_PointerToPointerTons1__ParameterValueStruct:
		return soap_out_PointerToPointerTons1__ParameterValueStruct(soap, tag, id, (ns1__ParameterValueStruct **const*)ptr, "ns1:ParameterValueStruct");
	case SOAP_TYPE_PointerTons1__ParameterValueStruct:
		return soap_out_PointerTons1__ParameterValueStruct(soap, tag, id, (ns1__ParameterValueStruct *const*)ptr, "ns1:ParameterValueStruct");
	case SOAP_TYPE_PointerToPointerTons1__EventStruct:
		return soap_out_PointerToPointerTons1__EventStruct(soap, tag, id, (ns1__EventStruct **const*)ptr, "ns1:EventStruct");
	case SOAP_TYPE_PointerTons1__EventStruct:
		return soap_out_PointerTons1__EventStruct(soap, tag, id, (ns1__EventStruct *const*)ptr, "ns1:EventStruct");
	case SOAP_TYPE_PointerToParameterAttributeList:
		return soap_out_PointerToParameterAttributeList(soap, tag, id, (ParameterAttributeList *const*)ptr, "ns1:ParameterAttributeStruct");
	case SOAP_TYPE_PointerToSetParameterAttributesList:
		return soap_out_PointerToSetParameterAttributesList(soap, tag, id, (SetParameterAttributesList *const*)ptr, "ns1:SetParameterAttributesStruct");
	case SOAP_TYPE_PointerToParameterNames:
		return soap_out_PointerToParameterNames(soap, tag, id, (ParameterNames *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerToParameterValueList:
		return soap_out_PointerToParameterValueList(soap, tag, id, (ParameterValueList *const*)ptr, "ns1:ParameterValueStruct");
	case SOAP_TYPE_PointerTons1__DeviceIdStruct:
		return soap_out_PointerTons1__DeviceIdStruct(soap, tag, id, (ns1__DeviceIdStruct *const*)ptr, "ns1:DeviceIdStruct");
	case SOAP_TYPE_PointerToAccessList:
		return soap_out_PointerToAccessList(soap, tag, id, (AccessList *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns1__ParameterKeyType:
		soap_serialize_ns1__ParameterKeyType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns1__CommandKeyType:
		soap_serialize_ns1__CommandKeyType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__GetParameterAttributesResponse:
		((_ns1__GetParameterAttributesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetParameterAttributes:
		((_ns1__GetParameterAttributes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetParameterAttributesResponse:
		((_ns1__SetParameterAttributesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetParameterAttributes:
		((_ns1__SetParameterAttributes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetParameterValuesResponse:
		((_ns1__GetParameterValuesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetParameterValues:
		((_ns1__GetParameterValues *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetParameterValuesResponse:
		((_ns1__SetParameterValuesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetParameterValues:
		((_ns1__SetParameterValues *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ParameterAttributeList:
		((ParameterAttributeList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ParameterAttributeStruct:
		((ns1__ParameterAttributeStruct *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SetParameterAttributesList:
		((SetParameterAttributesList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__SetParameterAttributesStruct:
		((ns1__SetParameterAttributesStruct *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_AccessList:
		((AccessList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ParameterNames:
		((ParameterNames *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ParameterInfoList:
		((ParameterInfoList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ParameterInfoStruct:
		((ns1__ParameterInfoStruct *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ParameterValueList:
		((ParameterValueList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ParameterValueStruct:
		((ns1__ParameterValueStruct *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_EventList:
		((EventList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__EventStruct:
		((ns1__EventStruct *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__DeviceIdStruct:
		((ns1__DeviceIdStruct *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anySimpleType:
		soap_serialize_xsd__anySimpleType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE___ns1__GetParameterAttributes:
		soap_serialize___ns1__GetParameterAttributes(soap, (const struct __ns1__GetParameterAttributes *)ptr);
		break;
	case SOAP_TYPE___ns1__SetParameterAttributes:
		soap_serialize___ns1__SetParameterAttributes(soap, (const struct __ns1__SetParameterAttributes *)ptr);
		break;
	case SOAP_TYPE___ns1__GetParameterValues:
		soap_serialize___ns1__GetParameterValues(soap, (const struct __ns1__GetParameterValues *)ptr);
		break;
	case SOAP_TYPE___ns1__SetParameterValues:
		soap_serialize___ns1__SetParameterValues(soap, (const struct __ns1__SetParameterValues *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetParameterAttributesResponse:
		soap_serialize_PointerTo_ns1__GetParameterAttributesResponse(soap, (_ns1__GetParameterAttributesResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetParameterAttributes:
		soap_serialize_PointerTo_ns1__GetParameterAttributes(soap, (_ns1__GetParameterAttributes *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetParameterAttributesResponse:
		soap_serialize_PointerTo_ns1__SetParameterAttributesResponse(soap, (_ns1__SetParameterAttributesResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetParameterAttributes:
		soap_serialize_PointerTo_ns1__SetParameterAttributes(soap, (_ns1__SetParameterAttributes *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetParameterValuesResponse:
		soap_serialize_PointerTo_ns1__GetParameterValuesResponse(soap, (_ns1__GetParameterValuesResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetParameterValues:
		soap_serialize_PointerTo_ns1__GetParameterValues(soap, (_ns1__GetParameterValues *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetParameterValuesResponse:
		soap_serialize_PointerTo_ns1__SetParameterValuesResponse(soap, (_ns1__SetParameterValuesResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetParameterValues:
		soap_serialize_PointerTo_ns1__SetParameterValues(soap, (_ns1__SetParameterValues *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__ParameterAttributeStruct:
		soap_serialize_PointerToPointerTons1__ParameterAttributeStruct(soap, (ns1__ParameterAttributeStruct **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ParameterAttributeStruct:
		soap_serialize_PointerTons1__ParameterAttributeStruct(soap, (ns1__ParameterAttributeStruct *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__SetParameterAttributesStruct:
		soap_serialize_PointerToPointerTons1__SetParameterAttributesStruct(soap, (ns1__SetParameterAttributesStruct **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__SetParameterAttributesStruct:
		soap_serialize_PointerTons1__SetParameterAttributesStruct(soap, (ns1__SetParameterAttributesStruct *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__ParameterInfoStruct:
		soap_serialize_PointerToPointerTons1__ParameterInfoStruct(soap, (ns1__ParameterInfoStruct **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ParameterInfoStruct:
		soap_serialize_PointerTons1__ParameterInfoStruct(soap, (ns1__ParameterInfoStruct *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__ParameterValueStruct:
		soap_serialize_PointerToPointerTons1__ParameterValueStruct(soap, (ns1__ParameterValueStruct **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ParameterValueStruct:
		soap_serialize_PointerTons1__ParameterValueStruct(soap, (ns1__ParameterValueStruct *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__EventStruct:
		soap_serialize_PointerToPointerTons1__EventStruct(soap, (ns1__EventStruct **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__EventStruct:
		soap_serialize_PointerTons1__EventStruct(soap, (ns1__EventStruct *const*)ptr);
		break;
	case SOAP_TYPE_PointerToParameterAttributeList:
		soap_serialize_PointerToParameterAttributeList(soap, (ParameterAttributeList *const*)ptr);
		break;
	case SOAP_TYPE_PointerToSetParameterAttributesList:
		soap_serialize_PointerToSetParameterAttributesList(soap, (SetParameterAttributesList *const*)ptr);
		break;
	case SOAP_TYPE_PointerToParameterNames:
		soap_serialize_PointerToParameterNames(soap, (ParameterNames *const*)ptr);
		break;
	case SOAP_TYPE_PointerToParameterValueList:
		soap_serialize_PointerToParameterValueList(soap, (ParameterValueList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__DeviceIdStruct:
		soap_serialize_PointerTons1__DeviceIdStruct(soap, (ns1__DeviceIdStruct *const*)ptr);
		break;
	case SOAP_TYPE_PointerToAccessList:
		soap_serialize_PointerToAccessList(soap, (AccessList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__DeviceIdStruct:
		return (void*)soap_instantiate_ns1__DeviceIdStruct(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__EventStruct:
		return (void*)soap_instantiate_ns1__EventStruct(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ParameterValueStruct:
		return (void*)soap_instantiate_ns1__ParameterValueStruct(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ParameterInfoStruct:
		return (void*)soap_instantiate_ns1__ParameterInfoStruct(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__SetParameterAttributesStruct:
		return (void*)soap_instantiate_ns1__SetParameterAttributesStruct(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ParameterAttributeStruct:
		return (void*)soap_instantiate_ns1__ParameterAttributeStruct(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetParameterValues:
		return (void*)soap_instantiate__ns1__SetParameterValues(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetParameterValuesResponse:
		return (void*)soap_instantiate__ns1__SetParameterValuesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetParameterValues:
		return (void*)soap_instantiate__ns1__GetParameterValues(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetParameterValuesResponse:
		return (void*)soap_instantiate__ns1__GetParameterValuesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetParameterAttributes:
		return (void*)soap_instantiate__ns1__SetParameterAttributes(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetParameterAttributesResponse:
		return (void*)soap_instantiate__ns1__SetParameterAttributesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetParameterAttributes:
		return (void*)soap_instantiate__ns1__GetParameterAttributes(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetParameterAttributesResponse:
		return (void*)soap_instantiate__ns1__GetParameterAttributesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_EventList:
		return (void*)soap_instantiate_EventList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ParameterValueList:
		return (void*)soap_instantiate_ParameterValueList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ParameterInfoList:
		return (void*)soap_instantiate_ParameterInfoList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ParameterNames:
		return (void*)soap_instantiate_ParameterNames(soap, -1, type, arrayType, n);
	case SOAP_TYPE_AccessList:
		return (void*)soap_instantiate_AccessList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SetParameterAttributesList:
		return (void*)soap_instantiate_SetParameterAttributesList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ParameterAttributeList:
		return (void*)soap_instantiate_ParameterAttributeList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetParameterValues:
		return (void*)soap_instantiate___ns1__SetParameterValues(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetParameterValues:
		return (void*)soap_instantiate___ns1__GetParameterValues(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetParameterAttributes:
		return (void*)soap_instantiate___ns1__SetParameterAttributes(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetParameterAttributes:
		return (void*)soap_instantiate___ns1__GetParameterAttributes(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__anySimpleType:
		return (void*)soap_instantiate_xsd__anySimpleType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__CommandKeyType:
		return (void*)soap_instantiate_ns1__CommandKeyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ParameterKeyType:
		return (void*)soap_instantiate_ns1__ParameterKeyType(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_ns1__DeviceIdStruct:
		if (p->size < 0)
			delete (ns1__DeviceIdStruct*)p->ptr;
		else
			delete[] (ns1__DeviceIdStruct*)p->ptr;
		break;
	case SOAP_TYPE_ns1__EventStruct:
		if (p->size < 0)
			delete (ns1__EventStruct*)p->ptr;
		else
			delete[] (ns1__EventStruct*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ParameterValueStruct:
		if (p->size < 0)
			delete (ns1__ParameterValueStruct*)p->ptr;
		else
			delete[] (ns1__ParameterValueStruct*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ParameterInfoStruct:
		if (p->size < 0)
			delete (ns1__ParameterInfoStruct*)p->ptr;
		else
			delete[] (ns1__ParameterInfoStruct*)p->ptr;
		break;
	case SOAP_TYPE_ns1__SetParameterAttributesStruct:
		if (p->size < 0)
			delete (ns1__SetParameterAttributesStruct*)p->ptr;
		else
			delete[] (ns1__SetParameterAttributesStruct*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ParameterAttributeStruct:
		if (p->size < 0)
			delete (ns1__ParameterAttributeStruct*)p->ptr;
		else
			delete[] (ns1__ParameterAttributeStruct*)p->ptr;
		break;
	case SOAP_TYPE__ns1__SetParameterValues:
		if (p->size < 0)
			delete (_ns1__SetParameterValues*)p->ptr;
		else
			delete[] (_ns1__SetParameterValues*)p->ptr;
		break;
	case SOAP_TYPE__ns1__SetParameterValuesResponse:
		if (p->size < 0)
			delete (_ns1__SetParameterValuesResponse*)p->ptr;
		else
			delete[] (_ns1__SetParameterValuesResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetParameterValues:
		if (p->size < 0)
			delete (_ns1__GetParameterValues*)p->ptr;
		else
			delete[] (_ns1__GetParameterValues*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetParameterValuesResponse:
		if (p->size < 0)
			delete (_ns1__GetParameterValuesResponse*)p->ptr;
		else
			delete[] (_ns1__GetParameterValuesResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__SetParameterAttributes:
		if (p->size < 0)
			delete (_ns1__SetParameterAttributes*)p->ptr;
		else
			delete[] (_ns1__SetParameterAttributes*)p->ptr;
		break;
	case SOAP_TYPE__ns1__SetParameterAttributesResponse:
		if (p->size < 0)
			delete (_ns1__SetParameterAttributesResponse*)p->ptr;
		else
			delete[] (_ns1__SetParameterAttributesResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetParameterAttributes:
		if (p->size < 0)
			delete (_ns1__GetParameterAttributes*)p->ptr;
		else
			delete[] (_ns1__GetParameterAttributes*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetParameterAttributesResponse:
		if (p->size < 0)
			delete (_ns1__GetParameterAttributesResponse*)p->ptr;
		else
			delete[] (_ns1__GetParameterAttributesResponse*)p->ptr;
		break;
	case SOAP_TYPE_EventList:
		if (p->size < 0)
			delete (EventList*)p->ptr;
		else
			delete[] (EventList*)p->ptr;
		break;
	case SOAP_TYPE_ParameterValueList:
		if (p->size < 0)
			delete (ParameterValueList*)p->ptr;
		else
			delete[] (ParameterValueList*)p->ptr;
		break;
	case SOAP_TYPE_ParameterInfoList:
		if (p->size < 0)
			delete (ParameterInfoList*)p->ptr;
		else
			delete[] (ParameterInfoList*)p->ptr;
		break;
	case SOAP_TYPE_ParameterNames:
		if (p->size < 0)
			delete (ParameterNames*)p->ptr;
		else
			delete[] (ParameterNames*)p->ptr;
		break;
	case SOAP_TYPE_AccessList:
		if (p->size < 0)
			delete (AccessList*)p->ptr;
		else
			delete[] (AccessList*)p->ptr;
		break;
	case SOAP_TYPE_SetParameterAttributesList:
		if (p->size < 0)
			delete (SetParameterAttributesList*)p->ptr;
		else
			delete[] (SetParameterAttributesList*)p->ptr;
		break;
	case SOAP_TYPE_ParameterAttributeList:
		if (p->size < 0)
			delete (ParameterAttributeList*)p->ptr;
		else
			delete[] (ParameterAttributeList*)p->ptr;
		break;
	case SOAP_TYPE___ns1__SetParameterValues:
		if (p->size < 0)
			delete (struct __ns1__SetParameterValues*)p->ptr;
		else
			delete[] (struct __ns1__SetParameterValues*)p->ptr;
		break;
	case SOAP_TYPE___ns1__GetParameterValues:
		if (p->size < 0)
			delete (struct __ns1__GetParameterValues*)p->ptr;
		else
			delete[] (struct __ns1__GetParameterValues*)p->ptr;
		break;
	case SOAP_TYPE___ns1__SetParameterAttributes:
		if (p->size < 0)
			delete (struct __ns1__SetParameterAttributes*)p->ptr;
		else
			delete[] (struct __ns1__SetParameterAttributes*)p->ptr;
		break;
	case SOAP_TYPE___ns1__GetParameterAttributes:
		if (p->size < 0)
			delete (struct __ns1__GetParameterAttributes*)p->ptr;
		else
			delete[] (struct __ns1__GetParameterAttributes*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_xsd__anySimpleType:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_ns1__CommandKeyType:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ParameterKeyType:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__SetParameterValuesResponse_Status(struct soap *soap, enum _ns1__SetParameterValuesResponse_Status *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__ns1__SetParameterValuesResponse_Status
	*a = SOAP_DEFAULT__ns1__SetParameterValuesResponse_Status;
#else
	*a = (enum _ns1__SetParameterValuesResponse_Status)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__SetParameterValuesResponse_Status(struct soap *soap, const enum _ns1__SetParameterValuesResponse_Status *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__ns1__SetParameterValuesResponse_Status);
	if (soap_out__ns1__SetParameterValuesResponse_Status(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes__ns1__SetParameterValuesResponse_Status[] =
{	{ (long)_ns1__SetParameterValuesResponse_Status__0, "0" },
	{ (long)_ns1__SetParameterValuesResponse_Status__1, "1" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__SetParameterValuesResponse_Status2s(struct soap *soap, enum _ns1__SetParameterValuesResponse_Status n)
{	const char *s = soap_code_str(soap_codes__ns1__SetParameterValuesResponse_Status, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetParameterValuesResponse_Status(struct soap *soap, const char *tag, int id, const enum _ns1__SetParameterValuesResponse_Status *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetParameterValuesResponse_Status), type) || soap_send(soap, soap__ns1__SetParameterValuesResponse_Status2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum _ns1__SetParameterValuesResponse_Status * SOAP_FMAC4 soap_get__ns1__SetParameterValuesResponse_Status(struct soap *soap, enum _ns1__SetParameterValuesResponse_Status *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetParameterValuesResponse_Status(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__SetParameterValuesResponse_Status(struct soap *soap, const char *s, enum _ns1__SetParameterValuesResponse_Status *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes__ns1__SetParameterValuesResponse_Status, s);
	if (map)
		*a = (enum _ns1__SetParameterValuesResponse_Status)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum _ns1__SetParameterValuesResponse_Status)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum _ns1__SetParameterValuesResponse_Status * SOAP_FMAC4 soap_in__ns1__SetParameterValuesResponse_Status(struct soap *soap, const char *tag, enum _ns1__SetParameterValuesResponse_Status *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum _ns1__SetParameterValuesResponse_Status *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetParameterValuesResponse_Status, sizeof(enum _ns1__SetParameterValuesResponse_Status), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2_ns1__SetParameterValuesResponse_Status(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum _ns1__SetParameterValuesResponse_Status *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetParameterValuesResponse_Status, 0, sizeof(enum _ns1__SetParameterValuesResponse_Status), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__ParameterAttributeStruct_Notification(struct soap *soap, enum _ns1__ParameterAttributeStruct_Notification *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__ns1__ParameterAttributeStruct_Notification
	*a = SOAP_DEFAULT__ns1__ParameterAttributeStruct_Notification;
#else
	*a = (enum _ns1__ParameterAttributeStruct_Notification)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__ParameterAttributeStruct_Notification(struct soap *soap, const enum _ns1__ParameterAttributeStruct_Notification *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__ns1__ParameterAttributeStruct_Notification);
	if (soap_out__ns1__ParameterAttributeStruct_Notification(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes__ns1__ParameterAttributeStruct_Notification[] =
{	{ (long)_ns1__ParameterAttributeStruct_Notification__0, "0" },
	{ (long)_ns1__ParameterAttributeStruct_Notification__1, "1" },
	{ (long)_ns1__ParameterAttributeStruct_Notification__2, "2" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__ParameterAttributeStruct_Notification2s(struct soap *soap, enum _ns1__ParameterAttributeStruct_Notification n)
{	const char *s = soap_code_str(soap_codes__ns1__ParameterAttributeStruct_Notification, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ParameterAttributeStruct_Notification(struct soap *soap, const char *tag, int id, const enum _ns1__ParameterAttributeStruct_Notification *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ParameterAttributeStruct_Notification), type) || soap_send(soap, soap__ns1__ParameterAttributeStruct_Notification2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum _ns1__ParameterAttributeStruct_Notification * SOAP_FMAC4 soap_get__ns1__ParameterAttributeStruct_Notification(struct soap *soap, enum _ns1__ParameterAttributeStruct_Notification *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ParameterAttributeStruct_Notification(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__ParameterAttributeStruct_Notification(struct soap *soap, const char *s, enum _ns1__ParameterAttributeStruct_Notification *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes__ns1__ParameterAttributeStruct_Notification, s);
	if (map)
		*a = (enum _ns1__ParameterAttributeStruct_Notification)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum _ns1__ParameterAttributeStruct_Notification)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum _ns1__ParameterAttributeStruct_Notification * SOAP_FMAC4 soap_in__ns1__ParameterAttributeStruct_Notification(struct soap *soap, const char *tag, enum _ns1__ParameterAttributeStruct_Notification *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum _ns1__ParameterAttributeStruct_Notification *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ParameterAttributeStruct_Notification, sizeof(enum _ns1__ParameterAttributeStruct_Notification), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2_ns1__ParameterAttributeStruct_Notification(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum _ns1__ParameterAttributeStruct_Notification *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ParameterAttributeStruct_Notification, 0, sizeof(enum _ns1__ParameterAttributeStruct_Notification), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__SetParameterAttributesStruct_Notification(struct soap *soap, enum _ns1__SetParameterAttributesStruct_Notification *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__ns1__SetParameterAttributesStruct_Notification
	*a = SOAP_DEFAULT__ns1__SetParameterAttributesStruct_Notification;
#else
	*a = (enum _ns1__SetParameterAttributesStruct_Notification)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__SetParameterAttributesStruct_Notification(struct soap *soap, const enum _ns1__SetParameterAttributesStruct_Notification *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__ns1__SetParameterAttributesStruct_Notification);
	if (soap_out__ns1__SetParameterAttributesStruct_Notification(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes__ns1__SetParameterAttributesStruct_Notification[] =
{	{ (long)_ns1__SetParameterAttributesStruct_Notification__0, "0" },
	{ (long)_ns1__SetParameterAttributesStruct_Notification__1, "1" },
	{ (long)_ns1__SetParameterAttributesStruct_Notification__2, "2" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__SetParameterAttributesStruct_Notification2s(struct soap *soap, enum _ns1__SetParameterAttributesStruct_Notification n)
{	const char *s = soap_code_str(soap_codes__ns1__SetParameterAttributesStruct_Notification, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetParameterAttributesStruct_Notification(struct soap *soap, const char *tag, int id, const enum _ns1__SetParameterAttributesStruct_Notification *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetParameterAttributesStruct_Notification), type) || soap_send(soap, soap__ns1__SetParameterAttributesStruct_Notification2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum _ns1__SetParameterAttributesStruct_Notification * SOAP_FMAC4 soap_get__ns1__SetParameterAttributesStruct_Notification(struct soap *soap, enum _ns1__SetParameterAttributesStruct_Notification *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetParameterAttributesStruct_Notification(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__SetParameterAttributesStruct_Notification(struct soap *soap, const char *s, enum _ns1__SetParameterAttributesStruct_Notification *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes__ns1__SetParameterAttributesStruct_Notification, s);
	if (map)
		*a = (enum _ns1__SetParameterAttributesStruct_Notification)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum _ns1__SetParameterAttributesStruct_Notification)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum _ns1__SetParameterAttributesStruct_Notification * SOAP_FMAC4 soap_in__ns1__SetParameterAttributesStruct_Notification(struct soap *soap, const char *tag, enum _ns1__SetParameterAttributesStruct_Notification *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum _ns1__SetParameterAttributesStruct_Notification *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetParameterAttributesStruct_Notification, sizeof(enum _ns1__SetParameterAttributesStruct_Notification), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2_ns1__SetParameterAttributesStruct_Notification(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum _ns1__SetParameterAttributesStruct_Notification *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetParameterAttributesStruct_Notification, 0, sizeof(enum _ns1__SetParameterAttributesStruct_Notification), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ParameterKeyType(struct soap *soap, std::string *a)
{	soap_default_std__string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ParameterKeyType(struct soap *soap, std::string const*a)
{	soap_serialize_std__string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ParameterKeyType(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__ParameterKeyType);
	if (soap_out_ns1__ParameterKeyType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ParameterKeyType(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns1__ParameterKeyType), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ParameterKeyType(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ParameterKeyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_ns1__ParameterKeyType(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns1__ParameterKeyType, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, 32)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns1__ParameterKeyType, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_ns1__ParameterKeyType, 0, sizeof(std::string), 0, soap_copy_ns1__ParameterKeyType);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_ns1__ParameterKeyType(struct soap *soap, int n)
{	return soap_instantiate_ns1__ParameterKeyType(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ParameterKeyType(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_ns1__ParameterKeyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ParameterKeyType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ParameterKeyType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ParameterKeyType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__CommandKeyType(struct soap *soap, std::string *a)
{	soap_default_std__string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__CommandKeyType(struct soap *soap, std::string const*a)
{	soap_serialize_std__string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__CommandKeyType(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__CommandKeyType);
	if (soap_out_ns1__CommandKeyType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CommandKeyType(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns1__CommandKeyType), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__CommandKeyType(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__CommandKeyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_ns1__CommandKeyType(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns1__CommandKeyType, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, 32)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns1__CommandKeyType, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_ns1__CommandKeyType, 0, sizeof(std::string), 0, soap_copy_ns1__CommandKeyType);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_ns1__CommandKeyType(struct soap *soap, int n)
{	return soap_instantiate_ns1__CommandKeyType(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__CommandKeyType(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_ns1__CommandKeyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__CommandKeyType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__CommandKeyType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CommandKeyType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _ns1__GetParameterAttributesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetParameterAttributesResponse::ParameterList = NULL;
	/* transient soap skipped */
}

void _ns1__GetParameterAttributesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToParameterAttributeList(soap, &this->_ns1__GetParameterAttributesResponse::ParameterList);
	/* transient soap skipped */
}

int _ns1__GetParameterAttributesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetParameterAttributesResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetParameterAttributesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetParameterAttributesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetParameterAttributesResponse(struct soap *soap, const char *tag, int id, const _ns1__GetParameterAttributesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetParameterAttributesResponse), type))
		return soap->error;
	if (soap_out_PointerToParameterAttributeList(soap, "ParameterList", -1, &(a->_ns1__GetParameterAttributesResponse::ParameterList), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetParameterAttributesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetParameterAttributesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetParameterAttributesResponse * SOAP_FMAC4 soap_get__ns1__GetParameterAttributesResponse(struct soap *soap, _ns1__GetParameterAttributesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetParameterAttributesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetParameterAttributesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetParameterAttributesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetParameterAttributesResponse * SOAP_FMAC4 soap_in__ns1__GetParameterAttributesResponse(struct soap *soap, const char *tag, _ns1__GetParameterAttributesResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetParameterAttributesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetParameterAttributesResponse, sizeof(_ns1__GetParameterAttributesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetParameterAttributesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetParameterAttributesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ParameterList1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ParameterList1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToParameterAttributeList(soap, "ParameterList", &(a->_ns1__GetParameterAttributesResponse::ParameterList), "ns1:ParameterAttributeStruct"))
				{	soap_flag_ParameterList1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetParameterAttributesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetParameterAttributesResponse, 0, sizeof(_ns1__GetParameterAttributesResponse), 0, soap_copy__ns1__GetParameterAttributesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ParameterList1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetParameterAttributesResponse * SOAP_FMAC6 soap_new__ns1__GetParameterAttributesResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetParameterAttributesResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetParameterAttributesResponse(struct soap *soap, _ns1__GetParameterAttributesResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetParameterAttributesResponse * SOAP_FMAC4 soap_instantiate__ns1__GetParameterAttributesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetParameterAttributesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetParameterAttributesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetParameterAttributesResponse;
		if (size)
			*size = sizeof(_ns1__GetParameterAttributesResponse);
		((_ns1__GetParameterAttributesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetParameterAttributesResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetParameterAttributesResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetParameterAttributesResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetParameterAttributesResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetParameterAttributesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetParameterAttributesResponse %p -> %p\n", q, p));
	*(_ns1__GetParameterAttributesResponse*)p = *(_ns1__GetParameterAttributesResponse*)q;
}

void _ns1__GetParameterAttributes::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetParameterAttributes::DeviceId = NULL;
	soap_default_std__string(soap, &this->_ns1__GetParameterAttributes::Ip);
	this->_ns1__GetParameterAttributes::ParameterNames_ = NULL;
	/* transient soap skipped */
}

void _ns1__GetParameterAttributes::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__DeviceIdStruct(soap, &this->_ns1__GetParameterAttributes::DeviceId);
	soap_embedded(soap, &this->_ns1__GetParameterAttributes::Ip, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__GetParameterAttributes::Ip);
	soap_serialize_PointerToParameterNames(soap, &this->_ns1__GetParameterAttributes::ParameterNames_);
	/* transient soap skipped */
}

int _ns1__GetParameterAttributes::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetParameterAttributes);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetParameterAttributes::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetParameterAttributes(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetParameterAttributes(struct soap *soap, const char *tag, int id, const _ns1__GetParameterAttributes *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetParameterAttributes), type))
		return soap->error;
	if (soap_out_PointerTons1__DeviceIdStruct(soap, "DeviceId", -1, &(a->_ns1__GetParameterAttributes::DeviceId), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Ip", -1, &(a->_ns1__GetParameterAttributes::Ip), ""))
		return soap->error;
	if (soap_out_PointerToParameterNames(soap, "ParameterNames", -1, &(a->_ns1__GetParameterAttributes::ParameterNames_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetParameterAttributes::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetParameterAttributes(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetParameterAttributes * SOAP_FMAC4 soap_get__ns1__GetParameterAttributes(struct soap *soap, _ns1__GetParameterAttributes *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetParameterAttributes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetParameterAttributes::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetParameterAttributes(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetParameterAttributes * SOAP_FMAC4 soap_in__ns1__GetParameterAttributes(struct soap *soap, const char *tag, _ns1__GetParameterAttributes *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetParameterAttributes *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetParameterAttributes, sizeof(_ns1__GetParameterAttributes), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetParameterAttributes)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetParameterAttributes *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DeviceId1 = 1;
	size_t soap_flag_Ip1 = 1;
	size_t soap_flag_ParameterNames_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DeviceId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__DeviceIdStruct(soap, "DeviceId", &(a->_ns1__GetParameterAttributes::DeviceId), "ns1:DeviceIdStruct"))
				{	soap_flag_DeviceId1--;
					continue;
				}
			if (soap_flag_Ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Ip", &(a->_ns1__GetParameterAttributes::Ip), "xsd:string"))
				{	soap_flag_Ip1--;
					continue;
				}
			if (soap_flag_ParameterNames_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToParameterNames(soap, "ParameterNames", &(a->_ns1__GetParameterAttributes::ParameterNames_), "xsd:string"))
				{	soap_flag_ParameterNames_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetParameterAttributes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetParameterAttributes, 0, sizeof(_ns1__GetParameterAttributes), 0, soap_copy__ns1__GetParameterAttributes);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DeviceId1 > 0 || soap_flag_Ip1 > 0 || soap_flag_ParameterNames_1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetParameterAttributes * SOAP_FMAC6 soap_new__ns1__GetParameterAttributes(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetParameterAttributes(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetParameterAttributes(struct soap *soap, _ns1__GetParameterAttributes *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetParameterAttributes * SOAP_FMAC4 soap_instantiate__ns1__GetParameterAttributes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetParameterAttributes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetParameterAttributes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetParameterAttributes;
		if (size)
			*size = sizeof(_ns1__GetParameterAttributes);
		((_ns1__GetParameterAttributes*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetParameterAttributes[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetParameterAttributes);
		for (int i = 0; i < n; i++)
			((_ns1__GetParameterAttributes*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetParameterAttributes*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetParameterAttributes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetParameterAttributes %p -> %p\n", q, p));
	*(_ns1__GetParameterAttributes*)p = *(_ns1__GetParameterAttributes*)q;
}

void _ns1__SetParameterAttributesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__SetParameterAttributesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__SetParameterAttributesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetParameterAttributesResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__SetParameterAttributesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetParameterAttributesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetParameterAttributesResponse(struct soap *soap, const char *tag, int id, const _ns1__SetParameterAttributesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetParameterAttributesResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetParameterAttributesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetParameterAttributesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetParameterAttributesResponse * SOAP_FMAC4 soap_get__ns1__SetParameterAttributesResponse(struct soap *soap, _ns1__SetParameterAttributesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetParameterAttributesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__SetParameterAttributesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetParameterAttributesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetParameterAttributesResponse * SOAP_FMAC4 soap_in__ns1__SetParameterAttributesResponse(struct soap *soap, const char *tag, _ns1__SetParameterAttributesResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetParameterAttributesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetParameterAttributesResponse, sizeof(_ns1__SetParameterAttributesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetParameterAttributesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetParameterAttributesResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetParameterAttributesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetParameterAttributesResponse, 0, sizeof(_ns1__SetParameterAttributesResponse), 0, soap_copy__ns1__SetParameterAttributesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__SetParameterAttributesResponse * SOAP_FMAC6 soap_new__ns1__SetParameterAttributesResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__SetParameterAttributesResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__SetParameterAttributesResponse(struct soap *soap, _ns1__SetParameterAttributesResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__SetParameterAttributesResponse * SOAP_FMAC4 soap_instantiate__ns1__SetParameterAttributesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetParameterAttributesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetParameterAttributesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__SetParameterAttributesResponse;
		if (size)
			*size = sizeof(_ns1__SetParameterAttributesResponse);
		((_ns1__SetParameterAttributesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__SetParameterAttributesResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetParameterAttributesResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SetParameterAttributesResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetParameterAttributesResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetParameterAttributesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetParameterAttributesResponse %p -> %p\n", q, p));
	*(_ns1__SetParameterAttributesResponse*)p = *(_ns1__SetParameterAttributesResponse*)q;
}

void _ns1__SetParameterAttributes::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetParameterAttributes::DeviceId = NULL;
	soap_default_std__string(soap, &this->_ns1__SetParameterAttributes::Ip);
	this->_ns1__SetParameterAttributes::ParameterList = NULL;
	/* transient soap skipped */
}

void _ns1__SetParameterAttributes::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__DeviceIdStruct(soap, &this->_ns1__SetParameterAttributes::DeviceId);
	soap_embedded(soap, &this->_ns1__SetParameterAttributes::Ip, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__SetParameterAttributes::Ip);
	soap_serialize_PointerToSetParameterAttributesList(soap, &this->_ns1__SetParameterAttributes::ParameterList);
	/* transient soap skipped */
}

int _ns1__SetParameterAttributes::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetParameterAttributes);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__SetParameterAttributes::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetParameterAttributes(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetParameterAttributes(struct soap *soap, const char *tag, int id, const _ns1__SetParameterAttributes *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetParameterAttributes), type))
		return soap->error;
	if (soap_out_PointerTons1__DeviceIdStruct(soap, "DeviceId", -1, &(a->_ns1__SetParameterAttributes::DeviceId), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Ip", -1, &(a->_ns1__SetParameterAttributes::Ip), ""))
		return soap->error;
	if (soap_out_PointerToSetParameterAttributesList(soap, "ParameterList", -1, &(a->_ns1__SetParameterAttributes::ParameterList), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetParameterAttributes::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetParameterAttributes(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetParameterAttributes * SOAP_FMAC4 soap_get__ns1__SetParameterAttributes(struct soap *soap, _ns1__SetParameterAttributes *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetParameterAttributes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__SetParameterAttributes::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetParameterAttributes(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetParameterAttributes * SOAP_FMAC4 soap_in__ns1__SetParameterAttributes(struct soap *soap, const char *tag, _ns1__SetParameterAttributes *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetParameterAttributes *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetParameterAttributes, sizeof(_ns1__SetParameterAttributes), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetParameterAttributes)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetParameterAttributes *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DeviceId1 = 1;
	size_t soap_flag_Ip1 = 1;
	size_t soap_flag_ParameterList1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DeviceId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__DeviceIdStruct(soap, "DeviceId", &(a->_ns1__SetParameterAttributes::DeviceId), "ns1:DeviceIdStruct"))
				{	soap_flag_DeviceId1--;
					continue;
				}
			if (soap_flag_Ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Ip", &(a->_ns1__SetParameterAttributes::Ip), "xsd:string"))
				{	soap_flag_Ip1--;
					continue;
				}
			if (soap_flag_ParameterList1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSetParameterAttributesList(soap, "ParameterList", &(a->_ns1__SetParameterAttributes::ParameterList), "ns1:SetParameterAttributesStruct"))
				{	soap_flag_ParameterList1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetParameterAttributes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetParameterAttributes, 0, sizeof(_ns1__SetParameterAttributes), 0, soap_copy__ns1__SetParameterAttributes);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DeviceId1 > 0 || soap_flag_Ip1 > 0 || soap_flag_ParameterList1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__SetParameterAttributes * SOAP_FMAC6 soap_new__ns1__SetParameterAttributes(struct soap *soap, int n)
{	return soap_instantiate__ns1__SetParameterAttributes(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__SetParameterAttributes(struct soap *soap, _ns1__SetParameterAttributes *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__SetParameterAttributes * SOAP_FMAC4 soap_instantiate__ns1__SetParameterAttributes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetParameterAttributes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetParameterAttributes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__SetParameterAttributes;
		if (size)
			*size = sizeof(_ns1__SetParameterAttributes);
		((_ns1__SetParameterAttributes*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__SetParameterAttributes[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetParameterAttributes);
		for (int i = 0; i < n; i++)
			((_ns1__SetParameterAttributes*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetParameterAttributes*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetParameterAttributes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetParameterAttributes %p -> %p\n", q, p));
	*(_ns1__SetParameterAttributes*)p = *(_ns1__SetParameterAttributes*)q;
}

void _ns1__GetParameterValuesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetParameterValuesResponse::ParameterList = NULL;
	/* transient soap skipped */
}

void _ns1__GetParameterValuesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToParameterValueList(soap, &this->_ns1__GetParameterValuesResponse::ParameterList);
	/* transient soap skipped */
}

int _ns1__GetParameterValuesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetParameterValuesResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetParameterValuesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetParameterValuesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetParameterValuesResponse(struct soap *soap, const char *tag, int id, const _ns1__GetParameterValuesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetParameterValuesResponse), type))
		return soap->error;
	if (soap_out_PointerToParameterValueList(soap, "ParameterList", -1, &(a->_ns1__GetParameterValuesResponse::ParameterList), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetParameterValuesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetParameterValuesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetParameterValuesResponse * SOAP_FMAC4 soap_get__ns1__GetParameterValuesResponse(struct soap *soap, _ns1__GetParameterValuesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetParameterValuesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetParameterValuesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetParameterValuesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetParameterValuesResponse * SOAP_FMAC4 soap_in__ns1__GetParameterValuesResponse(struct soap *soap, const char *tag, _ns1__GetParameterValuesResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetParameterValuesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetParameterValuesResponse, sizeof(_ns1__GetParameterValuesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetParameterValuesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetParameterValuesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ParameterList1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ParameterList1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToParameterValueList(soap, "ParameterList", &(a->_ns1__GetParameterValuesResponse::ParameterList), "ns1:ParameterValueStruct"))
				{	soap_flag_ParameterList1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetParameterValuesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetParameterValuesResponse, 0, sizeof(_ns1__GetParameterValuesResponse), 0, soap_copy__ns1__GetParameterValuesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ParameterList1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetParameterValuesResponse * SOAP_FMAC6 soap_new__ns1__GetParameterValuesResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetParameterValuesResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetParameterValuesResponse(struct soap *soap, _ns1__GetParameterValuesResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetParameterValuesResponse * SOAP_FMAC4 soap_instantiate__ns1__GetParameterValuesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetParameterValuesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetParameterValuesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetParameterValuesResponse;
		if (size)
			*size = sizeof(_ns1__GetParameterValuesResponse);
		((_ns1__GetParameterValuesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetParameterValuesResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetParameterValuesResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetParameterValuesResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetParameterValuesResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetParameterValuesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetParameterValuesResponse %p -> %p\n", q, p));
	*(_ns1__GetParameterValuesResponse*)p = *(_ns1__GetParameterValuesResponse*)q;
}

void _ns1__GetParameterValues::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetParameterValues::DeviceId = NULL;
	soap_default_std__string(soap, &this->_ns1__GetParameterValues::Ip);
	this->_ns1__GetParameterValues::ParameterNames_ = NULL;
	/* transient soap skipped */
}

void _ns1__GetParameterValues::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__DeviceIdStruct(soap, &this->_ns1__GetParameterValues::DeviceId);
	soap_embedded(soap, &this->_ns1__GetParameterValues::Ip, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__GetParameterValues::Ip);
	soap_serialize_PointerToParameterNames(soap, &this->_ns1__GetParameterValues::ParameterNames_);
	/* transient soap skipped */
}

int _ns1__GetParameterValues::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetParameterValues);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetParameterValues::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetParameterValues(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetParameterValues(struct soap *soap, const char *tag, int id, const _ns1__GetParameterValues *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetParameterValues), type))
		return soap->error;
	if (soap_out_PointerTons1__DeviceIdStruct(soap, "DeviceId", -1, &(a->_ns1__GetParameterValues::DeviceId), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Ip", -1, &(a->_ns1__GetParameterValues::Ip), ""))
		return soap->error;
	if (soap_out_PointerToParameterNames(soap, "ParameterNames", -1, &(a->_ns1__GetParameterValues::ParameterNames_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetParameterValues::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetParameterValues(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetParameterValues * SOAP_FMAC4 soap_get__ns1__GetParameterValues(struct soap *soap, _ns1__GetParameterValues *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetParameterValues(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetParameterValues::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetParameterValues(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetParameterValues * SOAP_FMAC4 soap_in__ns1__GetParameterValues(struct soap *soap, const char *tag, _ns1__GetParameterValues *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetParameterValues *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetParameterValues, sizeof(_ns1__GetParameterValues), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetParameterValues)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetParameterValues *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DeviceId1 = 1;
	size_t soap_flag_Ip1 = 1;
	size_t soap_flag_ParameterNames_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DeviceId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__DeviceIdStruct(soap, "DeviceId", &(a->_ns1__GetParameterValues::DeviceId), "ns1:DeviceIdStruct"))
				{	soap_flag_DeviceId1--;
					continue;
				}
			if (soap_flag_Ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Ip", &(a->_ns1__GetParameterValues::Ip), "xsd:string"))
				{	soap_flag_Ip1--;
					continue;
				}
			if (soap_flag_ParameterNames_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToParameterNames(soap, "ParameterNames", &(a->_ns1__GetParameterValues::ParameterNames_), "xsd:string"))
				{	soap_flag_ParameterNames_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetParameterValues *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetParameterValues, 0, sizeof(_ns1__GetParameterValues), 0, soap_copy__ns1__GetParameterValues);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DeviceId1 > 0 || soap_flag_Ip1 > 0 || soap_flag_ParameterNames_1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetParameterValues * SOAP_FMAC6 soap_new__ns1__GetParameterValues(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetParameterValues(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetParameterValues(struct soap *soap, _ns1__GetParameterValues *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetParameterValues * SOAP_FMAC4 soap_instantiate__ns1__GetParameterValues(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetParameterValues(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetParameterValues, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetParameterValues;
		if (size)
			*size = sizeof(_ns1__GetParameterValues);
		((_ns1__GetParameterValues*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetParameterValues[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetParameterValues);
		for (int i = 0; i < n; i++)
			((_ns1__GetParameterValues*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetParameterValues*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetParameterValues(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetParameterValues %p -> %p\n", q, p));
	*(_ns1__GetParameterValues*)p = *(_ns1__GetParameterValues*)q;
}

void _ns1__SetParameterValuesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default__ns1__SetParameterValuesResponse_Status(soap, &this->_ns1__SetParameterValuesResponse::Status);
	/* transient soap skipped */
}

void _ns1__SetParameterValuesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__SetParameterValuesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetParameterValuesResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__SetParameterValuesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetParameterValuesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetParameterValuesResponse(struct soap *soap, const char *tag, int id, const _ns1__SetParameterValuesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetParameterValuesResponse), type))
		return soap->error;
	if (soap_out__ns1__SetParameterValuesResponse_Status(soap, "Status", -1, &(a->_ns1__SetParameterValuesResponse::Status), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetParameterValuesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetParameterValuesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetParameterValuesResponse * SOAP_FMAC4 soap_get__ns1__SetParameterValuesResponse(struct soap *soap, _ns1__SetParameterValuesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetParameterValuesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__SetParameterValuesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetParameterValuesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetParameterValuesResponse * SOAP_FMAC4 soap_in__ns1__SetParameterValuesResponse(struct soap *soap, const char *tag, _ns1__SetParameterValuesResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetParameterValuesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetParameterValuesResponse, sizeof(_ns1__SetParameterValuesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetParameterValuesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetParameterValuesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Status1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__ns1__SetParameterValuesResponse_Status(soap, "Status", &(a->_ns1__SetParameterValuesResponse::Status), "ns1:SetParameterValuesResponse-Status"))
				{	soap_flag_Status1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetParameterValuesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetParameterValuesResponse, 0, sizeof(_ns1__SetParameterValuesResponse), 0, soap_copy__ns1__SetParameterValuesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__SetParameterValuesResponse * SOAP_FMAC6 soap_new__ns1__SetParameterValuesResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__SetParameterValuesResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__SetParameterValuesResponse(struct soap *soap, _ns1__SetParameterValuesResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__SetParameterValuesResponse * SOAP_FMAC4 soap_instantiate__ns1__SetParameterValuesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetParameterValuesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetParameterValuesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__SetParameterValuesResponse;
		if (size)
			*size = sizeof(_ns1__SetParameterValuesResponse);
		((_ns1__SetParameterValuesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__SetParameterValuesResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetParameterValuesResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SetParameterValuesResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetParameterValuesResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetParameterValuesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetParameterValuesResponse %p -> %p\n", q, p));
	*(_ns1__SetParameterValuesResponse*)p = *(_ns1__SetParameterValuesResponse*)q;
}

void _ns1__SetParameterValues::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetParameterValues::DeviceId = NULL;
	soap_default_std__string(soap, &this->_ns1__SetParameterValues::Ip);
	this->_ns1__SetParameterValues::ParameterList = NULL;
	soap_default_ns1__ParameterKeyType(soap, &this->_ns1__SetParameterValues::ParameterKey);
	/* transient soap skipped */
}

void _ns1__SetParameterValues::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__DeviceIdStruct(soap, &this->_ns1__SetParameterValues::DeviceId);
	soap_embedded(soap, &this->_ns1__SetParameterValues::Ip, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__SetParameterValues::Ip);
	soap_serialize_PointerToParameterValueList(soap, &this->_ns1__SetParameterValues::ParameterList);
	soap_serialize_ns1__ParameterKeyType(soap, &this->_ns1__SetParameterValues::ParameterKey);
	/* transient soap skipped */
}

int _ns1__SetParameterValues::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetParameterValues);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__SetParameterValues::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetParameterValues(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetParameterValues(struct soap *soap, const char *tag, int id, const _ns1__SetParameterValues *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetParameterValues), type))
		return soap->error;
	if (soap_out_PointerTons1__DeviceIdStruct(soap, "DeviceId", -1, &(a->_ns1__SetParameterValues::DeviceId), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Ip", -1, &(a->_ns1__SetParameterValues::Ip), ""))
		return soap->error;
	if (soap_out_PointerToParameterValueList(soap, "ParameterList", -1, &(a->_ns1__SetParameterValues::ParameterList), ""))
		return soap->error;
	if (soap_out_ns1__ParameterKeyType(soap, "ParameterKey", -1, &(a->_ns1__SetParameterValues::ParameterKey), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetParameterValues::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetParameterValues(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetParameterValues * SOAP_FMAC4 soap_get__ns1__SetParameterValues(struct soap *soap, _ns1__SetParameterValues *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetParameterValues(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__SetParameterValues::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetParameterValues(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetParameterValues * SOAP_FMAC4 soap_in__ns1__SetParameterValues(struct soap *soap, const char *tag, _ns1__SetParameterValues *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetParameterValues *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetParameterValues, sizeof(_ns1__SetParameterValues), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetParameterValues)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetParameterValues *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DeviceId1 = 1;
	size_t soap_flag_Ip1 = 1;
	size_t soap_flag_ParameterList1 = 1;
	size_t soap_flag_ParameterKey1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DeviceId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__DeviceIdStruct(soap, "DeviceId", &(a->_ns1__SetParameterValues::DeviceId), "ns1:DeviceIdStruct"))
				{	soap_flag_DeviceId1--;
					continue;
				}
			if (soap_flag_Ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Ip", &(a->_ns1__SetParameterValues::Ip), "xsd:string"))
				{	soap_flag_Ip1--;
					continue;
				}
			if (soap_flag_ParameterList1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToParameterValueList(soap, "ParameterList", &(a->_ns1__SetParameterValues::ParameterList), "ns1:ParameterValueStruct"))
				{	soap_flag_ParameterList1--;
					continue;
				}
			if (soap_flag_ParameterKey1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_ns1__ParameterKeyType(soap, "ParameterKey", &(a->_ns1__SetParameterValues::ParameterKey), "ns1:ParameterKeyType"))
				{	soap_flag_ParameterKey1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetParameterValues *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetParameterValues, 0, sizeof(_ns1__SetParameterValues), 0, soap_copy__ns1__SetParameterValues);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DeviceId1 > 0 || soap_flag_Ip1 > 0 || soap_flag_ParameterList1 > 0 || soap_flag_ParameterKey1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__SetParameterValues * SOAP_FMAC6 soap_new__ns1__SetParameterValues(struct soap *soap, int n)
{	return soap_instantiate__ns1__SetParameterValues(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__SetParameterValues(struct soap *soap, _ns1__SetParameterValues *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__SetParameterValues * SOAP_FMAC4 soap_instantiate__ns1__SetParameterValues(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetParameterValues(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetParameterValues, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__SetParameterValues;
		if (size)
			*size = sizeof(_ns1__SetParameterValues);
		((_ns1__SetParameterValues*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__SetParameterValues[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetParameterValues);
		for (int i = 0; i < n; i++)
			((_ns1__SetParameterValues*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetParameterValues*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetParameterValues(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetParameterValues %p -> %p\n", q, p));
	*(_ns1__SetParameterValues*)p = *(_ns1__SetParameterValues*)q;
}

void ParameterAttributeList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptrParameterAttributeStruct = NULL;
}

void ParameterAttributeList::soap_serialize(struct soap *soap) const
{
	if (this->__ptrParameterAttributeStruct && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptrParameterAttributeStruct, 1, SOAP_TYPE_ParameterAttributeList))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerTons1__ParameterAttributeStruct(soap, this->__ptrParameterAttributeStruct + i);
		}
}

int ParameterAttributeList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptrParameterAttributeStruct, 1, tag, SOAP_TYPE_ParameterAttributeList);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ParameterAttributeList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_ParameterAttributeList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ParameterAttributeList(struct soap *soap, const char *tag, int id, const ParameterAttributeList *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptrParameterAttributeStruct ? soap_putsize(soap, "ns1:ParameterAttributeStruct", a->__size) : NULL;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptrParameterAttributeStruct, 1, type, SOAP_TYPE_ParameterAttributeList);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons1__ParameterAttributeStruct(soap, "ParameterAttributeStruct", -1, &a->__ptrParameterAttributeStruct[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *ParameterAttributeList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ParameterAttributeList(soap, this, tag, type);
}

SOAP_FMAC3 ParameterAttributeList * SOAP_FMAC4 soap_get_ParameterAttributeList(struct soap *soap, ParameterAttributeList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ParameterAttributeList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ParameterAttributeList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ParameterAttributeList(soap, tag, this, type);
}

SOAP_FMAC3 ParameterAttributeList * SOAP_FMAC4 soap_in_ParameterAttributeList(struct soap *soap, const char *tag, ParameterAttributeList *a, const char *type)
{	int i, j;
	ns1__ParameterAttributeStruct **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (ParameterAttributeList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ParameterAttributeList, sizeof(ParameterAttributeList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptrParameterAttributeStruct = (ns1__ParameterAttributeStruct **)soap_malloc(soap, sizeof(ns1__ParameterAttributeStruct *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptrParameterAttributeStruct[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons1__ParameterAttributeStruct(soap, NULL, a->__ptrParameterAttributeStruct + i, "ns1:ParameterAttributeStruct"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (ns1__ParameterAttributeStruct **)soap_push_block(soap, NULL, sizeof(ns1__ParameterAttributeStruct *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerTons1__ParameterAttributeStruct(soap, NULL, p, "ns1:ParameterAttributeStruct"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptrParameterAttributeStruct = (ns1__ParameterAttributeStruct **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, NULL, (char*)a->__ptrParameterAttributeStruct, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ParameterAttributeList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ParameterAttributeList, 0, sizeof(ParameterAttributeList), 0, soap_copy_ParameterAttributeList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ParameterAttributeList * SOAP_FMAC6 soap_new_ParameterAttributeList(struct soap *soap, int n)
{	return soap_instantiate_ParameterAttributeList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ParameterAttributeList(struct soap *soap, ParameterAttributeList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ParameterAttributeList * SOAP_FMAC4 soap_instantiate_ParameterAttributeList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ParameterAttributeList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ParameterAttributeList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ParameterAttributeList;
		if (size)
			*size = sizeof(ParameterAttributeList);
		((ParameterAttributeList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ParameterAttributeList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ParameterAttributeList);
		for (int i = 0; i < n; i++)
			((ParameterAttributeList*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ParameterAttributeList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ParameterAttributeList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ParameterAttributeList %p -> %p\n", q, p));
	*(ParameterAttributeList*)p = *(ParameterAttributeList*)q;
}

void ns1__ParameterAttributeStruct::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__ParameterAttributeStruct::Name);
	soap_default__ns1__ParameterAttributeStruct_Notification(soap, &this->ns1__ParameterAttributeStruct::Notification);
	this->ns1__ParameterAttributeStruct::AccessList_ = NULL;
	/* transient soap skipped */
}

void ns1__ParameterAttributeStruct::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns1__ParameterAttributeStruct::Name, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns1__ParameterAttributeStruct::Name);
	soap_serialize_PointerToAccessList(soap, &this->ns1__ParameterAttributeStruct::AccessList_);
	/* transient soap skipped */
}

int ns1__ParameterAttributeStruct::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ParameterAttributeStruct);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ParameterAttributeStruct::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ParameterAttributeStruct(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ParameterAttributeStruct(struct soap *soap, const char *tag, int id, const ns1__ParameterAttributeStruct *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ParameterAttributeStruct), type))
		return soap->error;
	if (soap_out_std__string(soap, "Name", -1, &(a->ns1__ParameterAttributeStruct::Name), ""))
		return soap->error;
	if (soap_out__ns1__ParameterAttributeStruct_Notification(soap, "Notification", -1, &(a->ns1__ParameterAttributeStruct::Notification), ""))
		return soap->error;
	if (soap_out_PointerToAccessList(soap, "AccessList", -1, &(a->ns1__ParameterAttributeStruct::AccessList_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ParameterAttributeStruct::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ParameterAttributeStruct(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ParameterAttributeStruct * SOAP_FMAC4 soap_get_ns1__ParameterAttributeStruct(struct soap *soap, ns1__ParameterAttributeStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ParameterAttributeStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ParameterAttributeStruct::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ParameterAttributeStruct(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ParameterAttributeStruct * SOAP_FMAC4 soap_in_ns1__ParameterAttributeStruct(struct soap *soap, const char *tag, ns1__ParameterAttributeStruct *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ParameterAttributeStruct *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ParameterAttributeStruct, sizeof(ns1__ParameterAttributeStruct), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ParameterAttributeStruct)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ParameterAttributeStruct *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Name1 = 1;
	size_t soap_flag_Notification1 = 1;
	size_t soap_flag_AccessList_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Name", &(a->ns1__ParameterAttributeStruct::Name), "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			if (soap_flag_Notification1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__ns1__ParameterAttributeStruct_Notification(soap, "Notification", &(a->ns1__ParameterAttributeStruct::Notification), "ns1:ParameterAttributeStruct-Notification"))
				{	soap_flag_Notification1--;
					continue;
				}
			if (soap_flag_AccessList_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToAccessList(soap, "AccessList", &(a->ns1__ParameterAttributeStruct::AccessList_), "xsd:string"))
				{	soap_flag_AccessList_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ParameterAttributeStruct *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ParameterAttributeStruct, 0, sizeof(ns1__ParameterAttributeStruct), 0, soap_copy_ns1__ParameterAttributeStruct);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Name1 > 0 || soap_flag_Notification1 > 0 || soap_flag_AccessList_1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ParameterAttributeStruct * SOAP_FMAC6 soap_new_ns1__ParameterAttributeStruct(struct soap *soap, int n)
{	return soap_instantiate_ns1__ParameterAttributeStruct(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ParameterAttributeStruct(struct soap *soap, ns1__ParameterAttributeStruct *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ParameterAttributeStruct * SOAP_FMAC4 soap_instantiate_ns1__ParameterAttributeStruct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ParameterAttributeStruct(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ParameterAttributeStruct, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ParameterAttributeStruct;
		if (size)
			*size = sizeof(ns1__ParameterAttributeStruct);
		((ns1__ParameterAttributeStruct*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ParameterAttributeStruct[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ParameterAttributeStruct);
		for (int i = 0; i < n; i++)
			((ns1__ParameterAttributeStruct*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ParameterAttributeStruct*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ParameterAttributeStruct(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ParameterAttributeStruct %p -> %p\n", q, p));
	*(ns1__ParameterAttributeStruct*)p = *(ns1__ParameterAttributeStruct*)q;
}

void SetParameterAttributesList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptrSetParameterAttributesStruct = NULL;
}

void SetParameterAttributesList::soap_serialize(struct soap *soap) const
{
	if (this->__ptrSetParameterAttributesStruct && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptrSetParameterAttributesStruct, 1, SOAP_TYPE_SetParameterAttributesList))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerTons1__SetParameterAttributesStruct(soap, this->__ptrSetParameterAttributesStruct + i);
		}
}

int SetParameterAttributesList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptrSetParameterAttributesStruct, 1, tag, SOAP_TYPE_SetParameterAttributesList);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int SetParameterAttributesList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_SetParameterAttributesList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SetParameterAttributesList(struct soap *soap, const char *tag, int id, const SetParameterAttributesList *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptrSetParameterAttributesStruct ? soap_putsize(soap, "ns1:SetParameterAttributesStruct", a->__size) : NULL;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptrSetParameterAttributesStruct, 1, type, SOAP_TYPE_SetParameterAttributesList);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons1__SetParameterAttributesStruct(soap, "SetParameterAttributesStruct", -1, &a->__ptrSetParameterAttributesStruct[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *SetParameterAttributesList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SetParameterAttributesList(soap, this, tag, type);
}

SOAP_FMAC3 SetParameterAttributesList * SOAP_FMAC4 soap_get_SetParameterAttributesList(struct soap *soap, SetParameterAttributesList *p, const char *tag, const char *type)
{
	if ((p = soap_in_SetParameterAttributesList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *SetParameterAttributesList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SetParameterAttributesList(soap, tag, this, type);
}

SOAP_FMAC3 SetParameterAttributesList * SOAP_FMAC4 soap_in_SetParameterAttributesList(struct soap *soap, const char *tag, SetParameterAttributesList *a, const char *type)
{	int i, j;
	ns1__SetParameterAttributesStruct **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (SetParameterAttributesList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SetParameterAttributesList, sizeof(SetParameterAttributesList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptrSetParameterAttributesStruct = (ns1__SetParameterAttributesStruct **)soap_malloc(soap, sizeof(ns1__SetParameterAttributesStruct *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptrSetParameterAttributesStruct[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons1__SetParameterAttributesStruct(soap, NULL, a->__ptrSetParameterAttributesStruct + i, "ns1:SetParameterAttributesStruct"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (ns1__SetParameterAttributesStruct **)soap_push_block(soap, NULL, sizeof(ns1__SetParameterAttributesStruct *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerTons1__SetParameterAttributesStruct(soap, NULL, p, "ns1:SetParameterAttributesStruct"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptrSetParameterAttributesStruct = (ns1__SetParameterAttributesStruct **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, NULL, (char*)a->__ptrSetParameterAttributesStruct, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SetParameterAttributesList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SetParameterAttributesList, 0, sizeof(SetParameterAttributesList), 0, soap_copy_SetParameterAttributesList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 SetParameterAttributesList * SOAP_FMAC6 soap_new_SetParameterAttributesList(struct soap *soap, int n)
{	return soap_instantiate_SetParameterAttributesList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SetParameterAttributesList(struct soap *soap, SetParameterAttributesList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 SetParameterAttributesList * SOAP_FMAC4 soap_instantiate_SetParameterAttributesList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SetParameterAttributesList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SetParameterAttributesList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new SetParameterAttributesList;
		if (size)
			*size = sizeof(SetParameterAttributesList);
		((SetParameterAttributesList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new SetParameterAttributesList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(SetParameterAttributesList);
		for (int i = 0; i < n; i++)
			((SetParameterAttributesList*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (SetParameterAttributesList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SetParameterAttributesList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SetParameterAttributesList %p -> %p\n", q, p));
	*(SetParameterAttributesList*)p = *(SetParameterAttributesList*)q;
}

void ns1__SetParameterAttributesStruct::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__SetParameterAttributesStruct::Name = NULL;
	soap_default_bool(soap, &this->ns1__SetParameterAttributesStruct::NotificationChange);
	soap_default__ns1__SetParameterAttributesStruct_Notification(soap, &this->ns1__SetParameterAttributesStruct::Notification);
	soap_default_bool(soap, &this->ns1__SetParameterAttributesStruct::AccessListChange);
	this->ns1__SetParameterAttributesStruct::AccessList_ = NULL;
	/* transient soap skipped */
}

void ns1__SetParameterAttributesStruct::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__SetParameterAttributesStruct::Name);
	soap_serialize_PointerToAccessList(soap, &this->ns1__SetParameterAttributesStruct::AccessList_);
	/* transient soap skipped */
}

int ns1__SetParameterAttributesStruct::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__SetParameterAttributesStruct);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__SetParameterAttributesStruct::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__SetParameterAttributesStruct(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SetParameterAttributesStruct(struct soap *soap, const char *tag, int id, const ns1__SetParameterAttributesStruct *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__SetParameterAttributesStruct), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "Name", -1, &(a->ns1__SetParameterAttributesStruct::Name), ""))
		return soap->error;
	if (soap_out_bool(soap, "NotificationChange", -1, &(a->ns1__SetParameterAttributesStruct::NotificationChange), ""))
		return soap->error;
	if (soap_out__ns1__SetParameterAttributesStruct_Notification(soap, "Notification", -1, &(a->ns1__SetParameterAttributesStruct::Notification), ""))
		return soap->error;
	if (soap_out_bool(soap, "AccessListChange", -1, &(a->ns1__SetParameterAttributesStruct::AccessListChange), ""))
		return soap->error;
	if (soap_out_PointerToAccessList(soap, "AccessList", -1, &(a->ns1__SetParameterAttributesStruct::AccessList_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__SetParameterAttributesStruct::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__SetParameterAttributesStruct(soap, this, tag, type);
}

SOAP_FMAC3 ns1__SetParameterAttributesStruct * SOAP_FMAC4 soap_get_ns1__SetParameterAttributesStruct(struct soap *soap, ns1__SetParameterAttributesStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SetParameterAttributesStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__SetParameterAttributesStruct::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__SetParameterAttributesStruct(soap, tag, this, type);
}

SOAP_FMAC3 ns1__SetParameterAttributesStruct * SOAP_FMAC4 soap_in_ns1__SetParameterAttributesStruct(struct soap *soap, const char *tag, ns1__SetParameterAttributesStruct *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__SetParameterAttributesStruct *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__SetParameterAttributesStruct, sizeof(ns1__SetParameterAttributesStruct), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__SetParameterAttributesStruct)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__SetParameterAttributesStruct *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Name1 = 1;
	size_t soap_flag_NotificationChange1 = 1;
	size_t soap_flag_Notification1 = 1;
	size_t soap_flag_AccessListChange1 = 1;
	size_t soap_flag_AccessList_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "Name", &(a->ns1__SetParameterAttributesStruct::Name), "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			if (soap_flag_NotificationChange1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "NotificationChange", &(a->ns1__SetParameterAttributesStruct::NotificationChange), "xsd:boolean"))
				{	soap_flag_NotificationChange1--;
					continue;
				}
			if (soap_flag_Notification1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__ns1__SetParameterAttributesStruct_Notification(soap, "Notification", &(a->ns1__SetParameterAttributesStruct::Notification), "ns1:SetParameterAttributesStruct-Notification"))
				{	soap_flag_Notification1--;
					continue;
				}
			if (soap_flag_AccessListChange1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "AccessListChange", &(a->ns1__SetParameterAttributesStruct::AccessListChange), "xsd:boolean"))
				{	soap_flag_AccessListChange1--;
					continue;
				}
			if (soap_flag_AccessList_1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToAccessList(soap, "AccessList", &(a->ns1__SetParameterAttributesStruct::AccessList_), "xsd:string"))
				{	soap_flag_AccessList_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__SetParameterAttributesStruct *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__SetParameterAttributesStruct, 0, sizeof(ns1__SetParameterAttributesStruct), 0, soap_copy_ns1__SetParameterAttributesStruct);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_NotificationChange1 > 0 || soap_flag_Notification1 > 0 || soap_flag_AccessListChange1 > 0 || soap_flag_AccessList_1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__SetParameterAttributesStruct * SOAP_FMAC6 soap_new_ns1__SetParameterAttributesStruct(struct soap *soap, int n)
{	return soap_instantiate_ns1__SetParameterAttributesStruct(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__SetParameterAttributesStruct(struct soap *soap, ns1__SetParameterAttributesStruct *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__SetParameterAttributesStruct * SOAP_FMAC4 soap_instantiate_ns1__SetParameterAttributesStruct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__SetParameterAttributesStruct(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__SetParameterAttributesStruct, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__SetParameterAttributesStruct;
		if (size)
			*size = sizeof(ns1__SetParameterAttributesStruct);
		((ns1__SetParameterAttributesStruct*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__SetParameterAttributesStruct[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__SetParameterAttributesStruct);
		for (int i = 0; i < n; i++)
			((ns1__SetParameterAttributesStruct*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__SetParameterAttributesStruct*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__SetParameterAttributesStruct(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__SetParameterAttributesStruct %p -> %p\n", q, p));
	*(ns1__SetParameterAttributesStruct*)p = *(ns1__SetParameterAttributesStruct*)q;
}

void AccessList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptrstring = NULL;
}

void AccessList::soap_serialize(struct soap *soap) const
{
	if (this->__ptrstring && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptrstring, 1, SOAP_TYPE_AccessList))
		for (int i = 0; i < this->__size; i++)
		{	soap_embedded(soap, this->__ptrstring + i, SOAP_TYPE_std__string);
			soap_serialize_std__string(soap, this->__ptrstring + i);
		}
}

int AccessList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptrstring, 1, tag, SOAP_TYPE_AccessList);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int AccessList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_AccessList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_AccessList(struct soap *soap, const char *tag, int id, const AccessList *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptrstring ? soap_putsize(soap, "xsd:string", a->__size) : NULL;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptrstring, 1, type, SOAP_TYPE_AccessList);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_std__string(soap, "string", -1, &a->__ptrstring[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *AccessList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_AccessList(soap, this, tag, type);
}

SOAP_FMAC3 AccessList * SOAP_FMAC4 soap_get_AccessList(struct soap *soap, AccessList *p, const char *tag, const char *type)
{
	if ((p = soap_in_AccessList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *AccessList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_AccessList(soap, tag, this, type);
}

SOAP_FMAC3 AccessList * SOAP_FMAC4 soap_in_AccessList(struct soap *soap, const char *tag, AccessList *a, const char *type)
{	int i, j;
	std::string *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (AccessList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_AccessList, sizeof(AccessList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptrstring = soap_new_std__string(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_std__string(soap, a->__ptrstring+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_std__string(soap, NULL, a->__ptrstring + i, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	std::string q;
			if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (std::string *)soap_push_block(soap, NULL, sizeof(std::string));
				if (!p)
					return NULL;
				memcpy(p, &q, sizeof(std::string));
				soap_default_std__string(soap, p);
				if (!soap_in_std__string(soap, NULL, p, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			if (soap->blist->size)
				a->__ptrstring = soap_new_std__string(soap, soap->blist->size/sizeof(std::string));
			else
				a->__ptrstring = NULL;
			soap_save_block(soap, NULL, (char*)a->__ptrstring, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (AccessList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_AccessList, 0, sizeof(AccessList), 0, soap_copy_AccessList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 AccessList * SOAP_FMAC6 soap_new_AccessList(struct soap *soap, int n)
{	return soap_instantiate_AccessList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_AccessList(struct soap *soap, AccessList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 AccessList * SOAP_FMAC4 soap_instantiate_AccessList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_AccessList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_AccessList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new AccessList;
		if (size)
			*size = sizeof(AccessList);
		((AccessList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new AccessList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(AccessList);
		for (int i = 0; i < n; i++)
			((AccessList*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (AccessList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_AccessList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying AccessList %p -> %p\n", q, p));
	*(AccessList*)p = *(AccessList*)q;
}

void ParameterNames::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptrstring = NULL;
}

void ParameterNames::soap_serialize(struct soap *soap) const
{
	if (this->__ptrstring && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptrstring, 1, SOAP_TYPE_ParameterNames))
		for (int i = 0; i < this->__size; i++)
		{	soap_embedded(soap, this->__ptrstring + i, SOAP_TYPE_std__string);
			soap_serialize_std__string(soap, this->__ptrstring + i);
		}
}

int ParameterNames::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptrstring, 1, tag, SOAP_TYPE_ParameterNames);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ParameterNames::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_ParameterNames(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ParameterNames(struct soap *soap, const char *tag, int id, const ParameterNames *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptrstring ? soap_putsize(soap, "xsd:string", a->__size) : NULL;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptrstring, 1, type, SOAP_TYPE_ParameterNames);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_std__string(soap, "string", -1, &a->__ptrstring[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *ParameterNames::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ParameterNames(soap, this, tag, type);
}

SOAP_FMAC3 ParameterNames * SOAP_FMAC4 soap_get_ParameterNames(struct soap *soap, ParameterNames *p, const char *tag, const char *type)
{
	if ((p = soap_in_ParameterNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ParameterNames::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ParameterNames(soap, tag, this, type);
}

SOAP_FMAC3 ParameterNames * SOAP_FMAC4 soap_in_ParameterNames(struct soap *soap, const char *tag, ParameterNames *a, const char *type)
{	int i, j;
	std::string *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (ParameterNames *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ParameterNames, sizeof(ParameterNames), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptrstring = soap_new_std__string(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_std__string(soap, a->__ptrstring+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_std__string(soap, NULL, a->__ptrstring + i, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	std::string q;
			if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (std::string *)soap_push_block(soap, NULL, sizeof(std::string));
				if (!p)
					return NULL;
				memcpy(p, &q, sizeof(std::string));
				soap_default_std__string(soap, p);
				if (!soap_in_std__string(soap, NULL, p, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			if (soap->blist->size)
				a->__ptrstring = soap_new_std__string(soap, soap->blist->size/sizeof(std::string));
			else
				a->__ptrstring = NULL;
			soap_save_block(soap, NULL, (char*)a->__ptrstring, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ParameterNames *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ParameterNames, 0, sizeof(ParameterNames), 0, soap_copy_ParameterNames);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ParameterNames * SOAP_FMAC6 soap_new_ParameterNames(struct soap *soap, int n)
{	return soap_instantiate_ParameterNames(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ParameterNames(struct soap *soap, ParameterNames *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ParameterNames * SOAP_FMAC4 soap_instantiate_ParameterNames(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ParameterNames(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ParameterNames, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ParameterNames;
		if (size)
			*size = sizeof(ParameterNames);
		((ParameterNames*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ParameterNames[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ParameterNames);
		for (int i = 0; i < n; i++)
			((ParameterNames*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ParameterNames*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ParameterNames(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ParameterNames %p -> %p\n", q, p));
	*(ParameterNames*)p = *(ParameterNames*)q;
}

void ParameterInfoList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptrParameterInfoStruct = NULL;
}

void ParameterInfoList::soap_serialize(struct soap *soap) const
{
	if (this->__ptrParameterInfoStruct && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptrParameterInfoStruct, 1, SOAP_TYPE_ParameterInfoList))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerTons1__ParameterInfoStruct(soap, this->__ptrParameterInfoStruct + i);
		}
}

int ParameterInfoList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptrParameterInfoStruct, 1, tag, SOAP_TYPE_ParameterInfoList);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ParameterInfoList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_ParameterInfoList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ParameterInfoList(struct soap *soap, const char *tag, int id, const ParameterInfoList *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptrParameterInfoStruct ? soap_putsize(soap, "ns1:ParameterInfoStruct", a->__size) : NULL;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptrParameterInfoStruct, 1, type, SOAP_TYPE_ParameterInfoList);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons1__ParameterInfoStruct(soap, "ParameterInfoStruct", -1, &a->__ptrParameterInfoStruct[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *ParameterInfoList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ParameterInfoList(soap, this, tag, type);
}

SOAP_FMAC3 ParameterInfoList * SOAP_FMAC4 soap_get_ParameterInfoList(struct soap *soap, ParameterInfoList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ParameterInfoList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ParameterInfoList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ParameterInfoList(soap, tag, this, type);
}

SOAP_FMAC3 ParameterInfoList * SOAP_FMAC4 soap_in_ParameterInfoList(struct soap *soap, const char *tag, ParameterInfoList *a, const char *type)
{	int i, j;
	ns1__ParameterInfoStruct **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (ParameterInfoList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ParameterInfoList, sizeof(ParameterInfoList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptrParameterInfoStruct = (ns1__ParameterInfoStruct **)soap_malloc(soap, sizeof(ns1__ParameterInfoStruct *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptrParameterInfoStruct[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons1__ParameterInfoStruct(soap, NULL, a->__ptrParameterInfoStruct + i, "ns1:ParameterInfoStruct"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (ns1__ParameterInfoStruct **)soap_push_block(soap, NULL, sizeof(ns1__ParameterInfoStruct *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerTons1__ParameterInfoStruct(soap, NULL, p, "ns1:ParameterInfoStruct"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptrParameterInfoStruct = (ns1__ParameterInfoStruct **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, NULL, (char*)a->__ptrParameterInfoStruct, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ParameterInfoList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ParameterInfoList, 0, sizeof(ParameterInfoList), 0, soap_copy_ParameterInfoList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ParameterInfoList * SOAP_FMAC6 soap_new_ParameterInfoList(struct soap *soap, int n)
{	return soap_instantiate_ParameterInfoList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ParameterInfoList(struct soap *soap, ParameterInfoList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ParameterInfoList * SOAP_FMAC4 soap_instantiate_ParameterInfoList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ParameterInfoList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ParameterInfoList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ParameterInfoList;
		if (size)
			*size = sizeof(ParameterInfoList);
		((ParameterInfoList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ParameterInfoList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ParameterInfoList);
		for (int i = 0; i < n; i++)
			((ParameterInfoList*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ParameterInfoList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ParameterInfoList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ParameterInfoList %p -> %p\n", q, p));
	*(ParameterInfoList*)p = *(ParameterInfoList*)q;
}

void ns1__ParameterInfoStruct::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__ParameterInfoStruct::Name);
	soap_default_bool(soap, &this->ns1__ParameterInfoStruct::Writable);
	/* transient soap skipped */
}

void ns1__ParameterInfoStruct::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns1__ParameterInfoStruct::Name, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns1__ParameterInfoStruct::Name);
	/* transient soap skipped */
}

int ns1__ParameterInfoStruct::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ParameterInfoStruct);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ParameterInfoStruct::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ParameterInfoStruct(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ParameterInfoStruct(struct soap *soap, const char *tag, int id, const ns1__ParameterInfoStruct *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ParameterInfoStruct), type))
		return soap->error;
	if (soap_out_std__string(soap, "Name", -1, &(a->ns1__ParameterInfoStruct::Name), ""))
		return soap->error;
	if (soap_out_bool(soap, "Writable", -1, &(a->ns1__ParameterInfoStruct::Writable), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ParameterInfoStruct::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ParameterInfoStruct(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ParameterInfoStruct * SOAP_FMAC4 soap_get_ns1__ParameterInfoStruct(struct soap *soap, ns1__ParameterInfoStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ParameterInfoStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ParameterInfoStruct::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ParameterInfoStruct(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ParameterInfoStruct * SOAP_FMAC4 soap_in_ns1__ParameterInfoStruct(struct soap *soap, const char *tag, ns1__ParameterInfoStruct *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ParameterInfoStruct *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ParameterInfoStruct, sizeof(ns1__ParameterInfoStruct), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ParameterInfoStruct)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ParameterInfoStruct *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Name1 = 1;
	size_t soap_flag_Writable1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Name", &(a->ns1__ParameterInfoStruct::Name), "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			if (soap_flag_Writable1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "Writable", &(a->ns1__ParameterInfoStruct::Writable), "xsd:boolean"))
				{	soap_flag_Writable1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ParameterInfoStruct *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ParameterInfoStruct, 0, sizeof(ns1__ParameterInfoStruct), 0, soap_copy_ns1__ParameterInfoStruct);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Name1 > 0 || soap_flag_Writable1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ParameterInfoStruct * SOAP_FMAC6 soap_new_ns1__ParameterInfoStruct(struct soap *soap, int n)
{	return soap_instantiate_ns1__ParameterInfoStruct(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ParameterInfoStruct(struct soap *soap, ns1__ParameterInfoStruct *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ParameterInfoStruct * SOAP_FMAC4 soap_instantiate_ns1__ParameterInfoStruct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ParameterInfoStruct(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ParameterInfoStruct, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ParameterInfoStruct;
		if (size)
			*size = sizeof(ns1__ParameterInfoStruct);
		((ns1__ParameterInfoStruct*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ParameterInfoStruct[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ParameterInfoStruct);
		for (int i = 0; i < n; i++)
			((ns1__ParameterInfoStruct*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ParameterInfoStruct*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ParameterInfoStruct(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ParameterInfoStruct %p -> %p\n", q, p));
	*(ns1__ParameterInfoStruct*)p = *(ns1__ParameterInfoStruct*)q;
}

void ParameterValueList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptrParameterValueStruct = NULL;
}

void ParameterValueList::soap_serialize(struct soap *soap) const
{
	if (this->__ptrParameterValueStruct && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptrParameterValueStruct, 1, SOAP_TYPE_ParameterValueList))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerTons1__ParameterValueStruct(soap, this->__ptrParameterValueStruct + i);
		}
}

int ParameterValueList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptrParameterValueStruct, 1, tag, SOAP_TYPE_ParameterValueList);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ParameterValueList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_ParameterValueList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ParameterValueList(struct soap *soap, const char *tag, int id, const ParameterValueList *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptrParameterValueStruct ? soap_putsize(soap, "ns1:ParameterValueStruct", a->__size) : NULL;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptrParameterValueStruct, 1, type, SOAP_TYPE_ParameterValueList);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons1__ParameterValueStruct(soap, "ParameterValueStruct", -1, &a->__ptrParameterValueStruct[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *ParameterValueList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ParameterValueList(soap, this, tag, type);
}

SOAP_FMAC3 ParameterValueList * SOAP_FMAC4 soap_get_ParameterValueList(struct soap *soap, ParameterValueList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ParameterValueList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ParameterValueList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ParameterValueList(soap, tag, this, type);
}

SOAP_FMAC3 ParameterValueList * SOAP_FMAC4 soap_in_ParameterValueList(struct soap *soap, const char *tag, ParameterValueList *a, const char *type)
{	int i, j;
	ns1__ParameterValueStruct **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (ParameterValueList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ParameterValueList, sizeof(ParameterValueList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptrParameterValueStruct = (ns1__ParameterValueStruct **)soap_malloc(soap, sizeof(ns1__ParameterValueStruct *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptrParameterValueStruct[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons1__ParameterValueStruct(soap, NULL, a->__ptrParameterValueStruct + i, "ns1:ParameterValueStruct"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (ns1__ParameterValueStruct **)soap_push_block(soap, NULL, sizeof(ns1__ParameterValueStruct *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerTons1__ParameterValueStruct(soap, NULL, p, "ns1:ParameterValueStruct"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptrParameterValueStruct = (ns1__ParameterValueStruct **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, NULL, (char*)a->__ptrParameterValueStruct, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ParameterValueList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ParameterValueList, 0, sizeof(ParameterValueList), 0, soap_copy_ParameterValueList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ParameterValueList * SOAP_FMAC6 soap_new_ParameterValueList(struct soap *soap, int n)
{	return soap_instantiate_ParameterValueList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ParameterValueList(struct soap *soap, ParameterValueList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ParameterValueList * SOAP_FMAC4 soap_instantiate_ParameterValueList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ParameterValueList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ParameterValueList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ParameterValueList;
		if (size)
			*size = sizeof(ParameterValueList);
		((ParameterValueList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ParameterValueList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ParameterValueList);
		for (int i = 0; i < n; i++)
			((ParameterValueList*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ParameterValueList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ParameterValueList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ParameterValueList %p -> %p\n", q, p));
	*(ParameterValueList*)p = *(ParameterValueList*)q;
}

void ns1__ParameterValueStruct::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__ParameterValueStruct::Name);
	soap_default_xsd__anySimpleType(soap, &this->ns1__ParameterValueStruct::Value);
	/* transient soap skipped */
}

void ns1__ParameterValueStruct::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns1__ParameterValueStruct::Name, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns1__ParameterValueStruct::Name);
	soap_serialize_xsd__anySimpleType(soap, &this->ns1__ParameterValueStruct::Value);
	/* transient soap skipped */
}

int ns1__ParameterValueStruct::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ParameterValueStruct);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ParameterValueStruct::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ParameterValueStruct(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ParameterValueStruct(struct soap *soap, const char *tag, int id, const ns1__ParameterValueStruct *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ParameterValueStruct), type))
		return soap->error;
	if (soap_out_std__string(soap, "Name", -1, &(a->ns1__ParameterValueStruct::Name), ""))
		return soap->error;
	if (soap_out_xsd__anySimpleType(soap, "Value", -1, &(a->ns1__ParameterValueStruct::Value), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ParameterValueStruct::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ParameterValueStruct(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ParameterValueStruct * SOAP_FMAC4 soap_get_ns1__ParameterValueStruct(struct soap *soap, ns1__ParameterValueStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ParameterValueStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ParameterValueStruct::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ParameterValueStruct(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ParameterValueStruct * SOAP_FMAC4 soap_in_ns1__ParameterValueStruct(struct soap *soap, const char *tag, ns1__ParameterValueStruct *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ParameterValueStruct *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ParameterValueStruct, sizeof(ns1__ParameterValueStruct), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ParameterValueStruct)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ParameterValueStruct *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Name1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Name", &(a->ns1__ParameterValueStruct::Name), "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			if (soap_flag_Value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__anySimpleType(soap, "Value", &(a->ns1__ParameterValueStruct::Value), "xsd:anySimpleType"))
				{	soap_flag_Value1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ParameterValueStruct *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ParameterValueStruct, 0, sizeof(ns1__ParameterValueStruct), 0, soap_copy_ns1__ParameterValueStruct);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Name1 > 0 || soap_flag_Value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ParameterValueStruct * SOAP_FMAC6 soap_new_ns1__ParameterValueStruct(struct soap *soap, int n)
{	return soap_instantiate_ns1__ParameterValueStruct(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ParameterValueStruct(struct soap *soap, ns1__ParameterValueStruct *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ParameterValueStruct * SOAP_FMAC4 soap_instantiate_ns1__ParameterValueStruct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ParameterValueStruct(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ParameterValueStruct, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ParameterValueStruct;
		if (size)
			*size = sizeof(ns1__ParameterValueStruct);
		((ns1__ParameterValueStruct*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ParameterValueStruct[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ParameterValueStruct);
		for (int i = 0; i < n; i++)
			((ns1__ParameterValueStruct*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ParameterValueStruct*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ParameterValueStruct(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ParameterValueStruct %p -> %p\n", q, p));
	*(ns1__ParameterValueStruct*)p = *(ns1__ParameterValueStruct*)q;
}

void EventList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptrEventStruct = NULL;
}

void EventList::soap_serialize(struct soap *soap) const
{
	if (this->__ptrEventStruct && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptrEventStruct, 1, SOAP_TYPE_EventList))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerTons1__EventStruct(soap, this->__ptrEventStruct + i);
		}
}

int EventList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptrEventStruct, 1, tag, SOAP_TYPE_EventList);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int EventList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_EventList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_EventList(struct soap *soap, const char *tag, int id, const EventList *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptrEventStruct ? soap_putsize(soap, "ns1:EventStruct", a->__size) : NULL;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptrEventStruct, 1, type, SOAP_TYPE_EventList);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons1__EventStruct(soap, "EventStruct", -1, &a->__ptrEventStruct[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *EventList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_EventList(soap, this, tag, type);
}

SOAP_FMAC3 EventList * SOAP_FMAC4 soap_get_EventList(struct soap *soap, EventList *p, const char *tag, const char *type)
{
	if ((p = soap_in_EventList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *EventList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_EventList(soap, tag, this, type);
}

SOAP_FMAC3 EventList * SOAP_FMAC4 soap_in_EventList(struct soap *soap, const char *tag, EventList *a, const char *type)
{	int i, j;
	ns1__EventStruct **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (EventList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_EventList, sizeof(EventList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptrEventStruct = (ns1__EventStruct **)soap_malloc(soap, sizeof(ns1__EventStruct *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptrEventStruct[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons1__EventStruct(soap, NULL, a->__ptrEventStruct + i, "ns1:EventStruct"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (ns1__EventStruct **)soap_push_block(soap, NULL, sizeof(ns1__EventStruct *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerTons1__EventStruct(soap, NULL, p, "ns1:EventStruct"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptrEventStruct = (ns1__EventStruct **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, NULL, (char*)a->__ptrEventStruct, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (EventList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_EventList, 0, sizeof(EventList), 0, soap_copy_EventList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 EventList * SOAP_FMAC6 soap_new_EventList(struct soap *soap, int n)
{	return soap_instantiate_EventList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_EventList(struct soap *soap, EventList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 EventList * SOAP_FMAC4 soap_instantiate_EventList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_EventList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_EventList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new EventList;
		if (size)
			*size = sizeof(EventList);
		((EventList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new EventList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(EventList);
		for (int i = 0; i < n; i++)
			((EventList*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (EventList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_EventList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying EventList %p -> %p\n", q, p));
	*(EventList*)p = *(EventList*)q;
}

void ns1__EventStruct::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__EventStruct::EventCode);
	soap_default_ns1__CommandKeyType(soap, &this->ns1__EventStruct::CommandKey);
	/* transient soap skipped */
}

void ns1__EventStruct::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns1__EventStruct::EventCode, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns1__EventStruct::EventCode);
	soap_serialize_ns1__CommandKeyType(soap, &this->ns1__EventStruct::CommandKey);
	/* transient soap skipped */
}

int ns1__EventStruct::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__EventStruct);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__EventStruct::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__EventStruct(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EventStruct(struct soap *soap, const char *tag, int id, const ns1__EventStruct *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__EventStruct), type))
		return soap->error;
	if (soap_out_std__string(soap, "EventCode", -1, &(a->ns1__EventStruct::EventCode), ""))
		return soap->error;
	if (soap_out_ns1__CommandKeyType(soap, "CommandKey", -1, &(a->ns1__EventStruct::CommandKey), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__EventStruct::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__EventStruct(soap, this, tag, type);
}

SOAP_FMAC3 ns1__EventStruct * SOAP_FMAC4 soap_get_ns1__EventStruct(struct soap *soap, ns1__EventStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__EventStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__EventStruct::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__EventStruct(soap, tag, this, type);
}

SOAP_FMAC3 ns1__EventStruct * SOAP_FMAC4 soap_in_ns1__EventStruct(struct soap *soap, const char *tag, ns1__EventStruct *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__EventStruct *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__EventStruct, sizeof(ns1__EventStruct), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__EventStruct)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__EventStruct *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_EventCode1 = 1;
	size_t soap_flag_CommandKey1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_EventCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "EventCode", &(a->ns1__EventStruct::EventCode), "xsd:string"))
				{	soap_flag_EventCode1--;
					continue;
				}
			if (soap_flag_CommandKey1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_ns1__CommandKeyType(soap, "CommandKey", &(a->ns1__EventStruct::CommandKey), "ns1:CommandKeyType"))
				{	soap_flag_CommandKey1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__EventStruct *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__EventStruct, 0, sizeof(ns1__EventStruct), 0, soap_copy_ns1__EventStruct);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_EventCode1 > 0 || soap_flag_CommandKey1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__EventStruct * SOAP_FMAC6 soap_new_ns1__EventStruct(struct soap *soap, int n)
{	return soap_instantiate_ns1__EventStruct(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__EventStruct(struct soap *soap, ns1__EventStruct *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__EventStruct * SOAP_FMAC4 soap_instantiate_ns1__EventStruct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__EventStruct(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__EventStruct, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__EventStruct;
		if (size)
			*size = sizeof(ns1__EventStruct);
		((ns1__EventStruct*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__EventStruct[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__EventStruct);
		for (int i = 0; i < n; i++)
			((ns1__EventStruct*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__EventStruct*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__EventStruct(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__EventStruct %p -> %p\n", q, p));
	*(ns1__EventStruct*)p = *(ns1__EventStruct*)q;
}

void ns1__DeviceIdStruct::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__DeviceIdStruct::Manufacturer);
	soap_default_std__string(soap, &this->ns1__DeviceIdStruct::OUI);
	soap_default_std__string(soap, &this->ns1__DeviceIdStruct::ProductClass);
	soap_default_std__string(soap, &this->ns1__DeviceIdStruct::SerialNumber);
	/* transient soap skipped */
}

void ns1__DeviceIdStruct::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns1__DeviceIdStruct::Manufacturer, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns1__DeviceIdStruct::Manufacturer);
	soap_embedded(soap, &this->ns1__DeviceIdStruct::OUI, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns1__DeviceIdStruct::OUI);
	soap_embedded(soap, &this->ns1__DeviceIdStruct::ProductClass, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns1__DeviceIdStruct::ProductClass);
	soap_embedded(soap, &this->ns1__DeviceIdStruct::SerialNumber, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns1__DeviceIdStruct::SerialNumber);
	/* transient soap skipped */
}

int ns1__DeviceIdStruct::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__DeviceIdStruct);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__DeviceIdStruct::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__DeviceIdStruct(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeviceIdStruct(struct soap *soap, const char *tag, int id, const ns1__DeviceIdStruct *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__DeviceIdStruct), type))
		return soap->error;
	if (soap_out_std__string(soap, "Manufacturer", -1, &(a->ns1__DeviceIdStruct::Manufacturer), ""))
		return soap->error;
	if (soap_out_std__string(soap, "OUI", -1, &(a->ns1__DeviceIdStruct::OUI), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ProductClass", -1, &(a->ns1__DeviceIdStruct::ProductClass), ""))
		return soap->error;
	if (soap_out_std__string(soap, "SerialNumber", -1, &(a->ns1__DeviceIdStruct::SerialNumber), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__DeviceIdStruct::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__DeviceIdStruct(soap, this, tag, type);
}

SOAP_FMAC3 ns1__DeviceIdStruct * SOAP_FMAC4 soap_get_ns1__DeviceIdStruct(struct soap *soap, ns1__DeviceIdStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__DeviceIdStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__DeviceIdStruct::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__DeviceIdStruct(soap, tag, this, type);
}

SOAP_FMAC3 ns1__DeviceIdStruct * SOAP_FMAC4 soap_in_ns1__DeviceIdStruct(struct soap *soap, const char *tag, ns1__DeviceIdStruct *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__DeviceIdStruct *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__DeviceIdStruct, sizeof(ns1__DeviceIdStruct), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__DeviceIdStruct)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__DeviceIdStruct *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Manufacturer1 = 1;
	size_t soap_flag_OUI1 = 1;
	size_t soap_flag_ProductClass1 = 1;
	size_t soap_flag_SerialNumber1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Manufacturer1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Manufacturer", &(a->ns1__DeviceIdStruct::Manufacturer), "xsd:string"))
				{	soap_flag_Manufacturer1--;
					continue;
				}
			if (soap_flag_OUI1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OUI", &(a->ns1__DeviceIdStruct::OUI), "xsd:string"))
				{	soap_flag_OUI1--;
					continue;
				}
			if (soap_flag_ProductClass1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ProductClass", &(a->ns1__DeviceIdStruct::ProductClass), "xsd:string"))
				{	soap_flag_ProductClass1--;
					continue;
				}
			if (soap_flag_SerialNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "SerialNumber", &(a->ns1__DeviceIdStruct::SerialNumber), "xsd:string"))
				{	soap_flag_SerialNumber1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__DeviceIdStruct *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__DeviceIdStruct, 0, sizeof(ns1__DeviceIdStruct), 0, soap_copy_ns1__DeviceIdStruct);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Manufacturer1 > 0 || soap_flag_OUI1 > 0 || soap_flag_ProductClass1 > 0 || soap_flag_SerialNumber1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__DeviceIdStruct * SOAP_FMAC6 soap_new_ns1__DeviceIdStruct(struct soap *soap, int n)
{	return soap_instantiate_ns1__DeviceIdStruct(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__DeviceIdStruct(struct soap *soap, ns1__DeviceIdStruct *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__DeviceIdStruct * SOAP_FMAC4 soap_instantiate_ns1__DeviceIdStruct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__DeviceIdStruct(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__DeviceIdStruct, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__DeviceIdStruct;
		if (size)
			*size = sizeof(ns1__DeviceIdStruct);
		((ns1__DeviceIdStruct*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__DeviceIdStruct[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__DeviceIdStruct);
		for (int i = 0; i < n; i++)
			((ns1__DeviceIdStruct*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__DeviceIdStruct*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__DeviceIdStruct(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__DeviceIdStruct %p -> %p\n", q, p));
	*(ns1__DeviceIdStruct*)p = *(ns1__DeviceIdStruct*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__anySimpleType(struct soap *soap, std::string *a)
{	soap_default_std__string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anySimpleType(struct soap *soap, std::string const*a)
{	soap_serialize_std__string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anySimpleType(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__anySimpleType);
	if (soap_out_xsd__anySimpleType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anySimpleType(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__anySimpleType), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anySimpleType(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anySimpleType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__anySimpleType(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anySimpleType, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anySimpleType, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__anySimpleType, 0, sizeof(std::string), 0, soap_copy_xsd__anySimpleType);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_xsd__anySimpleType(struct soap *soap, int n)
{	return soap_instantiate_xsd__anySimpleType(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__anySimpleType(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_xsd__anySimpleType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anySimpleType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anySimpleType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anySimpleType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetParameterAttributes(struct soap *soap, struct __ns1__GetParameterAttributes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetParameterAttributes = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetParameterAttributes(struct soap *soap, const struct __ns1__GetParameterAttributes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetParameterAttributes(soap, &a->ns1__GetParameterAttributes);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetParameterAttributes(struct soap *soap, const struct __ns1__GetParameterAttributes *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetParameterAttributes(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetParameterAttributes(struct soap *soap, const char *tag, int id, const struct __ns1__GetParameterAttributes *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetParameterAttributes(soap, "ns1:GetParameterAttributes", -1, &a->ns1__GetParameterAttributes, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetParameterAttributes * SOAP_FMAC4 soap_get___ns1__GetParameterAttributes(struct soap *soap, struct __ns1__GetParameterAttributes *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetParameterAttributes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns1__GetParameterAttributes * SOAP_FMAC4 soap_in___ns1__GetParameterAttributes(struct soap *soap, const char *tag, struct __ns1__GetParameterAttributes *a, const char *type)
{
	size_t soap_flag_ns1__GetParameterAttributes = 1;
	short soap_flag;
	a = (struct __ns1__GetParameterAttributes *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetParameterAttributes, sizeof(struct __ns1__GetParameterAttributes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetParameterAttributes(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetParameterAttributes && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetParameterAttributes(soap, "ns1:GetParameterAttributes", &a->ns1__GetParameterAttributes, ""))
				{	soap_flag_ns1__GetParameterAttributes--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__GetParameterAttributes * SOAP_FMAC6 soap_new___ns1__GetParameterAttributes(struct soap *soap, int n)
{	return soap_instantiate___ns1__GetParameterAttributes(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__GetParameterAttributes(struct soap *soap, struct __ns1__GetParameterAttributes *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__GetParameterAttributes * SOAP_FMAC4 soap_instantiate___ns1__GetParameterAttributes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetParameterAttributes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetParameterAttributes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__GetParameterAttributes;
		if (size)
			*size = sizeof(struct __ns1__GetParameterAttributes);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__GetParameterAttributes[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GetParameterAttributes);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GetParameterAttributes*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetParameterAttributes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetParameterAttributes %p -> %p\n", q, p));
	*(struct __ns1__GetParameterAttributes*)p = *(struct __ns1__GetParameterAttributes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetParameterAttributes(struct soap *soap, struct __ns1__SetParameterAttributes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetParameterAttributes = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetParameterAttributes(struct soap *soap, const struct __ns1__SetParameterAttributes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetParameterAttributes(soap, &a->ns1__SetParameterAttributes);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetParameterAttributes(struct soap *soap, const struct __ns1__SetParameterAttributes *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetParameterAttributes(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetParameterAttributes(struct soap *soap, const char *tag, int id, const struct __ns1__SetParameterAttributes *a, const char *type)
{
	if (soap_out_PointerTo_ns1__SetParameterAttributes(soap, "ns1:SetParameterAttributes", -1, &a->ns1__SetParameterAttributes, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetParameterAttributes * SOAP_FMAC4 soap_get___ns1__SetParameterAttributes(struct soap *soap, struct __ns1__SetParameterAttributes *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetParameterAttributes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns1__SetParameterAttributes * SOAP_FMAC4 soap_in___ns1__SetParameterAttributes(struct soap *soap, const char *tag, struct __ns1__SetParameterAttributes *a, const char *type)
{
	size_t soap_flag_ns1__SetParameterAttributes = 1;
	short soap_flag;
	a = (struct __ns1__SetParameterAttributes *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetParameterAttributes, sizeof(struct __ns1__SetParameterAttributes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetParameterAttributes(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetParameterAttributes && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetParameterAttributes(soap, "ns1:SetParameterAttributes", &a->ns1__SetParameterAttributes, ""))
				{	soap_flag_ns1__SetParameterAttributes--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__SetParameterAttributes * SOAP_FMAC6 soap_new___ns1__SetParameterAttributes(struct soap *soap, int n)
{	return soap_instantiate___ns1__SetParameterAttributes(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__SetParameterAttributes(struct soap *soap, struct __ns1__SetParameterAttributes *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__SetParameterAttributes * SOAP_FMAC4 soap_instantiate___ns1__SetParameterAttributes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetParameterAttributes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetParameterAttributes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__SetParameterAttributes;
		if (size)
			*size = sizeof(struct __ns1__SetParameterAttributes);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__SetParameterAttributes[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__SetParameterAttributes);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__SetParameterAttributes*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetParameterAttributes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetParameterAttributes %p -> %p\n", q, p));
	*(struct __ns1__SetParameterAttributes*)p = *(struct __ns1__SetParameterAttributes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetParameterValues(struct soap *soap, struct __ns1__GetParameterValues *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetParameterValues = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetParameterValues(struct soap *soap, const struct __ns1__GetParameterValues *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetParameterValues(soap, &a->ns1__GetParameterValues);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetParameterValues(struct soap *soap, const struct __ns1__GetParameterValues *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetParameterValues(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetParameterValues(struct soap *soap, const char *tag, int id, const struct __ns1__GetParameterValues *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetParameterValues(soap, "ns1:GetParameterValues", -1, &a->ns1__GetParameterValues, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetParameterValues * SOAP_FMAC4 soap_get___ns1__GetParameterValues(struct soap *soap, struct __ns1__GetParameterValues *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetParameterValues(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns1__GetParameterValues * SOAP_FMAC4 soap_in___ns1__GetParameterValues(struct soap *soap, const char *tag, struct __ns1__GetParameterValues *a, const char *type)
{
	size_t soap_flag_ns1__GetParameterValues = 1;
	short soap_flag;
	a = (struct __ns1__GetParameterValues *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetParameterValues, sizeof(struct __ns1__GetParameterValues), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetParameterValues(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetParameterValues && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetParameterValues(soap, "ns1:GetParameterValues", &a->ns1__GetParameterValues, ""))
				{	soap_flag_ns1__GetParameterValues--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__GetParameterValues * SOAP_FMAC6 soap_new___ns1__GetParameterValues(struct soap *soap, int n)
{	return soap_instantiate___ns1__GetParameterValues(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__GetParameterValues(struct soap *soap, struct __ns1__GetParameterValues *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__GetParameterValues * SOAP_FMAC4 soap_instantiate___ns1__GetParameterValues(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetParameterValues(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetParameterValues, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__GetParameterValues;
		if (size)
			*size = sizeof(struct __ns1__GetParameterValues);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__GetParameterValues[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GetParameterValues);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GetParameterValues*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetParameterValues(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetParameterValues %p -> %p\n", q, p));
	*(struct __ns1__GetParameterValues*)p = *(struct __ns1__GetParameterValues*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetParameterValues(struct soap *soap, struct __ns1__SetParameterValues *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetParameterValues = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetParameterValues(struct soap *soap, const struct __ns1__SetParameterValues *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetParameterValues(soap, &a->ns1__SetParameterValues);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetParameterValues(struct soap *soap, const struct __ns1__SetParameterValues *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetParameterValues(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetParameterValues(struct soap *soap, const char *tag, int id, const struct __ns1__SetParameterValues *a, const char *type)
{
	if (soap_out_PointerTo_ns1__SetParameterValues(soap, "ns1:SetParameterValues", -1, &a->ns1__SetParameterValues, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetParameterValues * SOAP_FMAC4 soap_get___ns1__SetParameterValues(struct soap *soap, struct __ns1__SetParameterValues *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetParameterValues(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns1__SetParameterValues * SOAP_FMAC4 soap_in___ns1__SetParameterValues(struct soap *soap, const char *tag, struct __ns1__SetParameterValues *a, const char *type)
{
	size_t soap_flag_ns1__SetParameterValues = 1;
	short soap_flag;
	a = (struct __ns1__SetParameterValues *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetParameterValues, sizeof(struct __ns1__SetParameterValues), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetParameterValues(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetParameterValues && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetParameterValues(soap, "ns1:SetParameterValues", &a->ns1__SetParameterValues, ""))
				{	soap_flag_ns1__SetParameterValues--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__SetParameterValues * SOAP_FMAC6 soap_new___ns1__SetParameterValues(struct soap *soap, int n)
{	return soap_instantiate___ns1__SetParameterValues(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__SetParameterValues(struct soap *soap, struct __ns1__SetParameterValues *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__SetParameterValues * SOAP_FMAC4 soap_instantiate___ns1__SetParameterValues(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetParameterValues(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetParameterValues, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__SetParameterValues;
		if (size)
			*size = sizeof(struct __ns1__SetParameterValues);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__SetParameterValues[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__SetParameterValues);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__SetParameterValues*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetParameterValues(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetParameterValues %p -> %p\n", q, p));
	*(struct __ns1__SetParameterValues*)p = *(struct __ns1__SetParameterValues*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetParameterAttributesResponse(struct soap *soap, _ns1__GetParameterAttributesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetParameterAttributesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetParameterAttributesResponse(struct soap *soap, _ns1__GetParameterAttributesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetParameterAttributesResponse);
	if (soap_out_PointerTo_ns1__GetParameterAttributesResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetParameterAttributesResponse(struct soap *soap, const char *tag, int id, _ns1__GetParameterAttributesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetParameterAttributesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetParameterAttributesResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetParameterAttributesResponse(struct soap *soap, _ns1__GetParameterAttributesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetParameterAttributesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetParameterAttributesResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetParameterAttributesResponse(struct soap *soap, const char *tag, _ns1__GetParameterAttributesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetParameterAttributesResponse **)soap_malloc(soap, sizeof(_ns1__GetParameterAttributesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetParameterAttributesResponse *)soap_instantiate__ns1__GetParameterAttributesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetParameterAttributesResponse ** p = (_ns1__GetParameterAttributesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetParameterAttributesResponse, sizeof(_ns1__GetParameterAttributesResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetParameterAttributes(struct soap *soap, _ns1__GetParameterAttributes *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetParameterAttributes))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetParameterAttributes(struct soap *soap, _ns1__GetParameterAttributes *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetParameterAttributes);
	if (soap_out_PointerTo_ns1__GetParameterAttributes(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetParameterAttributes(struct soap *soap, const char *tag, int id, _ns1__GetParameterAttributes *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetParameterAttributes);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetParameterAttributes ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetParameterAttributes(struct soap *soap, _ns1__GetParameterAttributes **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetParameterAttributes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetParameterAttributes ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetParameterAttributes(struct soap *soap, const char *tag, _ns1__GetParameterAttributes **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetParameterAttributes **)soap_malloc(soap, sizeof(_ns1__GetParameterAttributes *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetParameterAttributes *)soap_instantiate__ns1__GetParameterAttributes(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetParameterAttributes ** p = (_ns1__GetParameterAttributes **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetParameterAttributes, sizeof(_ns1__GetParameterAttributes), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetParameterAttributesResponse(struct soap *soap, _ns1__SetParameterAttributesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetParameterAttributesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetParameterAttributesResponse(struct soap *soap, _ns1__SetParameterAttributesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetParameterAttributesResponse);
	if (soap_out_PointerTo_ns1__SetParameterAttributesResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetParameterAttributesResponse(struct soap *soap, const char *tag, int id, _ns1__SetParameterAttributesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetParameterAttributesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetParameterAttributesResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetParameterAttributesResponse(struct soap *soap, _ns1__SetParameterAttributesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetParameterAttributesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__SetParameterAttributesResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetParameterAttributesResponse(struct soap *soap, const char *tag, _ns1__SetParameterAttributesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetParameterAttributesResponse **)soap_malloc(soap, sizeof(_ns1__SetParameterAttributesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetParameterAttributesResponse *)soap_instantiate__ns1__SetParameterAttributesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetParameterAttributesResponse ** p = (_ns1__SetParameterAttributesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetParameterAttributesResponse, sizeof(_ns1__SetParameterAttributesResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetParameterAttributes(struct soap *soap, _ns1__SetParameterAttributes *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetParameterAttributes))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetParameterAttributes(struct soap *soap, _ns1__SetParameterAttributes *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetParameterAttributes);
	if (soap_out_PointerTo_ns1__SetParameterAttributes(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetParameterAttributes(struct soap *soap, const char *tag, int id, _ns1__SetParameterAttributes *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetParameterAttributes);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetParameterAttributes ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetParameterAttributes(struct soap *soap, _ns1__SetParameterAttributes **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetParameterAttributes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__SetParameterAttributes ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetParameterAttributes(struct soap *soap, const char *tag, _ns1__SetParameterAttributes **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetParameterAttributes **)soap_malloc(soap, sizeof(_ns1__SetParameterAttributes *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetParameterAttributes *)soap_instantiate__ns1__SetParameterAttributes(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetParameterAttributes ** p = (_ns1__SetParameterAttributes **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetParameterAttributes, sizeof(_ns1__SetParameterAttributes), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetParameterValuesResponse(struct soap *soap, _ns1__GetParameterValuesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetParameterValuesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetParameterValuesResponse(struct soap *soap, _ns1__GetParameterValuesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetParameterValuesResponse);
	if (soap_out_PointerTo_ns1__GetParameterValuesResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetParameterValuesResponse(struct soap *soap, const char *tag, int id, _ns1__GetParameterValuesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetParameterValuesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetParameterValuesResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetParameterValuesResponse(struct soap *soap, _ns1__GetParameterValuesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetParameterValuesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetParameterValuesResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetParameterValuesResponse(struct soap *soap, const char *tag, _ns1__GetParameterValuesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetParameterValuesResponse **)soap_malloc(soap, sizeof(_ns1__GetParameterValuesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetParameterValuesResponse *)soap_instantiate__ns1__GetParameterValuesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetParameterValuesResponse ** p = (_ns1__GetParameterValuesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetParameterValuesResponse, sizeof(_ns1__GetParameterValuesResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetParameterValues(struct soap *soap, _ns1__GetParameterValues *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetParameterValues))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetParameterValues(struct soap *soap, _ns1__GetParameterValues *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetParameterValues);
	if (soap_out_PointerTo_ns1__GetParameterValues(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetParameterValues(struct soap *soap, const char *tag, int id, _ns1__GetParameterValues *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetParameterValues);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetParameterValues ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetParameterValues(struct soap *soap, _ns1__GetParameterValues **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetParameterValues(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetParameterValues ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetParameterValues(struct soap *soap, const char *tag, _ns1__GetParameterValues **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetParameterValues **)soap_malloc(soap, sizeof(_ns1__GetParameterValues *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetParameterValues *)soap_instantiate__ns1__GetParameterValues(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetParameterValues ** p = (_ns1__GetParameterValues **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetParameterValues, sizeof(_ns1__GetParameterValues), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetParameterValuesResponse(struct soap *soap, _ns1__SetParameterValuesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetParameterValuesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetParameterValuesResponse(struct soap *soap, _ns1__SetParameterValuesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetParameterValuesResponse);
	if (soap_out_PointerTo_ns1__SetParameterValuesResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetParameterValuesResponse(struct soap *soap, const char *tag, int id, _ns1__SetParameterValuesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetParameterValuesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetParameterValuesResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetParameterValuesResponse(struct soap *soap, _ns1__SetParameterValuesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetParameterValuesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__SetParameterValuesResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetParameterValuesResponse(struct soap *soap, const char *tag, _ns1__SetParameterValuesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetParameterValuesResponse **)soap_malloc(soap, sizeof(_ns1__SetParameterValuesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetParameterValuesResponse *)soap_instantiate__ns1__SetParameterValuesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetParameterValuesResponse ** p = (_ns1__SetParameterValuesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetParameterValuesResponse, sizeof(_ns1__SetParameterValuesResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetParameterValues(struct soap *soap, _ns1__SetParameterValues *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetParameterValues))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetParameterValues(struct soap *soap, _ns1__SetParameterValues *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetParameterValues);
	if (soap_out_PointerTo_ns1__SetParameterValues(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetParameterValues(struct soap *soap, const char *tag, int id, _ns1__SetParameterValues *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetParameterValues);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetParameterValues ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetParameterValues(struct soap *soap, _ns1__SetParameterValues **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetParameterValues(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__SetParameterValues ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetParameterValues(struct soap *soap, const char *tag, _ns1__SetParameterValues **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetParameterValues **)soap_malloc(soap, sizeof(_ns1__SetParameterValues *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetParameterValues *)soap_instantiate__ns1__SetParameterValues(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetParameterValues ** p = (_ns1__SetParameterValues **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetParameterValues, sizeof(_ns1__SetParameterValues), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__ParameterAttributeStruct(struct soap *soap, ns1__ParameterAttributeStruct **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__ParameterAttributeStruct))
		soap_serialize_PointerTons1__ParameterAttributeStruct(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__ParameterAttributeStruct(struct soap *soap, ns1__ParameterAttributeStruct **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__ParameterAttributeStruct);
	if (soap_out_PointerToPointerTons1__ParameterAttributeStruct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__ParameterAttributeStruct(struct soap *soap, const char *tag, int id, ns1__ParameterAttributeStruct **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__ParameterAttributeStruct);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__ParameterAttributeStruct(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__ParameterAttributeStruct *** SOAP_FMAC4 soap_get_PointerToPointerTons1__ParameterAttributeStruct(struct soap *soap, ns1__ParameterAttributeStruct ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__ParameterAttributeStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ParameterAttributeStruct *** SOAP_FMAC4 soap_in_PointerToPointerTons1__ParameterAttributeStruct(struct soap *soap, const char *tag, ns1__ParameterAttributeStruct ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ParameterAttributeStruct ***)soap_malloc(soap, sizeof(ns1__ParameterAttributeStruct **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__ParameterAttributeStruct(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__ParameterAttributeStruct ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__ParameterAttributeStruct, sizeof(ns1__ParameterAttributeStruct *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ParameterAttributeStruct(struct soap *soap, ns1__ParameterAttributeStruct *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ParameterAttributeStruct))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ParameterAttributeStruct(struct soap *soap, ns1__ParameterAttributeStruct *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ParameterAttributeStruct);
	if (soap_out_PointerTons1__ParameterAttributeStruct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ParameterAttributeStruct(struct soap *soap, const char *tag, int id, ns1__ParameterAttributeStruct *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ParameterAttributeStruct);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ParameterAttributeStruct ** SOAP_FMAC4 soap_get_PointerTons1__ParameterAttributeStruct(struct soap *soap, ns1__ParameterAttributeStruct **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ParameterAttributeStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ParameterAttributeStruct ** SOAP_FMAC4 soap_in_PointerTons1__ParameterAttributeStruct(struct soap *soap, const char *tag, ns1__ParameterAttributeStruct **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ParameterAttributeStruct **)soap_malloc(soap, sizeof(ns1__ParameterAttributeStruct *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ParameterAttributeStruct *)soap_instantiate_ns1__ParameterAttributeStruct(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ParameterAttributeStruct ** p = (ns1__ParameterAttributeStruct **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ParameterAttributeStruct, sizeof(ns1__ParameterAttributeStruct), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__SetParameterAttributesStruct(struct soap *soap, ns1__SetParameterAttributesStruct **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__SetParameterAttributesStruct))
		soap_serialize_PointerTons1__SetParameterAttributesStruct(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__SetParameterAttributesStruct(struct soap *soap, ns1__SetParameterAttributesStruct **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__SetParameterAttributesStruct);
	if (soap_out_PointerToPointerTons1__SetParameterAttributesStruct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__SetParameterAttributesStruct(struct soap *soap, const char *tag, int id, ns1__SetParameterAttributesStruct **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__SetParameterAttributesStruct);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__SetParameterAttributesStruct(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__SetParameterAttributesStruct *** SOAP_FMAC4 soap_get_PointerToPointerTons1__SetParameterAttributesStruct(struct soap *soap, ns1__SetParameterAttributesStruct ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__SetParameterAttributesStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__SetParameterAttributesStruct *** SOAP_FMAC4 soap_in_PointerToPointerTons1__SetParameterAttributesStruct(struct soap *soap, const char *tag, ns1__SetParameterAttributesStruct ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__SetParameterAttributesStruct ***)soap_malloc(soap, sizeof(ns1__SetParameterAttributesStruct **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__SetParameterAttributesStruct(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__SetParameterAttributesStruct ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__SetParameterAttributesStruct, sizeof(ns1__SetParameterAttributesStruct *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SetParameterAttributesStruct(struct soap *soap, ns1__SetParameterAttributesStruct *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__SetParameterAttributesStruct))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SetParameterAttributesStruct(struct soap *soap, ns1__SetParameterAttributesStruct *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__SetParameterAttributesStruct);
	if (soap_out_PointerTons1__SetParameterAttributesStruct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SetParameterAttributesStruct(struct soap *soap, const char *tag, int id, ns1__SetParameterAttributesStruct *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__SetParameterAttributesStruct);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__SetParameterAttributesStruct ** SOAP_FMAC4 soap_get_PointerTons1__SetParameterAttributesStruct(struct soap *soap, ns1__SetParameterAttributesStruct **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__SetParameterAttributesStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__SetParameterAttributesStruct ** SOAP_FMAC4 soap_in_PointerTons1__SetParameterAttributesStruct(struct soap *soap, const char *tag, ns1__SetParameterAttributesStruct **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__SetParameterAttributesStruct **)soap_malloc(soap, sizeof(ns1__SetParameterAttributesStruct *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__SetParameterAttributesStruct *)soap_instantiate_ns1__SetParameterAttributesStruct(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__SetParameterAttributesStruct ** p = (ns1__SetParameterAttributesStruct **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__SetParameterAttributesStruct, sizeof(ns1__SetParameterAttributesStruct), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__ParameterInfoStruct(struct soap *soap, ns1__ParameterInfoStruct **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__ParameterInfoStruct))
		soap_serialize_PointerTons1__ParameterInfoStruct(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__ParameterInfoStruct(struct soap *soap, ns1__ParameterInfoStruct **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__ParameterInfoStruct);
	if (soap_out_PointerToPointerTons1__ParameterInfoStruct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__ParameterInfoStruct(struct soap *soap, const char *tag, int id, ns1__ParameterInfoStruct **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__ParameterInfoStruct);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__ParameterInfoStruct(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__ParameterInfoStruct *** SOAP_FMAC4 soap_get_PointerToPointerTons1__ParameterInfoStruct(struct soap *soap, ns1__ParameterInfoStruct ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__ParameterInfoStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ParameterInfoStruct *** SOAP_FMAC4 soap_in_PointerToPointerTons1__ParameterInfoStruct(struct soap *soap, const char *tag, ns1__ParameterInfoStruct ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ParameterInfoStruct ***)soap_malloc(soap, sizeof(ns1__ParameterInfoStruct **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__ParameterInfoStruct(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__ParameterInfoStruct ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__ParameterInfoStruct, sizeof(ns1__ParameterInfoStruct *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ParameterInfoStruct(struct soap *soap, ns1__ParameterInfoStruct *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ParameterInfoStruct))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ParameterInfoStruct(struct soap *soap, ns1__ParameterInfoStruct *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ParameterInfoStruct);
	if (soap_out_PointerTons1__ParameterInfoStruct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ParameterInfoStruct(struct soap *soap, const char *tag, int id, ns1__ParameterInfoStruct *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ParameterInfoStruct);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ParameterInfoStruct ** SOAP_FMAC4 soap_get_PointerTons1__ParameterInfoStruct(struct soap *soap, ns1__ParameterInfoStruct **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ParameterInfoStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ParameterInfoStruct ** SOAP_FMAC4 soap_in_PointerTons1__ParameterInfoStruct(struct soap *soap, const char *tag, ns1__ParameterInfoStruct **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ParameterInfoStruct **)soap_malloc(soap, sizeof(ns1__ParameterInfoStruct *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ParameterInfoStruct *)soap_instantiate_ns1__ParameterInfoStruct(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ParameterInfoStruct ** p = (ns1__ParameterInfoStruct **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ParameterInfoStruct, sizeof(ns1__ParameterInfoStruct), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__ParameterValueStruct(struct soap *soap, ns1__ParameterValueStruct **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__ParameterValueStruct))
		soap_serialize_PointerTons1__ParameterValueStruct(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__ParameterValueStruct(struct soap *soap, ns1__ParameterValueStruct **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__ParameterValueStruct);
	if (soap_out_PointerToPointerTons1__ParameterValueStruct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__ParameterValueStruct(struct soap *soap, const char *tag, int id, ns1__ParameterValueStruct **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__ParameterValueStruct);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__ParameterValueStruct(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__ParameterValueStruct *** SOAP_FMAC4 soap_get_PointerToPointerTons1__ParameterValueStruct(struct soap *soap, ns1__ParameterValueStruct ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__ParameterValueStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ParameterValueStruct *** SOAP_FMAC4 soap_in_PointerToPointerTons1__ParameterValueStruct(struct soap *soap, const char *tag, ns1__ParameterValueStruct ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ParameterValueStruct ***)soap_malloc(soap, sizeof(ns1__ParameterValueStruct **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__ParameterValueStruct(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__ParameterValueStruct ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__ParameterValueStruct, sizeof(ns1__ParameterValueStruct *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ParameterValueStruct(struct soap *soap, ns1__ParameterValueStruct *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ParameterValueStruct))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ParameterValueStruct(struct soap *soap, ns1__ParameterValueStruct *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ParameterValueStruct);
	if (soap_out_PointerTons1__ParameterValueStruct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ParameterValueStruct(struct soap *soap, const char *tag, int id, ns1__ParameterValueStruct *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ParameterValueStruct);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ParameterValueStruct ** SOAP_FMAC4 soap_get_PointerTons1__ParameterValueStruct(struct soap *soap, ns1__ParameterValueStruct **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ParameterValueStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ParameterValueStruct ** SOAP_FMAC4 soap_in_PointerTons1__ParameterValueStruct(struct soap *soap, const char *tag, ns1__ParameterValueStruct **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ParameterValueStruct **)soap_malloc(soap, sizeof(ns1__ParameterValueStruct *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ParameterValueStruct *)soap_instantiate_ns1__ParameterValueStruct(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ParameterValueStruct ** p = (ns1__ParameterValueStruct **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ParameterValueStruct, sizeof(ns1__ParameterValueStruct), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__EventStruct(struct soap *soap, ns1__EventStruct **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__EventStruct))
		soap_serialize_PointerTons1__EventStruct(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__EventStruct(struct soap *soap, ns1__EventStruct **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__EventStruct);
	if (soap_out_PointerToPointerTons1__EventStruct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__EventStruct(struct soap *soap, const char *tag, int id, ns1__EventStruct **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__EventStruct);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__EventStruct(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__EventStruct *** SOAP_FMAC4 soap_get_PointerToPointerTons1__EventStruct(struct soap *soap, ns1__EventStruct ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__EventStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__EventStruct *** SOAP_FMAC4 soap_in_PointerToPointerTons1__EventStruct(struct soap *soap, const char *tag, ns1__EventStruct ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__EventStruct ***)soap_malloc(soap, sizeof(ns1__EventStruct **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__EventStruct(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__EventStruct ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__EventStruct, sizeof(ns1__EventStruct *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EventStruct(struct soap *soap, ns1__EventStruct *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__EventStruct))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EventStruct(struct soap *soap, ns1__EventStruct *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__EventStruct);
	if (soap_out_PointerTons1__EventStruct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EventStruct(struct soap *soap, const char *tag, int id, ns1__EventStruct *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__EventStruct);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__EventStruct ** SOAP_FMAC4 soap_get_PointerTons1__EventStruct(struct soap *soap, ns1__EventStruct **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__EventStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__EventStruct ** SOAP_FMAC4 soap_in_PointerTons1__EventStruct(struct soap *soap, const char *tag, ns1__EventStruct **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__EventStruct **)soap_malloc(soap, sizeof(ns1__EventStruct *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__EventStruct *)soap_instantiate_ns1__EventStruct(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__EventStruct ** p = (ns1__EventStruct **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__EventStruct, sizeof(ns1__EventStruct), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToParameterAttributeList(struct soap *soap, ParameterAttributeList *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToParameterAttributeList(struct soap *soap, ParameterAttributeList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToParameterAttributeList);
	if (soap_out_PointerToParameterAttributeList(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToParameterAttributeList(struct soap *soap, const char *tag, int id, ParameterAttributeList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptrParameterAttributeStruct, 1, type, SOAP_TYPE_ParameterAttributeList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ParameterAttributeList ** SOAP_FMAC4 soap_get_PointerToParameterAttributeList(struct soap *soap, ParameterAttributeList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToParameterAttributeList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ParameterAttributeList ** SOAP_FMAC4 soap_in_PointerToParameterAttributeList(struct soap *soap, const char *tag, ParameterAttributeList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ParameterAttributeList **)soap_malloc(soap, sizeof(ParameterAttributeList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ParameterAttributeList *)soap_instantiate_ParameterAttributeList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ParameterAttributeList ** p = (ParameterAttributeList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ParameterAttributeList, sizeof(ParameterAttributeList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSetParameterAttributesList(struct soap *soap, SetParameterAttributesList *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSetParameterAttributesList(struct soap *soap, SetParameterAttributesList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSetParameterAttributesList);
	if (soap_out_PointerToSetParameterAttributesList(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSetParameterAttributesList(struct soap *soap, const char *tag, int id, SetParameterAttributesList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptrSetParameterAttributesStruct, 1, type, SOAP_TYPE_SetParameterAttributesList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SetParameterAttributesList ** SOAP_FMAC4 soap_get_PointerToSetParameterAttributesList(struct soap *soap, SetParameterAttributesList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSetParameterAttributesList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 SetParameterAttributesList ** SOAP_FMAC4 soap_in_PointerToSetParameterAttributesList(struct soap *soap, const char *tag, SetParameterAttributesList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SetParameterAttributesList **)soap_malloc(soap, sizeof(SetParameterAttributesList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SetParameterAttributesList *)soap_instantiate_SetParameterAttributesList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	SetParameterAttributesList ** p = (SetParameterAttributesList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SetParameterAttributesList, sizeof(SetParameterAttributesList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToParameterNames(struct soap *soap, ParameterNames *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToParameterNames(struct soap *soap, ParameterNames *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToParameterNames);
	if (soap_out_PointerToParameterNames(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToParameterNames(struct soap *soap, const char *tag, int id, ParameterNames *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptrstring, 1, type, SOAP_TYPE_ParameterNames);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ParameterNames ** SOAP_FMAC4 soap_get_PointerToParameterNames(struct soap *soap, ParameterNames **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToParameterNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ParameterNames ** SOAP_FMAC4 soap_in_PointerToParameterNames(struct soap *soap, const char *tag, ParameterNames **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ParameterNames **)soap_malloc(soap, sizeof(ParameterNames *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ParameterNames *)soap_instantiate_ParameterNames(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ParameterNames ** p = (ParameterNames **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ParameterNames, sizeof(ParameterNames), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToParameterValueList(struct soap *soap, ParameterValueList *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToParameterValueList(struct soap *soap, ParameterValueList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToParameterValueList);
	if (soap_out_PointerToParameterValueList(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToParameterValueList(struct soap *soap, const char *tag, int id, ParameterValueList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptrParameterValueStruct, 1, type, SOAP_TYPE_ParameterValueList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ParameterValueList ** SOAP_FMAC4 soap_get_PointerToParameterValueList(struct soap *soap, ParameterValueList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToParameterValueList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ParameterValueList ** SOAP_FMAC4 soap_in_PointerToParameterValueList(struct soap *soap, const char *tag, ParameterValueList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ParameterValueList **)soap_malloc(soap, sizeof(ParameterValueList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ParameterValueList *)soap_instantiate_ParameterValueList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ParameterValueList ** p = (ParameterValueList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ParameterValueList, sizeof(ParameterValueList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DeviceIdStruct(struct soap *soap, ns1__DeviceIdStruct *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__DeviceIdStruct))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DeviceIdStruct(struct soap *soap, ns1__DeviceIdStruct *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__DeviceIdStruct);
	if (soap_out_PointerTons1__DeviceIdStruct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DeviceIdStruct(struct soap *soap, const char *tag, int id, ns1__DeviceIdStruct *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__DeviceIdStruct);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__DeviceIdStruct ** SOAP_FMAC4 soap_get_PointerTons1__DeviceIdStruct(struct soap *soap, ns1__DeviceIdStruct **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__DeviceIdStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__DeviceIdStruct ** SOAP_FMAC4 soap_in_PointerTons1__DeviceIdStruct(struct soap *soap, const char *tag, ns1__DeviceIdStruct **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__DeviceIdStruct **)soap_malloc(soap, sizeof(ns1__DeviceIdStruct *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__DeviceIdStruct *)soap_instantiate_ns1__DeviceIdStruct(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__DeviceIdStruct ** p = (ns1__DeviceIdStruct **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__DeviceIdStruct, sizeof(ns1__DeviceIdStruct), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToAccessList(struct soap *soap, AccessList *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToAccessList(struct soap *soap, AccessList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToAccessList);
	if (soap_out_PointerToAccessList(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToAccessList(struct soap *soap, const char *tag, int id, AccessList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptrstring, 1, type, SOAP_TYPE_AccessList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 AccessList ** SOAP_FMAC4 soap_get_PointerToAccessList(struct soap *soap, AccessList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToAccessList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 AccessList ** SOAP_FMAC4 soap_in_PointerToAccessList(struct soap *soap, const char *tag, AccessList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (AccessList **)soap_malloc(soap, sizeof(AccessList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (AccessList *)soap_instantiate_AccessList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	AccessList ** p = (AccessList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_AccessList, sizeof(AccessList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

/* End of soapC.cpp */
