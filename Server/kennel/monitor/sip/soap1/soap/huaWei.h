// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* D:\program\huaWei\soap1\soap\huaWei.h
   Generated by wsdl2h 1.2.12 from D:\program\huaWei\soap1\cwmp1.wsdl and typemap.dat
   2009-05-07 01:18:44 GMT
   Copyright (C) 2001-2008 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * urn:dslforum-org:cwmp-1-1                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to disable)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "urn:dslforum-org:cwmp-1-1"

*/

//gsoap ns1   schema namespace:	urn:dslforum-org:cwmp-1-1
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:anySimpleType"
typedef std::string xsd__anySimpleType;


//  Forward declaration of class ns1__DeviceIdStruct.
class ns1__DeviceIdStruct;

//  Forward declaration of class ParameterValueList.
class ParameterValueList;

//  Forward declaration of class ns1__ParameterValueStruct.
class ns1__ParameterValueStruct;

//  Forward declaration of class _ns1__Boot.
class _ns1__Boot;

//  Forward declaration of class _ns1__BootResponse.
class _ns1__BootResponse;

//  Forward declaration of class _ns1__ValueChange.
class _ns1__ValueChange;

//  Forward declaration of class _ns1__ValueChangeResponse.
class _ns1__ValueChangeResponse;

/// "urn:dslforum-org:cwmp-1-1":DeviceIdStruct is a complexType.
class ns1__DeviceIdStruct
{ public:
/// Length of this string is within 0..64 characters
    std::string                                                        
                                         Manufacturer                   1;	///< Required element.
/// Length of this string is exactly 6 characters
/// Content pattern is "[0-9A-F]{6}"
    std::string                                                        
                                         OUI                            1;	///< Required element.
/// Length of this string is within 0..64 characters
    std::string                                                        
                                         ProductClass                   1;	///< Required element.
/// Length of this string is within 0..64 characters
    std::string                                                        
                                         SerialNumber                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:dslforum-org:cwmp-1-1":ParameterValueStruct is a complexType.
class ns1__ParameterValueStruct
{ public:
/// Length of this string is within 0..256 characters
    std::string                                                        
                                         Name                           1;	///< Required element.
/// Element Value of type xs:anySimpleType.
    xsd__anySimpleType                   Value                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:dslforum-org:cwmp-1-1":Boot of complexType.

/// "urn:dslforum-org:cwmp-1-1":Boot is a complexType.
class _ns1__Boot
{ public:
/// Element DeviceId of type "urn:dslforum-org:cwmp-1-1":DeviceIdStruct.
    ns1__DeviceIdStruct*                 DeviceId                       1;	///< Required element.
/// Element Ip of type xs:string.
    std::string                          Ip                             1;	///< Required element.
/// Element MaxEnvelopes of type xs:unsignedInt.
    unsigned int                         MaxEnvelopes                   1;	///< Required element.
/// Element CurrentTime of type xs:dateTime.
    time_t                               CurrentTime                    1;	///< Required element.
/// Element RetryCount of type xs:unsignedInt.
    unsigned int                         RetryCount                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:dslforum-org:cwmp-1-1":BootResponse of complexType.

/// "urn:dslforum-org:cwmp-1-1":BootResponse is a complexType.
class _ns1__BootResponse
{ public:
/// Element MaxEnvelopes of type xs:unsignedInt.
    unsigned int                         MaxEnvelopes                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:dslforum-org:cwmp-1-1":ValueChange of complexType.

/// "urn:dslforum-org:cwmp-1-1":ValueChange is a complexType.
class _ns1__ValueChange
{ public:
/// Element DeviceId of type "urn:dslforum-org:cwmp-1-1":DeviceIdStruct.
    ns1__DeviceIdStruct*                 DeviceId                       1;	///< Required element.
/// Element MaxEnvelopes of type xs:unsignedInt.
    unsigned int                         MaxEnvelopes                   1;	///< Required element.
/// Element Ip of type xs:string.
    std::string                          Ip                             1;	///< Required element.
/// Element CurrentTime of type xs:dateTime.
    time_t                               CurrentTime                    1;	///< Required element.
/// Element RetryCount of type xs:unsignedInt.
    unsigned int                         RetryCount                     1;	///< Required element.
/// Element ParameterList of type "urn:dslforum-org:cwmp-1-1":ParameterValueList.
    ParameterValueList*                  ParameterList                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:dslforum-org:cwmp-1-1":ValueChangeResponse of complexType.

/// "urn:dslforum-org:cwmp-1-1":ValueChangeResponse is a complexType.
class _ns1__ValueChangeResponse
{ public:
/// Element MaxEnvelopes of type xs:unsignedInt.
    unsigned int                         MaxEnvelopes                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:dslforum-org:cwmp-1-1":ParameterValueList is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "urn:dslforum-org:cwmp-1-1":ParameterValueStruct
class ParameterValueList
{ public:
/// Pointer to array of ns1__ParameterValueStruct*.
    ns1__ParameterValueStruct*          *__ptrParameterValueStruct     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	cwmp 
//gsoap ns1  service type:	cwmpPortType 
//gsoap ns1  service port:	http://localhost:8080/cwmp 
//gsoap ns1  service namespace:	urn:dslforum-org:cwmp-1-1 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage cwmp Definitions

@section cwmp_bindings Bindings
  - @ref cwmp

*/

/**

@page cwmp Binding "cwmp"

@section cwmp_service Service Documentation "cwmp"
CWMP service definition for CPE and ACS

@section cwmp_operations Operations of Binding  "cwmp"
  - @ref __ns1__Boot
  - @ref __ns1__ValueChange

@section cwmp_ports Endpoints of Binding  "cwmp"
  - http://localhost:8080/cwmp

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * cwmp                                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * __ns1__Boot                                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__Boot" of service binding "cwmp"

/**

Operation details:

Service definition of function cwmp__Inform
  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Boot(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__Boot*                         ns1__Boot,
    // response parameters:
    _ns1__BootResponse*                 ns1__BootResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Boot(
    struct soap *soap,
    // request parameters:
    _ns1__Boot*                         ns1__Boot,
    // response parameters:
    _ns1__BootResponse*                 ns1__BootResponse
  );
@endcode

C++ proxy class (defined in soapcwmpProxy.h):
  class cwmp;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	Boot document
//gsoap ns1  service method-encoding:	Boot literal
//gsoap ns1  service method-action:	Boot ""
int __ns1__Boot(
    _ns1__Boot*                         ns1__Boot,	///< Request parameter
    _ns1__BootResponse*                 ns1__BootResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __ns1__ValueChange                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__ValueChange" of service binding "cwmp"

/**

Operation details:

Service definition of function cwmp__Inform
  - SOAP document/literal style

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ValueChange(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__ValueChange*                  ns1__ValueChange,
    // response parameters:
    _ns1__ValueChangeResponse*          ns1__ValueChangeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ValueChange(
    struct soap *soap,
    // request parameters:
    _ns1__ValueChange*                  ns1__ValueChange,
    // response parameters:
    _ns1__ValueChangeResponse*          ns1__ValueChangeResponse
  );
@endcode

C++ proxy class (defined in soapcwmpProxy.h):
  class cwmp;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	ValueChange document
//gsoap ns1  service method-encoding:	ValueChange literal
//gsoap ns1  service method-action:	ValueChange ""
int __ns1__ValueChange(
    _ns1__ValueChange*                  ns1__ValueChange,	///< Request parameter
    _ns1__ValueChangeResponse*          ns1__ValueChangeResponse	///< Response parameter
);

/* End of D:\program\huaWei\soap1\soap\huaWei.h */
