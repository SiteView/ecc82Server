/* soapC.cpp
   Generated by gSOAP 2.7.12 from D:\program\huaWei\soap1\soap\huaWei.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.12 2009-05-07 01:19:10 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_ns1__ParameterValueStruct:
		return soap_in_ns1__ParameterValueStruct(soap, NULL, NULL, "ns1:ParameterValueStruct");
	case SOAP_TYPE_ParameterValueList:
		return soap_in_ParameterValueList(soap, NULL, NULL, "ns1:ParameterValueStruct");
	case SOAP_TYPE_ns1__DeviceIdStruct:
		return soap_in_ns1__DeviceIdStruct(soap, NULL, NULL, "ns1:DeviceIdStruct");
	case SOAP_TYPE_xsd__anySimpleType:
		return soap_in_xsd__anySimpleType(soap, NULL, NULL, "xsd:anySimpleType");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__ValueChangeResponse:
		return soap_in_PointerTo_ns1__ValueChangeResponse(soap, NULL, NULL, "ns1:ValueChangeResponse");
	case SOAP_TYPE_PointerTo_ns1__ValueChange:
		return soap_in_PointerTo_ns1__ValueChange(soap, NULL, NULL, "ns1:ValueChange");
	case SOAP_TYPE_PointerTo_ns1__BootResponse:
		return soap_in_PointerTo_ns1__BootResponse(soap, NULL, NULL, "ns1:BootResponse");
	case SOAP_TYPE_PointerTo_ns1__Boot:
		return soap_in_PointerTo_ns1__Boot(soap, NULL, NULL, "ns1:Boot");
	case SOAP_TYPE_PointerToPointerTons1__ParameterValueStruct:
		return soap_in_PointerToPointerTons1__ParameterValueStruct(soap, NULL, NULL, "ns1:ParameterValueStruct");
	case SOAP_TYPE_PointerTons1__ParameterValueStruct:
		return soap_in_PointerTons1__ParameterValueStruct(soap, NULL, NULL, "ns1:ParameterValueStruct");
	case SOAP_TYPE_PointerToParameterValueList:
		return soap_in_PointerToParameterValueList(soap, NULL, NULL, "ns1:ParameterValueStruct");
	case SOAP_TYPE_PointerTons1__DeviceIdStruct:
		return soap_in_PointerTons1__DeviceIdStruct(soap, NULL, NULL, "ns1:DeviceIdStruct");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:ParameterValueStruct"))
		{	*type = SOAP_TYPE_ns1__ParameterValueStruct;
			return soap_in_ns1__ParameterValueStruct(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns1:ParameterValueStruct"))
		{	*type = SOAP_TYPE_ParameterValueList;
			return soap_in_ParameterValueList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DeviceIdStruct"))
		{	*type = SOAP_TYPE_ns1__DeviceIdStruct;
			return soap_in_ns1__DeviceIdStruct(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anySimpleType"))
		{	*type = SOAP_TYPE_xsd__anySimpleType;
			return soap_in_xsd__anySimpleType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:ValueChangeResponse"))
		{	*type = SOAP_TYPE__ns1__ValueChangeResponse;
			return soap_in__ns1__ValueChangeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ValueChange"))
		{	*type = SOAP_TYPE__ns1__ValueChange;
			return soap_in__ns1__ValueChange(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:BootResponse"))
		{	*type = SOAP_TYPE__ns1__BootResponse;
			return soap_in__ns1__BootResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Boot"))
		{	*type = SOAP_TYPE__ns1__Boot;
			return soap_in__ns1__Boot(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE__ns1__ValueChangeResponse:
		return ((_ns1__ValueChangeResponse *)ptr)->soap_out(soap, "ns1:ValueChangeResponse", id, NULL);
	case SOAP_TYPE__ns1__ValueChange:
		return ((_ns1__ValueChange *)ptr)->soap_out(soap, "ns1:ValueChange", id, NULL);
	case SOAP_TYPE__ns1__BootResponse:
		return ((_ns1__BootResponse *)ptr)->soap_out(soap, "ns1:BootResponse", id, NULL);
	case SOAP_TYPE__ns1__Boot:
		return ((_ns1__Boot *)ptr)->soap_out(soap, "ns1:Boot", id, NULL);
	case SOAP_TYPE_ns1__ParameterValueStruct:
		return ((ns1__ParameterValueStruct *)ptr)->soap_out(soap, tag, id, "ns1:ParameterValueStruct");
	case SOAP_TYPE_ParameterValueList:
		return ((ParameterValueList *)ptr)->soap_out(soap, tag, id, "ns1:ParameterValueStruct");
	case SOAP_TYPE_ns1__DeviceIdStruct:
		return ((ns1__DeviceIdStruct *)ptr)->soap_out(soap, tag, id, "ns1:DeviceIdStruct");
	case SOAP_TYPE_xsd__anySimpleType:
		return soap_out_xsd__anySimpleType(soap, tag, id, (const std::string *)ptr, "xsd:anySimpleType");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__ValueChangeResponse:
		return soap_out_PointerTo_ns1__ValueChangeResponse(soap, tag, id, (_ns1__ValueChangeResponse *const*)ptr, "ns1:ValueChangeResponse");
	case SOAP_TYPE_PointerTo_ns1__ValueChange:
		return soap_out_PointerTo_ns1__ValueChange(soap, tag, id, (_ns1__ValueChange *const*)ptr, "ns1:ValueChange");
	case SOAP_TYPE_PointerTo_ns1__BootResponse:
		return soap_out_PointerTo_ns1__BootResponse(soap, tag, id, (_ns1__BootResponse *const*)ptr, "ns1:BootResponse");
	case SOAP_TYPE_PointerTo_ns1__Boot:
		return soap_out_PointerTo_ns1__Boot(soap, tag, id, (_ns1__Boot *const*)ptr, "ns1:Boot");
	case SOAP_TYPE_PointerToPointerTons1__ParameterValueStruct:
		return soap_out_PointerToPointerTons1__ParameterValueStruct(soap, tag, id, (ns1__ParameterValueStruct **const*)ptr, "ns1:ParameterValueStruct");
	case SOAP_TYPE_PointerTons1__ParameterValueStruct:
		return soap_out_PointerTons1__ParameterValueStruct(soap, tag, id, (ns1__ParameterValueStruct *const*)ptr, "ns1:ParameterValueStruct");
	case SOAP_TYPE_PointerToParameterValueList:
		return soap_out_PointerToParameterValueList(soap, tag, id, (ParameterValueList *const*)ptr, "ns1:ParameterValueStruct");
	case SOAP_TYPE_PointerTons1__DeviceIdStruct:
		return soap_out_PointerTons1__DeviceIdStruct(soap, tag, id, (ns1__DeviceIdStruct *const*)ptr, "ns1:DeviceIdStruct");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__ValueChangeResponse:
		((_ns1__ValueChangeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ValueChange:
		((_ns1__ValueChange *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__BootResponse:
		((_ns1__BootResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Boot:
		((_ns1__Boot *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ParameterValueStruct:
		((ns1__ParameterValueStruct *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ParameterValueList:
		((ParameterValueList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__DeviceIdStruct:
		((ns1__DeviceIdStruct *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anySimpleType:
		soap_serialize_xsd__anySimpleType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE___ns1__ValueChange:
		soap_serialize___ns1__ValueChange(soap, (const struct __ns1__ValueChange *)ptr);
		break;
	case SOAP_TYPE___ns1__Boot:
		soap_serialize___ns1__Boot(soap, (const struct __ns1__Boot *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ValueChangeResponse:
		soap_serialize_PointerTo_ns1__ValueChangeResponse(soap, (_ns1__ValueChangeResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ValueChange:
		soap_serialize_PointerTo_ns1__ValueChange(soap, (_ns1__ValueChange *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__BootResponse:
		soap_serialize_PointerTo_ns1__BootResponse(soap, (_ns1__BootResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Boot:
		soap_serialize_PointerTo_ns1__Boot(soap, (_ns1__Boot *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__ParameterValueStruct:
		soap_serialize_PointerToPointerTons1__ParameterValueStruct(soap, (ns1__ParameterValueStruct **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ParameterValueStruct:
		soap_serialize_PointerTons1__ParameterValueStruct(soap, (ns1__ParameterValueStruct *const*)ptr);
		break;
	case SOAP_TYPE_PointerToParameterValueList:
		soap_serialize_PointerToParameterValueList(soap, (ParameterValueList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__DeviceIdStruct:
		soap_serialize_PointerTons1__DeviceIdStruct(soap, (ns1__DeviceIdStruct *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__DeviceIdStruct:
		return (void*)soap_instantiate_ns1__DeviceIdStruct(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ParameterValueStruct:
		return (void*)soap_instantiate_ns1__ParameterValueStruct(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Boot:
		return (void*)soap_instantiate__ns1__Boot(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__BootResponse:
		return (void*)soap_instantiate__ns1__BootResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ValueChange:
		return (void*)soap_instantiate__ns1__ValueChange(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ValueChangeResponse:
		return (void*)soap_instantiate__ns1__ValueChangeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ParameterValueList:
		return (void*)soap_instantiate_ParameterValueList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Boot:
		return (void*)soap_instantiate___ns1__Boot(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ValueChange:
		return (void*)soap_instantiate___ns1__ValueChange(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__anySimpleType:
		return (void*)soap_instantiate_xsd__anySimpleType(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_ns1__DeviceIdStruct:
		if (p->size < 0)
			delete (ns1__DeviceIdStruct*)p->ptr;
		else
			delete[] (ns1__DeviceIdStruct*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ParameterValueStruct:
		if (p->size < 0)
			delete (ns1__ParameterValueStruct*)p->ptr;
		else
			delete[] (ns1__ParameterValueStruct*)p->ptr;
		break;
	case SOAP_TYPE__ns1__Boot:
		if (p->size < 0)
			delete (_ns1__Boot*)p->ptr;
		else
			delete[] (_ns1__Boot*)p->ptr;
		break;
	case SOAP_TYPE__ns1__BootResponse:
		if (p->size < 0)
			delete (_ns1__BootResponse*)p->ptr;
		else
			delete[] (_ns1__BootResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__ValueChange:
		if (p->size < 0)
			delete (_ns1__ValueChange*)p->ptr;
		else
			delete[] (_ns1__ValueChange*)p->ptr;
		break;
	case SOAP_TYPE__ns1__ValueChangeResponse:
		if (p->size < 0)
			delete (_ns1__ValueChangeResponse*)p->ptr;
		else
			delete[] (_ns1__ValueChangeResponse*)p->ptr;
		break;
	case SOAP_TYPE_ParameterValueList:
		if (p->size < 0)
			delete (ParameterValueList*)p->ptr;
		else
			delete[] (ParameterValueList*)p->ptr;
		break;
	case SOAP_TYPE___ns1__Boot:
		if (p->size < 0)
			delete (struct __ns1__Boot*)p->ptr;
		else
			delete[] (struct __ns1__Boot*)p->ptr;
		break;
	case SOAP_TYPE___ns1__ValueChange:
		if (p->size < 0)
			delete (struct __ns1__ValueChange*)p->ptr;
		else
			delete[] (struct __ns1__ValueChange*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_xsd__anySimpleType:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_time);
	if (soap_out_time(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
	return p;
}

void _ns1__ValueChangeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->_ns1__ValueChangeResponse::MaxEnvelopes);
	/* transient soap skipped */
}

void _ns1__ValueChangeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__ValueChangeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__ValueChangeResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__ValueChangeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ValueChangeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ValueChangeResponse(struct soap *soap, const char *tag, int id, const _ns1__ValueChangeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ValueChangeResponse), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "MaxEnvelopes", -1, &(a->_ns1__ValueChangeResponse::MaxEnvelopes), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__ValueChangeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ValueChangeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ValueChangeResponse * SOAP_FMAC4 soap_get__ns1__ValueChangeResponse(struct soap *soap, _ns1__ValueChangeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ValueChangeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__ValueChangeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ValueChangeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ValueChangeResponse * SOAP_FMAC4 soap_in__ns1__ValueChangeResponse(struct soap *soap, const char *tag, _ns1__ValueChangeResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ValueChangeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ValueChangeResponse, sizeof(_ns1__ValueChangeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__ValueChangeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__ValueChangeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_MaxEnvelopes1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MaxEnvelopes1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "MaxEnvelopes", &(a->_ns1__ValueChangeResponse::MaxEnvelopes), "xsd:unsignedInt"))
				{	soap_flag_MaxEnvelopes1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ValueChangeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ValueChangeResponse, 0, sizeof(_ns1__ValueChangeResponse), 0, soap_copy__ns1__ValueChangeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_MaxEnvelopes1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__ValueChangeResponse * SOAP_FMAC6 soap_new__ns1__ValueChangeResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__ValueChangeResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__ValueChangeResponse(struct soap *soap, _ns1__ValueChangeResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__ValueChangeResponse * SOAP_FMAC4 soap_instantiate__ns1__ValueChangeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ValueChangeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__ValueChangeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__ValueChangeResponse;
		if (size)
			*size = sizeof(_ns1__ValueChangeResponse);
		((_ns1__ValueChangeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__ValueChangeResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__ValueChangeResponse);
		for (int i = 0; i < n; i++)
			((_ns1__ValueChangeResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__ValueChangeResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ValueChangeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__ValueChangeResponse %p -> %p\n", q, p));
	*(_ns1__ValueChangeResponse*)p = *(_ns1__ValueChangeResponse*)q;
}

void _ns1__ValueChange::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ValueChange::DeviceId = NULL;
	soap_default_unsignedInt(soap, &this->_ns1__ValueChange::MaxEnvelopes);
	soap_default_std__string(soap, &this->_ns1__ValueChange::Ip);
	soap_default_time(soap, &this->_ns1__ValueChange::CurrentTime);
	soap_default_unsignedInt(soap, &this->_ns1__ValueChange::RetryCount);
	this->_ns1__ValueChange::ParameterList = NULL;
	/* transient soap skipped */
}

void _ns1__ValueChange::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__DeviceIdStruct(soap, &this->_ns1__ValueChange::DeviceId);
	soap_serialize_std__string(soap, &this->_ns1__ValueChange::Ip);
	soap_serialize_PointerToParameterValueList(soap, &this->_ns1__ValueChange::ParameterList);
	/* transient soap skipped */
}

int _ns1__ValueChange::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__ValueChange);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__ValueChange::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ValueChange(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ValueChange(struct soap *soap, const char *tag, int id, const _ns1__ValueChange *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ValueChange), type))
		return soap->error;
	if (soap_out_PointerTons1__DeviceIdStruct(soap, "DeviceId", -1, &(a->_ns1__ValueChange::DeviceId), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "MaxEnvelopes", -1, &(a->_ns1__ValueChange::MaxEnvelopes), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Ip", -1, &(a->_ns1__ValueChange::Ip), ""))
		return soap->error;
	if (soap_out_time(soap, "CurrentTime", -1, &(a->_ns1__ValueChange::CurrentTime), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "RetryCount", -1, &(a->_ns1__ValueChange::RetryCount), ""))
		return soap->error;
	if (soap_out_PointerToParameterValueList(soap, "ParameterList", -1, &(a->_ns1__ValueChange::ParameterList), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__ValueChange::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ValueChange(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ValueChange * SOAP_FMAC4 soap_get__ns1__ValueChange(struct soap *soap, _ns1__ValueChange *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ValueChange(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__ValueChange::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ValueChange(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ValueChange * SOAP_FMAC4 soap_in__ns1__ValueChange(struct soap *soap, const char *tag, _ns1__ValueChange *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ValueChange *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ValueChange, sizeof(_ns1__ValueChange), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__ValueChange)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__ValueChange *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DeviceId1 = 1;
	size_t soap_flag_MaxEnvelopes1 = 1;
	size_t soap_flag_Ip1 = 1;
	size_t soap_flag_CurrentTime1 = 1;
	size_t soap_flag_RetryCount1 = 1;
	size_t soap_flag_ParameterList1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DeviceId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__DeviceIdStruct(soap, "DeviceId", &(a->_ns1__ValueChange::DeviceId), "ns1:DeviceIdStruct"))
				{	soap_flag_DeviceId1--;
					continue;
				}
			if (soap_flag_MaxEnvelopes1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "MaxEnvelopes", &(a->_ns1__ValueChange::MaxEnvelopes), "xsd:unsignedInt"))
				{	soap_flag_MaxEnvelopes1--;
					continue;
				}
			if (soap_flag_Ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Ip", &(a->_ns1__ValueChange::Ip), "xsd:string"))
				{	soap_flag_Ip1--;
					continue;
				}
			if (soap_flag_CurrentTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "CurrentTime", &(a->_ns1__ValueChange::CurrentTime), "xsd:dateTime"))
				{	soap_flag_CurrentTime1--;
					continue;
				}
			if (soap_flag_RetryCount1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "RetryCount", &(a->_ns1__ValueChange::RetryCount), "xsd:unsignedInt"))
				{	soap_flag_RetryCount1--;
					continue;
				}
			if (soap_flag_ParameterList1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToParameterValueList(soap, "ParameterList", &(a->_ns1__ValueChange::ParameterList), "ns1:ParameterValueStruct"))
				{	soap_flag_ParameterList1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ValueChange *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ValueChange, 0, sizeof(_ns1__ValueChange), 0, soap_copy__ns1__ValueChange);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DeviceId1 > 0 || soap_flag_MaxEnvelopes1 > 0 || soap_flag_Ip1 > 0 || soap_flag_CurrentTime1 > 0 || soap_flag_RetryCount1 > 0 || soap_flag_ParameterList1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__ValueChange * SOAP_FMAC6 soap_new__ns1__ValueChange(struct soap *soap, int n)
{	return soap_instantiate__ns1__ValueChange(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__ValueChange(struct soap *soap, _ns1__ValueChange *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__ValueChange * SOAP_FMAC4 soap_instantiate__ns1__ValueChange(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ValueChange(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__ValueChange, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__ValueChange;
		if (size)
			*size = sizeof(_ns1__ValueChange);
		((_ns1__ValueChange*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__ValueChange[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__ValueChange);
		for (int i = 0; i < n; i++)
			((_ns1__ValueChange*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__ValueChange*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ValueChange(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__ValueChange %p -> %p\n", q, p));
	*(_ns1__ValueChange*)p = *(_ns1__ValueChange*)q;
}

void _ns1__BootResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->_ns1__BootResponse::MaxEnvelopes);
	/* transient soap skipped */
}

void _ns1__BootResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__BootResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__BootResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__BootResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__BootResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BootResponse(struct soap *soap, const char *tag, int id, const _ns1__BootResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__BootResponse), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "MaxEnvelopes", -1, &(a->_ns1__BootResponse::MaxEnvelopes), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__BootResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__BootResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__BootResponse * SOAP_FMAC4 soap_get__ns1__BootResponse(struct soap *soap, _ns1__BootResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__BootResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__BootResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__BootResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__BootResponse * SOAP_FMAC4 soap_in__ns1__BootResponse(struct soap *soap, const char *tag, _ns1__BootResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__BootResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__BootResponse, sizeof(_ns1__BootResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__BootResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__BootResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_MaxEnvelopes1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MaxEnvelopes1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "MaxEnvelopes", &(a->_ns1__BootResponse::MaxEnvelopes), "xsd:unsignedInt"))
				{	soap_flag_MaxEnvelopes1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__BootResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__BootResponse, 0, sizeof(_ns1__BootResponse), 0, soap_copy__ns1__BootResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_MaxEnvelopes1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__BootResponse * SOAP_FMAC6 soap_new__ns1__BootResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__BootResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__BootResponse(struct soap *soap, _ns1__BootResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__BootResponse * SOAP_FMAC4 soap_instantiate__ns1__BootResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__BootResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__BootResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__BootResponse;
		if (size)
			*size = sizeof(_ns1__BootResponse);
		((_ns1__BootResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__BootResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__BootResponse);
		for (int i = 0; i < n; i++)
			((_ns1__BootResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__BootResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__BootResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__BootResponse %p -> %p\n", q, p));
	*(_ns1__BootResponse*)p = *(_ns1__BootResponse*)q;
}

void _ns1__Boot::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__Boot::DeviceId = NULL;
	soap_default_std__string(soap, &this->_ns1__Boot::Ip);
	soap_default_unsignedInt(soap, &this->_ns1__Boot::MaxEnvelopes);
	soap_default_time(soap, &this->_ns1__Boot::CurrentTime);
	soap_default_unsignedInt(soap, &this->_ns1__Boot::RetryCount);
	/* transient soap skipped */
}

void _ns1__Boot::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__DeviceIdStruct(soap, &this->_ns1__Boot::DeviceId);
	soap_serialize_std__string(soap, &this->_ns1__Boot::Ip);
	/* transient soap skipped */
}

int _ns1__Boot::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Boot);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__Boot::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Boot(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Boot(struct soap *soap, const char *tag, int id, const _ns1__Boot *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Boot), type))
		return soap->error;
	if (soap_out_PointerTons1__DeviceIdStruct(soap, "DeviceId", -1, &(a->_ns1__Boot::DeviceId), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Ip", -1, &(a->_ns1__Boot::Ip), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "MaxEnvelopes", -1, &(a->_ns1__Boot::MaxEnvelopes), ""))
		return soap->error;
	if (soap_out_time(soap, "CurrentTime", -1, &(a->_ns1__Boot::CurrentTime), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "RetryCount", -1, &(a->_ns1__Boot::RetryCount), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Boot::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Boot(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Boot * SOAP_FMAC4 soap_get__ns1__Boot(struct soap *soap, _ns1__Boot *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Boot(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__Boot::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Boot(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Boot * SOAP_FMAC4 soap_in__ns1__Boot(struct soap *soap, const char *tag, _ns1__Boot *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Boot *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Boot, sizeof(_ns1__Boot), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Boot)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Boot *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DeviceId1 = 1;
	size_t soap_flag_Ip1 = 1;
	size_t soap_flag_MaxEnvelopes1 = 1;
	size_t soap_flag_CurrentTime1 = 1;
	size_t soap_flag_RetryCount1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DeviceId1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__DeviceIdStruct(soap, "DeviceId", &(a->_ns1__Boot::DeviceId), "ns1:DeviceIdStruct"))
				{	soap_flag_DeviceId1--;
					continue;
				}
			if (soap_flag_Ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Ip", &(a->_ns1__Boot::Ip), "xsd:string"))
				{	soap_flag_Ip1--;
					continue;
				}
			if (soap_flag_MaxEnvelopes1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "MaxEnvelopes", &(a->_ns1__Boot::MaxEnvelopes), "xsd:unsignedInt"))
				{	soap_flag_MaxEnvelopes1--;
					continue;
				}
			if (soap_flag_CurrentTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "CurrentTime", &(a->_ns1__Boot::CurrentTime), "xsd:dateTime"))
				{	soap_flag_CurrentTime1--;
					continue;
				}
			if (soap_flag_RetryCount1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "RetryCount", &(a->_ns1__Boot::RetryCount), "xsd:unsignedInt"))
				{	soap_flag_RetryCount1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Boot *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Boot, 0, sizeof(_ns1__Boot), 0, soap_copy__ns1__Boot);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DeviceId1 > 0 || soap_flag_Ip1 > 0 || soap_flag_MaxEnvelopes1 > 0 || soap_flag_CurrentTime1 > 0 || soap_flag_RetryCount1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__Boot * SOAP_FMAC6 soap_new__ns1__Boot(struct soap *soap, int n)
{	return soap_instantiate__ns1__Boot(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__Boot(struct soap *soap, _ns1__Boot *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__Boot * SOAP_FMAC4 soap_instantiate__ns1__Boot(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Boot(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Boot, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__Boot;
		if (size)
			*size = sizeof(_ns1__Boot);
		((_ns1__Boot*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__Boot[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__Boot);
		for (int i = 0; i < n; i++)
			((_ns1__Boot*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__Boot*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Boot(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Boot %p -> %p\n", q, p));
	*(_ns1__Boot*)p = *(_ns1__Boot*)q;
}

void ns1__ParameterValueStruct::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__ParameterValueStruct::Name);
	soap_default_xsd__anySimpleType(soap, &this->ns1__ParameterValueStruct::Value);
	/* transient soap skipped */
}

void ns1__ParameterValueStruct::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns1__ParameterValueStruct::Name);
	soap_serialize_xsd__anySimpleType(soap, &this->ns1__ParameterValueStruct::Value);
	/* transient soap skipped */
}

int ns1__ParameterValueStruct::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ParameterValueStruct);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ParameterValueStruct::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ParameterValueStruct(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ParameterValueStruct(struct soap *soap, const char *tag, int id, const ns1__ParameterValueStruct *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ParameterValueStruct), type))
		return soap->error;
	if (soap_out_std__string(soap, "Name", -1, &(a->ns1__ParameterValueStruct::Name), ""))
		return soap->error;
	if (soap_out_xsd__anySimpleType(soap, "Value", -1, &(a->ns1__ParameterValueStruct::Value), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ParameterValueStruct::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ParameterValueStruct(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ParameterValueStruct * SOAP_FMAC4 soap_get_ns1__ParameterValueStruct(struct soap *soap, ns1__ParameterValueStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ParameterValueStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ParameterValueStruct::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ParameterValueStruct(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ParameterValueStruct * SOAP_FMAC4 soap_in_ns1__ParameterValueStruct(struct soap *soap, const char *tag, ns1__ParameterValueStruct *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ParameterValueStruct *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ParameterValueStruct, sizeof(ns1__ParameterValueStruct), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ParameterValueStruct)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ParameterValueStruct *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Name1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Name", &(a->ns1__ParameterValueStruct::Name), "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			if (soap_flag_Value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__anySimpleType(soap, "Value", &(a->ns1__ParameterValueStruct::Value), "xsd:anySimpleType"))
				{	soap_flag_Value1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ParameterValueStruct *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ParameterValueStruct, 0, sizeof(ns1__ParameterValueStruct), 0, soap_copy_ns1__ParameterValueStruct);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Name1 > 0 || soap_flag_Value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ParameterValueStruct * SOAP_FMAC6 soap_new_ns1__ParameterValueStruct(struct soap *soap, int n)
{	return soap_instantiate_ns1__ParameterValueStruct(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ParameterValueStruct(struct soap *soap, ns1__ParameterValueStruct *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ParameterValueStruct * SOAP_FMAC4 soap_instantiate_ns1__ParameterValueStruct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ParameterValueStruct(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ParameterValueStruct, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ParameterValueStruct;
		if (size)
			*size = sizeof(ns1__ParameterValueStruct);
		((ns1__ParameterValueStruct*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ParameterValueStruct[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ParameterValueStruct);
		for (int i = 0; i < n; i++)
			((ns1__ParameterValueStruct*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ParameterValueStruct*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ParameterValueStruct(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ParameterValueStruct %p -> %p\n", q, p));
	*(ns1__ParameterValueStruct*)p = *(ns1__ParameterValueStruct*)q;
}

void ParameterValueList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptrParameterValueStruct = NULL;
}

void ParameterValueList::soap_serialize(struct soap *soap) const
{
	if (this->__ptrParameterValueStruct && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptrParameterValueStruct, 1, SOAP_TYPE_ParameterValueList))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_PointerTons1__ParameterValueStruct(soap, this->__ptrParameterValueStruct + i);
		}
}

int ParameterValueList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptrParameterValueStruct, 1, tag, SOAP_TYPE_ParameterValueList);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ParameterValueList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_ParameterValueList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ParameterValueList(struct soap *soap, const char *tag, int id, const ParameterValueList *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptrParameterValueStruct ? soap_putsize(soap, "ns1:ParameterValueStruct", a->__size) : NULL;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptrParameterValueStruct, 1, type, SOAP_TYPE_ParameterValueList);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons1__ParameterValueStruct(soap, "ParameterValueStruct", -1, &a->__ptrParameterValueStruct[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *ParameterValueList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ParameterValueList(soap, this, tag, type);
}

SOAP_FMAC3 ParameterValueList * SOAP_FMAC4 soap_get_ParameterValueList(struct soap *soap, ParameterValueList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ParameterValueList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ParameterValueList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ParameterValueList(soap, tag, this, type);
}

SOAP_FMAC3 ParameterValueList * SOAP_FMAC4 soap_in_ParameterValueList(struct soap *soap, const char *tag, ParameterValueList *a, const char *type)
{	int i, j;
	ns1__ParameterValueStruct **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (ParameterValueList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ParameterValueList, sizeof(ParameterValueList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptrParameterValueStruct = (ns1__ParameterValueStruct **)soap_malloc(soap, sizeof(ns1__ParameterValueStruct *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptrParameterValueStruct[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons1__ParameterValueStruct(soap, NULL, a->__ptrParameterValueStruct + i, "ns1:ParameterValueStruct"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (ns1__ParameterValueStruct **)soap_push_block(soap, NULL, sizeof(ns1__ParameterValueStruct *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerTons1__ParameterValueStruct(soap, NULL, p, "ns1:ParameterValueStruct"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptrParameterValueStruct = (ns1__ParameterValueStruct **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, NULL, (char*)a->__ptrParameterValueStruct, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ParameterValueList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ParameterValueList, 0, sizeof(ParameterValueList), 0, soap_copy_ParameterValueList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ParameterValueList * SOAP_FMAC6 soap_new_ParameterValueList(struct soap *soap, int n)
{	return soap_instantiate_ParameterValueList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ParameterValueList(struct soap *soap, ParameterValueList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ParameterValueList * SOAP_FMAC4 soap_instantiate_ParameterValueList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ParameterValueList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ParameterValueList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ParameterValueList;
		if (size)
			*size = sizeof(ParameterValueList);
		((ParameterValueList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ParameterValueList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ParameterValueList);
		for (int i = 0; i < n; i++)
			((ParameterValueList*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ParameterValueList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ParameterValueList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ParameterValueList %p -> %p\n", q, p));
	*(ParameterValueList*)p = *(ParameterValueList*)q;
}

void ns1__DeviceIdStruct::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__DeviceIdStruct::Manufacturer);
	soap_default_std__string(soap, &this->ns1__DeviceIdStruct::OUI);
	soap_default_std__string(soap, &this->ns1__DeviceIdStruct::ProductClass);
	soap_default_std__string(soap, &this->ns1__DeviceIdStruct::SerialNumber);
	/* transient soap skipped */
}

void ns1__DeviceIdStruct::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns1__DeviceIdStruct::Manufacturer);
	soap_serialize_std__string(soap, &this->ns1__DeviceIdStruct::OUI);
	soap_serialize_std__string(soap, &this->ns1__DeviceIdStruct::ProductClass);
	soap_serialize_std__string(soap, &this->ns1__DeviceIdStruct::SerialNumber);
	/* transient soap skipped */
}

int ns1__DeviceIdStruct::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__DeviceIdStruct);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__DeviceIdStruct::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__DeviceIdStruct(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeviceIdStruct(struct soap *soap, const char *tag, int id, const ns1__DeviceIdStruct *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__DeviceIdStruct), type))
		return soap->error;
	if (soap_out_std__string(soap, "Manufacturer", -1, &(a->ns1__DeviceIdStruct::Manufacturer), ""))
		return soap->error;
	if (soap_out_std__string(soap, "OUI", -1, &(a->ns1__DeviceIdStruct::OUI), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ProductClass", -1, &(a->ns1__DeviceIdStruct::ProductClass), ""))
		return soap->error;
	if (soap_out_std__string(soap, "SerialNumber", -1, &(a->ns1__DeviceIdStruct::SerialNumber), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__DeviceIdStruct::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__DeviceIdStruct(soap, this, tag, type);
}

SOAP_FMAC3 ns1__DeviceIdStruct * SOAP_FMAC4 soap_get_ns1__DeviceIdStruct(struct soap *soap, ns1__DeviceIdStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__DeviceIdStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__DeviceIdStruct::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__DeviceIdStruct(soap, tag, this, type);
}

SOAP_FMAC3 ns1__DeviceIdStruct * SOAP_FMAC4 soap_in_ns1__DeviceIdStruct(struct soap *soap, const char *tag, ns1__DeviceIdStruct *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__DeviceIdStruct *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__DeviceIdStruct, sizeof(ns1__DeviceIdStruct), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__DeviceIdStruct)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__DeviceIdStruct *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Manufacturer1 = 1;
	size_t soap_flag_OUI1 = 1;
	size_t soap_flag_ProductClass1 = 1;
	size_t soap_flag_SerialNumber1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Manufacturer1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Manufacturer", &(a->ns1__DeviceIdStruct::Manufacturer), "xsd:string"))
				{	soap_flag_Manufacturer1--;
					continue;
				}
			if (soap_flag_OUI1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OUI", &(a->ns1__DeviceIdStruct::OUI), "xsd:string"))
				{	soap_flag_OUI1--;
					continue;
				}
			if (soap_flag_ProductClass1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ProductClass", &(a->ns1__DeviceIdStruct::ProductClass), "xsd:string"))
				{	soap_flag_ProductClass1--;
					continue;
				}
			if (soap_flag_SerialNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "SerialNumber", &(a->ns1__DeviceIdStruct::SerialNumber), "xsd:string"))
				{	soap_flag_SerialNumber1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__DeviceIdStruct *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__DeviceIdStruct, 0, sizeof(ns1__DeviceIdStruct), 0, soap_copy_ns1__DeviceIdStruct);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Manufacturer1 > 0 || soap_flag_OUI1 > 0 || soap_flag_ProductClass1 > 0 || soap_flag_SerialNumber1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__DeviceIdStruct * SOAP_FMAC6 soap_new_ns1__DeviceIdStruct(struct soap *soap, int n)
{	return soap_instantiate_ns1__DeviceIdStruct(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__DeviceIdStruct(struct soap *soap, ns1__DeviceIdStruct *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__DeviceIdStruct * SOAP_FMAC4 soap_instantiate_ns1__DeviceIdStruct(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__DeviceIdStruct(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__DeviceIdStruct, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__DeviceIdStruct;
		if (size)
			*size = sizeof(ns1__DeviceIdStruct);
		((ns1__DeviceIdStruct*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__DeviceIdStruct[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__DeviceIdStruct);
		for (int i = 0; i < n; i++)
			((ns1__DeviceIdStruct*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__DeviceIdStruct*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__DeviceIdStruct(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__DeviceIdStruct %p -> %p\n", q, p));
	*(ns1__DeviceIdStruct*)p = *(ns1__DeviceIdStruct*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__anySimpleType(struct soap *soap, std::string *a)
{	soap_default_std__string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anySimpleType(struct soap *soap, std::string const*a)
{	soap_serialize_std__string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anySimpleType(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__anySimpleType);
	if (soap_out_xsd__anySimpleType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anySimpleType(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__anySimpleType), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anySimpleType(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anySimpleType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__anySimpleType(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anySimpleType, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anySimpleType, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__anySimpleType, 0, sizeof(std::string), 0, soap_copy_xsd__anySimpleType);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_xsd__anySimpleType(struct soap *soap, int n)
{	return soap_instantiate_xsd__anySimpleType(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__anySimpleType(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_xsd__anySimpleType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anySimpleType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anySimpleType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anySimpleType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ValueChange(struct soap *soap, struct __ns1__ValueChange *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ValueChange = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ValueChange(struct soap *soap, const struct __ns1__ValueChange *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__ValueChange(soap, &a->ns1__ValueChange);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ValueChange(struct soap *soap, const struct __ns1__ValueChange *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__ValueChange(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ValueChange(struct soap *soap, const char *tag, int id, const struct __ns1__ValueChange *a, const char *type)
{
	if (soap_out_PointerTo_ns1__ValueChange(soap, "ns1:ValueChange", -1, &a->ns1__ValueChange, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ValueChange * SOAP_FMAC4 soap_get___ns1__ValueChange(struct soap *soap, struct __ns1__ValueChange *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ValueChange(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns1__ValueChange * SOAP_FMAC4 soap_in___ns1__ValueChange(struct soap *soap, const char *tag, struct __ns1__ValueChange *a, const char *type)
{
	size_t soap_flag_ns1__ValueChange = 1;
	short soap_flag;
	a = (struct __ns1__ValueChange *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ValueChange, sizeof(struct __ns1__ValueChange), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ValueChange(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ValueChange && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__ValueChange(soap, "ns1:ValueChange", &a->ns1__ValueChange, ""))
				{	soap_flag_ns1__ValueChange--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__ValueChange * SOAP_FMAC6 soap_new___ns1__ValueChange(struct soap *soap, int n)
{	return soap_instantiate___ns1__ValueChange(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__ValueChange(struct soap *soap, struct __ns1__ValueChange *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__ValueChange * SOAP_FMAC4 soap_instantiate___ns1__ValueChange(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ValueChange(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__ValueChange, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__ValueChange;
		if (size)
			*size = sizeof(struct __ns1__ValueChange);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__ValueChange[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__ValueChange);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__ValueChange*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__ValueChange(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__ValueChange %p -> %p\n", q, p));
	*(struct __ns1__ValueChange*)p = *(struct __ns1__ValueChange*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Boot(struct soap *soap, struct __ns1__Boot *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Boot = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Boot(struct soap *soap, const struct __ns1__Boot *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Boot(soap, &a->ns1__Boot);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Boot(struct soap *soap, const struct __ns1__Boot *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Boot(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Boot(struct soap *soap, const char *tag, int id, const struct __ns1__Boot *a, const char *type)
{
	if (soap_out_PointerTo_ns1__Boot(soap, "ns1:Boot", -1, &a->ns1__Boot, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Boot * SOAP_FMAC4 soap_get___ns1__Boot(struct soap *soap, struct __ns1__Boot *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Boot(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns1__Boot * SOAP_FMAC4 soap_in___ns1__Boot(struct soap *soap, const char *tag, struct __ns1__Boot *a, const char *type)
{
	size_t soap_flag_ns1__Boot = 1;
	short soap_flag;
	a = (struct __ns1__Boot *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Boot, sizeof(struct __ns1__Boot), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Boot(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Boot && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Boot(soap, "ns1:Boot", &a->ns1__Boot, ""))
				{	soap_flag_ns1__Boot--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__Boot * SOAP_FMAC6 soap_new___ns1__Boot(struct soap *soap, int n)
{	return soap_instantiate___ns1__Boot(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__Boot(struct soap *soap, struct __ns1__Boot *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__Boot * SOAP_FMAC4 soap_instantiate___ns1__Boot(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Boot(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Boot, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__Boot;
		if (size)
			*size = sizeof(struct __ns1__Boot);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__Boot[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__Boot);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__Boot*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Boot(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Boot %p -> %p\n", q, p));
	*(struct __ns1__Boot*)p = *(struct __ns1__Boot*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ValueChangeResponse(struct soap *soap, _ns1__ValueChangeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ValueChangeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ValueChangeResponse(struct soap *soap, _ns1__ValueChangeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__ValueChangeResponse);
	if (soap_out_PointerTo_ns1__ValueChangeResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ValueChangeResponse(struct soap *soap, const char *tag, int id, _ns1__ValueChangeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ValueChangeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__ValueChangeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__ValueChangeResponse(struct soap *soap, _ns1__ValueChangeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ValueChangeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__ValueChangeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__ValueChangeResponse(struct soap *soap, const char *tag, _ns1__ValueChangeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ValueChangeResponse **)soap_malloc(soap, sizeof(_ns1__ValueChangeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ValueChangeResponse *)soap_instantiate__ns1__ValueChangeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__ValueChangeResponse ** p = (_ns1__ValueChangeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ValueChangeResponse, sizeof(_ns1__ValueChangeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ValueChange(struct soap *soap, _ns1__ValueChange *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ValueChange))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ValueChange(struct soap *soap, _ns1__ValueChange *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__ValueChange);
	if (soap_out_PointerTo_ns1__ValueChange(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ValueChange(struct soap *soap, const char *tag, int id, _ns1__ValueChange *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ValueChange);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__ValueChange ** SOAP_FMAC4 soap_get_PointerTo_ns1__ValueChange(struct soap *soap, _ns1__ValueChange **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ValueChange(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__ValueChange ** SOAP_FMAC4 soap_in_PointerTo_ns1__ValueChange(struct soap *soap, const char *tag, _ns1__ValueChange **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ValueChange **)soap_malloc(soap, sizeof(_ns1__ValueChange *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ValueChange *)soap_instantiate__ns1__ValueChange(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__ValueChange ** p = (_ns1__ValueChange **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ValueChange, sizeof(_ns1__ValueChange), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BootResponse(struct soap *soap, _ns1__BootResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__BootResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BootResponse(struct soap *soap, _ns1__BootResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__BootResponse);
	if (soap_out_PointerTo_ns1__BootResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BootResponse(struct soap *soap, const char *tag, int id, _ns1__BootResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__BootResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__BootResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__BootResponse(struct soap *soap, _ns1__BootResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__BootResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__BootResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__BootResponse(struct soap *soap, const char *tag, _ns1__BootResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__BootResponse **)soap_malloc(soap, sizeof(_ns1__BootResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__BootResponse *)soap_instantiate__ns1__BootResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__BootResponse ** p = (_ns1__BootResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__BootResponse, sizeof(_ns1__BootResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Boot(struct soap *soap, _ns1__Boot *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Boot))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Boot(struct soap *soap, _ns1__Boot *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Boot);
	if (soap_out_PointerTo_ns1__Boot(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Boot(struct soap *soap, const char *tag, int id, _ns1__Boot *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Boot);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Boot ** SOAP_FMAC4 soap_get_PointerTo_ns1__Boot(struct soap *soap, _ns1__Boot **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Boot(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__Boot ** SOAP_FMAC4 soap_in_PointerTo_ns1__Boot(struct soap *soap, const char *tag, _ns1__Boot **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Boot **)soap_malloc(soap, sizeof(_ns1__Boot *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Boot *)soap_instantiate__ns1__Boot(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Boot ** p = (_ns1__Boot **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Boot, sizeof(_ns1__Boot), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__ParameterValueStruct(struct soap *soap, ns1__ParameterValueStruct **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__ParameterValueStruct))
		soap_serialize_PointerTons1__ParameterValueStruct(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__ParameterValueStruct(struct soap *soap, ns1__ParameterValueStruct **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__ParameterValueStruct);
	if (soap_out_PointerToPointerTons1__ParameterValueStruct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__ParameterValueStruct(struct soap *soap, const char *tag, int id, ns1__ParameterValueStruct **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__ParameterValueStruct);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__ParameterValueStruct(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__ParameterValueStruct *** SOAP_FMAC4 soap_get_PointerToPointerTons1__ParameterValueStruct(struct soap *soap, ns1__ParameterValueStruct ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__ParameterValueStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ParameterValueStruct *** SOAP_FMAC4 soap_in_PointerToPointerTons1__ParameterValueStruct(struct soap *soap, const char *tag, ns1__ParameterValueStruct ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ParameterValueStruct ***)soap_malloc(soap, sizeof(ns1__ParameterValueStruct **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__ParameterValueStruct(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__ParameterValueStruct ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__ParameterValueStruct, sizeof(ns1__ParameterValueStruct *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ParameterValueStruct(struct soap *soap, ns1__ParameterValueStruct *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ParameterValueStruct))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ParameterValueStruct(struct soap *soap, ns1__ParameterValueStruct *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ParameterValueStruct);
	if (soap_out_PointerTons1__ParameterValueStruct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ParameterValueStruct(struct soap *soap, const char *tag, int id, ns1__ParameterValueStruct *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ParameterValueStruct);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ParameterValueStruct ** SOAP_FMAC4 soap_get_PointerTons1__ParameterValueStruct(struct soap *soap, ns1__ParameterValueStruct **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ParameterValueStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ParameterValueStruct ** SOAP_FMAC4 soap_in_PointerTons1__ParameterValueStruct(struct soap *soap, const char *tag, ns1__ParameterValueStruct **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ParameterValueStruct **)soap_malloc(soap, sizeof(ns1__ParameterValueStruct *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ParameterValueStruct *)soap_instantiate_ns1__ParameterValueStruct(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ParameterValueStruct ** p = (ns1__ParameterValueStruct **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ParameterValueStruct, sizeof(ns1__ParameterValueStruct), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToParameterValueList(struct soap *soap, ParameterValueList *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToParameterValueList(struct soap *soap, ParameterValueList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToParameterValueList);
	if (soap_out_PointerToParameterValueList(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToParameterValueList(struct soap *soap, const char *tag, int id, ParameterValueList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptrParameterValueStruct, 1, type, SOAP_TYPE_ParameterValueList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ParameterValueList ** SOAP_FMAC4 soap_get_PointerToParameterValueList(struct soap *soap, ParameterValueList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToParameterValueList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ParameterValueList ** SOAP_FMAC4 soap_in_PointerToParameterValueList(struct soap *soap, const char *tag, ParameterValueList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ParameterValueList **)soap_malloc(soap, sizeof(ParameterValueList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ParameterValueList *)soap_instantiate_ParameterValueList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ParameterValueList ** p = (ParameterValueList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ParameterValueList, sizeof(ParameterValueList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DeviceIdStruct(struct soap *soap, ns1__DeviceIdStruct *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__DeviceIdStruct))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DeviceIdStruct(struct soap *soap, ns1__DeviceIdStruct *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__DeviceIdStruct);
	if (soap_out_PointerTons1__DeviceIdStruct(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DeviceIdStruct(struct soap *soap, const char *tag, int id, ns1__DeviceIdStruct *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__DeviceIdStruct);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__DeviceIdStruct ** SOAP_FMAC4 soap_get_PointerTons1__DeviceIdStruct(struct soap *soap, ns1__DeviceIdStruct **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__DeviceIdStruct(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__DeviceIdStruct ** SOAP_FMAC4 soap_in_PointerTons1__DeviceIdStruct(struct soap *soap, const char *tag, ns1__DeviceIdStruct **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__DeviceIdStruct **)soap_malloc(soap, sizeof(ns1__DeviceIdStruct *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__DeviceIdStruct *)soap_instantiate_ns1__DeviceIdStruct(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__DeviceIdStruct ** p = (ns1__DeviceIdStruct **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__DeviceIdStruct, sizeof(ns1__DeviceIdStruct), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

/* End of soapC.cpp */
