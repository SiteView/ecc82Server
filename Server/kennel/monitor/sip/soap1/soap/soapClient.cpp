/* soapClient.cpp
   Generated by gSOAP 2.7.12 from D:\program\huaWei\soap1\soap\huaWei.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.12 2009-05-07 01:19:10 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Boot(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Boot *ns1__Boot, _ns1__BootResponse *ns1__BootResponse)
{	struct __ns1__Boot soap_tmp___ns1__Boot;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/cwmp";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Boot.ns1__Boot = ns1__Boot;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__Boot(soap, &soap_tmp___ns1__Boot);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Boot(soap, &soap_tmp___ns1__Boot, "-ns1:Boot", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Boot(soap, &soap_tmp___ns1__Boot, "-ns1:Boot", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__BootResponse)
		return soap_closesock(soap);
	ns1__BootResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__BootResponse->soap_get(soap, "ns1:BootResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ValueChange(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ValueChange *ns1__ValueChange, _ns1__ValueChangeResponse *ns1__ValueChangeResponse)
{	struct __ns1__ValueChange soap_tmp___ns1__ValueChange;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/cwmp";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ValueChange.ns1__ValueChange = ns1__ValueChange;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ValueChange(soap, &soap_tmp___ns1__ValueChange);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ValueChange(soap, &soap_tmp___ns1__ValueChange, "-ns1:ValueChange", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ValueChange(soap, &soap_tmp___ns1__ValueChange, "-ns1:ValueChange", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ValueChangeResponse)
		return soap_closesock(soap);
	ns1__ValueChangeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ValueChangeResponse->soap_get(soap, "ns1:ValueChangeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

/* End of soapClient.cpp */
