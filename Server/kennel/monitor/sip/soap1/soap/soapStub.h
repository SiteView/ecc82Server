/* soapStub.h
   Generated by gSOAP 2.7.12 from D:\program\huaWei\soap1\soap\huaWei.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_ns1__DeviceIdStruct
#define SOAP_TYPE_ns1__DeviceIdStruct (10)
/* ns1:DeviceIdStruct */
class SOAP_CMAC ns1__DeviceIdStruct
{
public:
	std::string Manufacturer;	/* required element of type xsd:string */
	std::string OUI;	/* required element of type xsd:string */
	std::string ProductClass;	/* required element of type xsd:string */
	std::string SerialNumber;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns1__DeviceIdStruct */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeviceIdStruct() : soap(NULL) { }
	virtual ~ns1__DeviceIdStruct() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ParameterValueStruct
#define SOAP_TYPE_ns1__ParameterValueStruct (12)
/* ns1:ParameterValueStruct */
class SOAP_CMAC ns1__ParameterValueStruct
{
public:
	std::string Name;	/* required element of type xsd:string */
	std::string Value;	/* required element of type xsd:anySimpleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns1__ParameterValueStruct */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ParameterValueStruct() : soap(NULL) { }
	virtual ~ns1__ParameterValueStruct() { }
};
#endif

#ifndef SOAP_TYPE__ns1__Boot
#define SOAP_TYPE__ns1__Boot (13)
/* ns1:Boot */
class SOAP_CMAC _ns1__Boot
{
public:
	ns1__DeviceIdStruct *DeviceId;	/* required element of type ns1:DeviceIdStruct */
	std::string Ip;	/* required element of type xsd:string */
	unsigned int MaxEnvelopes;	/* required element of type xsd:unsignedInt */
	time_t CurrentTime;	/* required element of type xsd:dateTime */
	unsigned int RetryCount;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE__ns1__Boot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__Boot() : DeviceId(NULL), MaxEnvelopes(0), CurrentTime(0), RetryCount(0), soap(NULL) { }
	virtual ~_ns1__Boot() { }
};
#endif

#ifndef SOAP_TYPE__ns1__BootResponse
#define SOAP_TYPE__ns1__BootResponse (14)
/* ns1:BootResponse */
class SOAP_CMAC _ns1__BootResponse
{
public:
	unsigned int MaxEnvelopes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE__ns1__BootResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__BootResponse() : MaxEnvelopes(0), soap(NULL) { }
	virtual ~_ns1__BootResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ValueChange
#define SOAP_TYPE__ns1__ValueChange (15)
/* ns1:ValueChange */
class SOAP_CMAC _ns1__ValueChange
{
public:
	ns1__DeviceIdStruct *DeviceId;	/* required element of type ns1:DeviceIdStruct */
	unsigned int MaxEnvelopes;	/* required element of type xsd:unsignedInt */
	std::string Ip;	/* required element of type xsd:string */
	time_t CurrentTime;	/* required element of type xsd:dateTime */
	unsigned int RetryCount;	/* required element of type xsd:unsignedInt */
	class ParameterValueList *ParameterList;	/* required element of type ArrayOfParameterValueStruct */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE__ns1__ValueChange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ValueChange() : DeviceId(NULL), MaxEnvelopes(0), CurrentTime(0), RetryCount(0), ParameterList(NULL), soap(NULL) { }
	virtual ~_ns1__ValueChange() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ValueChangeResponse
#define SOAP_TYPE__ns1__ValueChangeResponse (16)
/* ns1:ValueChangeResponse */
class SOAP_CMAC _ns1__ValueChangeResponse
{
public:
	unsigned int MaxEnvelopes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE__ns1__ValueChangeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ValueChangeResponse() : MaxEnvelopes(0), soap(NULL) { }
	virtual ~_ns1__ValueChangeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ParameterValueList
#define SOAP_TYPE_ParameterValueList (11)
/* SOAP encoded array of ns1:ParameterValueStruct schema type: */
class SOAP_CMAC ParameterValueList
{
public:
	ns1__ParameterValueStruct **__ptrParameterValueStruct;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ParameterValueList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ParameterValueList() : __ptrParameterValueStruct(NULL), __size(0), soap(NULL) { }
	virtual ~ParameterValueList() { }
};
#endif

#ifndef SOAP_TYPE___ns1__Boot
#define SOAP_TYPE___ns1__Boot (27)
/* Operation wrapper: */
struct __ns1__Boot
{
public:
	_ns1__Boot *ns1__Boot;	/* optional element of type ns1:Boot */
};
#endif

#ifndef SOAP_TYPE___ns1__ValueChange
#define SOAP_TYPE___ns1__ValueChange (31)
/* Operation wrapper: */
struct __ns1__ValueChange
{
public:
	_ns1__ValueChange *ns1__ValueChange;	/* optional element of type ns1:ValueChange */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (32)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (33)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (35)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (38)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (39)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__anySimpleType
#define SOAP_TYPE_xsd__anySimpleType (9)
typedef std::string xsd__anySimpleType;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Boot(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Boot *ns1__Boot, _ns1__BootResponse *ns1__BootResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ValueChange(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ValueChange *ns1__ValueChange, _ns1__ValueChangeResponse *ns1__ValueChangeResponse);

#endif

/* End of soapStub.h */
