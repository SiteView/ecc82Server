/****************************************************************************
** Licensed Materials - Property of IBM
** 
** Governed under the terms of the International
** License Agreement for Non-Warranted Sample Code.
**
** (C) COPYRIGHT International Business Machines Corp. 2000 - 2002        
** All Rights Reserved.
**
** US Government Users Restricted Rights - Use, duplication or
** disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
*****************************************************************************
**
** SOURCE FILE NAME: utilemb.sqc
**
** SAMPLE: Error-checking utility for embedded SQL samples in C
**
**         This utility file is compiled and linked in as an object module 
**         with embedded SQL sample programs by the supplied makefile and 
**         build files. It checks for and prints to the screen SQL warnings 
**         and errors.
**
** SQL STATEMENTS USED:
**         BEGIN DECLARE SECTION
**         END DECLARE SECTION
**         ROLLBACK
**         CONNECT
**
** Included functions:
**         TransRollback - rolls back the transaction
**         DbConn - connects to the database
**         DbDisconn - disconnects from the database
**
*****************************************************************************
**
** For more information on the sample programs, see the README file.
**
** For information on developing C applications, see the Application
** Development Guide.
**
** For information on using SQL statements, see the SQL Reference.
**
** For the latest information on programming, building, and running DB2 
** applications, visit the DB2 application development website: 
**     http://www.software.ibm.com/data/db2/udb/ad
****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <sql.h>
#include <sqlenv.h>
#include <sqlda.h>
#include <sqlca.h>
#include <string.h>
#include <ctype.h>
#include "utilapi.c"
#include "utilemb.h"

EXEC SQL BEGIN DECLARE SECTION;
  char dbAlias[15];
  char user[129];
  char pswd[15];
EXEC SQL END DECLARE SECTION;

void TransRollback()
{
  struct sqlca sqlca;

  /* rollback the transaction */
  printf("\n  Rolling back the transaction...\n");

  EXEC SQL ROLLBACK;
  SqlInfoPrint("ROLLBACK", &sqlca, __LINE__, __FILE__);
  if (sqlca.sqlcode == 0)
  {
    printf("  The transaction was rolled back.\n");
  }
} /* TransRollback */

int DbConn(char paramDbAlias[], char paramUser[], char paramPswd[])
{
  struct sqlca sqlca;
  int rc = 0;

  strcpy(dbAlias, paramDbAlias);
  strcpy(user, paramUser);
  strcpy(pswd, paramPswd);

  printf("\n  Connecting to '%s' database...\n", dbAlias);
  if (strlen(user) == 0)
  {
    EXEC SQL CONNECT TO :dbAlias;
    EMB_SQL_CHECK("CONNECT");
  }
  else
  {
    EXEC SQL CONNECT TO :dbAlias USER :user USING :pswd;
    EMB_SQL_CHECK("CONNECT");
  }
  printf("  Connected to '%s' database.\n", dbAlias);

  return 0;
} /* DbConn */

int DbDisconn(char *dbAlias)
{
  struct sqlca sqlca;
  int rc = 0;

  printf("\n  Disconnecting from '%s' database...\n", dbAlias);

  /* Commit all non-committed transactions to release database locks */
  EXEC SQL COMMIT;
  EMB_SQL_CHECK("COMMIT");

  EXEC SQL CONNECT RESET;
  EMB_SQL_CHECK("CONNECT RESET");

  printf("  Disconnected from '%s' database.\n", dbAlias);

  return 0;
} /* DbDisconn */

