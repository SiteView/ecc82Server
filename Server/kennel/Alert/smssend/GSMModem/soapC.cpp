/* soapC.cpp
   Generated by gSOAP 2.7.12 from GSM.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "stdafx.h"
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.12 2010-03-26 07:29:30 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoOutIDResponse:
		return soap_in_PointerTo_ns1__SendNoteInfoOutIDResponse(soap, NULL, NULL, "ns1:SendNoteInfoOutIDResponse");
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoOutID:
		return soap_in_PointerTo_ns1__SendNoteInfoOutID(soap, NULL, NULL, "ns1:SendNoteInfoOutID");
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoForUserOutIDResponse:
		return soap_in_PointerTo_ns1__SendNoteInfoForUserOutIDResponse(soap, NULL, NULL, "ns1:SendNoteInfoForUserOutIDResponse");
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoForUserOutID:
		return soap_in_PointerTo_ns1__SendNoteInfoForUserOutID(soap, NULL, NULL, "ns1:SendNoteInfoForUserOutID");
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoResponse:
		return soap_in_PointerTo_ns1__SendNoteInfoResponse(soap, NULL, NULL, "ns1:SendNoteInfoResponse");
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfo:
		return soap_in_PointerTo_ns1__SendNoteInfo(soap, NULL, NULL, "ns1:SendNoteInfo");
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoForUserResponse:
		return soap_in_PointerTo_ns1__SendNoteInfoForUserResponse(soap, NULL, NULL, "ns1:SendNoteInfoForUserResponse");
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoForUser:
		return soap_in_PointerTo_ns1__SendNoteInfoForUser(soap, NULL, NULL, "ns1:SendNoteInfoForUser");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:SendNoteInfoOutIDResponse"))
		{	*type = SOAP_TYPE__ns1__SendNoteInfoOutIDResponse;
			return soap_in__ns1__SendNoteInfoOutIDResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SendNoteInfoOutID"))
		{	*type = SOAP_TYPE__ns1__SendNoteInfoOutID;
			return soap_in__ns1__SendNoteInfoOutID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SendNoteInfoForUserOutIDResponse"))
		{	*type = SOAP_TYPE__ns1__SendNoteInfoForUserOutIDResponse;
			return soap_in__ns1__SendNoteInfoForUserOutIDResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SendNoteInfoForUserOutID"))
		{	*type = SOAP_TYPE__ns1__SendNoteInfoForUserOutID;
			return soap_in__ns1__SendNoteInfoForUserOutID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SendNoteInfoResponse"))
		{	*type = SOAP_TYPE__ns1__SendNoteInfoResponse;
			return soap_in__ns1__SendNoteInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SendNoteInfo"))
		{	*type = SOAP_TYPE__ns1__SendNoteInfo;
			return soap_in__ns1__SendNoteInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SendNoteInfoForUserResponse"))
		{	*type = SOAP_TYPE__ns1__SendNoteInfoForUserResponse;
			return soap_in__ns1__SendNoteInfoForUserResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SendNoteInfoForUser"))
		{	*type = SOAP_TYPE__ns1__SendNoteInfoForUser;
			return soap_in__ns1__SendNoteInfoForUser(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__SendNoteInfoOutIDResponse:
		return ((_ns1__SendNoteInfoOutIDResponse *)ptr)->soap_out(soap, "ns1:SendNoteInfoOutIDResponse", id, NULL);
	case SOAP_TYPE__ns1__SendNoteInfoOutID:
		return ((_ns1__SendNoteInfoOutID *)ptr)->soap_out(soap, "ns1:SendNoteInfoOutID", id, NULL);
	case SOAP_TYPE__ns1__SendNoteInfoForUserOutIDResponse:
		return ((_ns1__SendNoteInfoForUserOutIDResponse *)ptr)->soap_out(soap, "ns1:SendNoteInfoForUserOutIDResponse", id, NULL);
	case SOAP_TYPE__ns1__SendNoteInfoForUserOutID:
		return ((_ns1__SendNoteInfoForUserOutID *)ptr)->soap_out(soap, "ns1:SendNoteInfoForUserOutID", id, NULL);
	case SOAP_TYPE__ns1__SendNoteInfoResponse:
		return ((_ns1__SendNoteInfoResponse *)ptr)->soap_out(soap, "ns1:SendNoteInfoResponse", id, NULL);
	case SOAP_TYPE__ns1__SendNoteInfo:
		return ((_ns1__SendNoteInfo *)ptr)->soap_out(soap, "ns1:SendNoteInfo", id, NULL);
	case SOAP_TYPE__ns1__SendNoteInfoForUserResponse:
		return ((_ns1__SendNoteInfoForUserResponse *)ptr)->soap_out(soap, "ns1:SendNoteInfoForUserResponse", id, NULL);
	case SOAP_TYPE__ns1__SendNoteInfoForUser:
		return ((_ns1__SendNoteInfoForUser *)ptr)->soap_out(soap, "ns1:SendNoteInfoForUser", id, NULL);
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoOutIDResponse:
		return soap_out_PointerTo_ns1__SendNoteInfoOutIDResponse(soap, tag, id, (_ns1__SendNoteInfoOutIDResponse *const*)ptr, "ns1:SendNoteInfoOutIDResponse");
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoOutID:
		return soap_out_PointerTo_ns1__SendNoteInfoOutID(soap, tag, id, (_ns1__SendNoteInfoOutID *const*)ptr, "ns1:SendNoteInfoOutID");
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoForUserOutIDResponse:
		return soap_out_PointerTo_ns1__SendNoteInfoForUserOutIDResponse(soap, tag, id, (_ns1__SendNoteInfoForUserOutIDResponse *const*)ptr, "ns1:SendNoteInfoForUserOutIDResponse");
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoForUserOutID:
		return soap_out_PointerTo_ns1__SendNoteInfoForUserOutID(soap, tag, id, (_ns1__SendNoteInfoForUserOutID *const*)ptr, "ns1:SendNoteInfoForUserOutID");
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoResponse:
		return soap_out_PointerTo_ns1__SendNoteInfoResponse(soap, tag, id, (_ns1__SendNoteInfoResponse *const*)ptr, "ns1:SendNoteInfoResponse");
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfo:
		return soap_out_PointerTo_ns1__SendNoteInfo(soap, tag, id, (_ns1__SendNoteInfo *const*)ptr, "ns1:SendNoteInfo");
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoForUserResponse:
		return soap_out_PointerTo_ns1__SendNoteInfoForUserResponse(soap, tag, id, (_ns1__SendNoteInfoForUserResponse *const*)ptr, "ns1:SendNoteInfoForUserResponse");
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoForUser:
		return soap_out_PointerTo_ns1__SendNoteInfoForUser(soap, tag, id, (_ns1__SendNoteInfoForUser *const*)ptr, "ns1:SendNoteInfoForUser");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__SendNoteInfoOutIDResponse:
		((_ns1__SendNoteInfoOutIDResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SendNoteInfoOutID:
		((_ns1__SendNoteInfoOutID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SendNoteInfoForUserOutIDResponse:
		((_ns1__SendNoteInfoForUserOutIDResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SendNoteInfoForUserOutID:
		((_ns1__SendNoteInfoForUserOutID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SendNoteInfoResponse:
		((_ns1__SendNoteInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SendNoteInfo:
		((_ns1__SendNoteInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SendNoteInfoForUserResponse:
		((_ns1__SendNoteInfoForUserResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SendNoteInfoForUser:
		((_ns1__SendNoteInfoForUser *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns3__SendNoteInfoOutID:
		soap_serialize___ns3__SendNoteInfoOutID(soap, (const struct __ns3__SendNoteInfoOutID *)ptr);
		break;
	case SOAP_TYPE___ns3__SendNoteInfoForUserOutID:
		soap_serialize___ns3__SendNoteInfoForUserOutID(soap, (const struct __ns3__SendNoteInfoForUserOutID *)ptr);
		break;
	case SOAP_TYPE___ns3__SendNoteInfo:
		soap_serialize___ns3__SendNoteInfo(soap, (const struct __ns3__SendNoteInfo *)ptr);
		break;
	case SOAP_TYPE___ns3__SendNoteInfoForUser:
		soap_serialize___ns3__SendNoteInfoForUser(soap, (const struct __ns3__SendNoteInfoForUser *)ptr);
		break;
	case SOAP_TYPE___ns2__SendNoteInfoOutID:
		soap_serialize___ns2__SendNoteInfoOutID(soap, (const struct __ns2__SendNoteInfoOutID *)ptr);
		break;
	case SOAP_TYPE___ns2__SendNoteInfoForUserOutID:
		soap_serialize___ns2__SendNoteInfoForUserOutID(soap, (const struct __ns2__SendNoteInfoForUserOutID *)ptr);
		break;
	case SOAP_TYPE___ns2__SendNoteInfo:
		soap_serialize___ns2__SendNoteInfo(soap, (const struct __ns2__SendNoteInfo *)ptr);
		break;
	case SOAP_TYPE___ns2__SendNoteInfoForUser:
		soap_serialize___ns2__SendNoteInfoForUser(soap, (const struct __ns2__SendNoteInfoForUser *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoOutIDResponse:
		soap_serialize_PointerTo_ns1__SendNoteInfoOutIDResponse(soap, (_ns1__SendNoteInfoOutIDResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoOutID:
		soap_serialize_PointerTo_ns1__SendNoteInfoOutID(soap, (_ns1__SendNoteInfoOutID *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoForUserOutIDResponse:
		soap_serialize_PointerTo_ns1__SendNoteInfoForUserOutIDResponse(soap, (_ns1__SendNoteInfoForUserOutIDResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoForUserOutID:
		soap_serialize_PointerTo_ns1__SendNoteInfoForUserOutID(soap, (_ns1__SendNoteInfoForUserOutID *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoResponse:
		soap_serialize_PointerTo_ns1__SendNoteInfoResponse(soap, (_ns1__SendNoteInfoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfo:
		soap_serialize_PointerTo_ns1__SendNoteInfo(soap, (_ns1__SendNoteInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoForUserResponse:
		soap_serialize_PointerTo_ns1__SendNoteInfoForUserResponse(soap, (_ns1__SendNoteInfoForUserResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SendNoteInfoForUser:
		soap_serialize_PointerTo_ns1__SendNoteInfoForUser(soap, (_ns1__SendNoteInfoForUser *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SendNoteInfoForUser:
		return (void*)soap_instantiate__ns1__SendNoteInfoForUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SendNoteInfoForUserResponse:
		return (void*)soap_instantiate__ns1__SendNoteInfoForUserResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SendNoteInfo:
		return (void*)soap_instantiate__ns1__SendNoteInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SendNoteInfoResponse:
		return (void*)soap_instantiate__ns1__SendNoteInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SendNoteInfoForUserOutID:
		return (void*)soap_instantiate__ns1__SendNoteInfoForUserOutID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SendNoteInfoForUserOutIDResponse:
		return (void*)soap_instantiate__ns1__SendNoteInfoForUserOutIDResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SendNoteInfoOutID:
		return (void*)soap_instantiate__ns1__SendNoteInfoOutID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SendNoteInfoOutIDResponse:
		return (void*)soap_instantiate__ns1__SendNoteInfoOutIDResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__SendNoteInfoForUser:
		return (void*)soap_instantiate___ns2__SendNoteInfoForUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__SendNoteInfo:
		return (void*)soap_instantiate___ns2__SendNoteInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__SendNoteInfoForUserOutID:
		return (void*)soap_instantiate___ns2__SendNoteInfoForUserOutID(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__SendNoteInfoOutID:
		return (void*)soap_instantiate___ns2__SendNoteInfoOutID(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__SendNoteInfoForUser:
		return (void*)soap_instantiate___ns3__SendNoteInfoForUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__SendNoteInfo:
		return (void*)soap_instantiate___ns3__SendNoteInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__SendNoteInfoForUserOutID:
		return (void*)soap_instantiate___ns3__SendNoteInfoForUserOutID(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__SendNoteInfoOutID:
		return (void*)soap_instantiate___ns3__SendNoteInfoOutID(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE__ns1__SendNoteInfoForUser:
		if (p->size < 0)
			delete (_ns1__SendNoteInfoForUser*)p->ptr;
		else
			delete[] (_ns1__SendNoteInfoForUser*)p->ptr;
		break;
	case SOAP_TYPE__ns1__SendNoteInfoForUserResponse:
		if (p->size < 0)
			delete (_ns1__SendNoteInfoForUserResponse*)p->ptr;
		else
			delete[] (_ns1__SendNoteInfoForUserResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__SendNoteInfo:
		if (p->size < 0)
			delete (_ns1__SendNoteInfo*)p->ptr;
		else
			delete[] (_ns1__SendNoteInfo*)p->ptr;
		break;
	case SOAP_TYPE__ns1__SendNoteInfoResponse:
		if (p->size < 0)
			delete (_ns1__SendNoteInfoResponse*)p->ptr;
		else
			delete[] (_ns1__SendNoteInfoResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__SendNoteInfoForUserOutID:
		if (p->size < 0)
			delete (_ns1__SendNoteInfoForUserOutID*)p->ptr;
		else
			delete[] (_ns1__SendNoteInfoForUserOutID*)p->ptr;
		break;
	case SOAP_TYPE__ns1__SendNoteInfoForUserOutIDResponse:
		if (p->size < 0)
			delete (_ns1__SendNoteInfoForUserOutIDResponse*)p->ptr;
		else
			delete[] (_ns1__SendNoteInfoForUserOutIDResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__SendNoteInfoOutID:
		if (p->size < 0)
			delete (_ns1__SendNoteInfoOutID*)p->ptr;
		else
			delete[] (_ns1__SendNoteInfoOutID*)p->ptr;
		break;
	case SOAP_TYPE__ns1__SendNoteInfoOutIDResponse:
		if (p->size < 0)
			delete (_ns1__SendNoteInfoOutIDResponse*)p->ptr;
		else
			delete[] (_ns1__SendNoteInfoOutIDResponse*)p->ptr;
		break;
	case SOAP_TYPE___ns2__SendNoteInfoForUser:
		if (p->size < 0)
			delete (struct __ns2__SendNoteInfoForUser*)p->ptr;
		else
			delete[] (struct __ns2__SendNoteInfoForUser*)p->ptr;
		break;
	case SOAP_TYPE___ns2__SendNoteInfo:
		if (p->size < 0)
			delete (struct __ns2__SendNoteInfo*)p->ptr;
		else
			delete[] (struct __ns2__SendNoteInfo*)p->ptr;
		break;
	case SOAP_TYPE___ns2__SendNoteInfoForUserOutID:
		if (p->size < 0)
			delete (struct __ns2__SendNoteInfoForUserOutID*)p->ptr;
		else
			delete[] (struct __ns2__SendNoteInfoForUserOutID*)p->ptr;
		break;
	case SOAP_TYPE___ns2__SendNoteInfoOutID:
		if (p->size < 0)
			delete (struct __ns2__SendNoteInfoOutID*)p->ptr;
		else
			delete[] (struct __ns2__SendNoteInfoOutID*)p->ptr;
		break;
	case SOAP_TYPE___ns3__SendNoteInfoForUser:
		if (p->size < 0)
			delete (struct __ns3__SendNoteInfoForUser*)p->ptr;
		else
			delete[] (struct __ns3__SendNoteInfoForUser*)p->ptr;
		break;
	case SOAP_TYPE___ns3__SendNoteInfo:
		if (p->size < 0)
			delete (struct __ns3__SendNoteInfo*)p->ptr;
		else
			delete[] (struct __ns3__SendNoteInfo*)p->ptr;
		break;
	case SOAP_TYPE___ns3__SendNoteInfoForUserOutID:
		if (p->size < 0)
			delete (struct __ns3__SendNoteInfoForUserOutID*)p->ptr;
		else
			delete[] (struct __ns3__SendNoteInfoForUserOutID*)p->ptr;
		break;
	case SOAP_TYPE___ns3__SendNoteInfoOutID:
		if (p->size < 0)
			delete (struct __ns3__SendNoteInfoOutID*)p->ptr;
		else
			delete[] (struct __ns3__SendNoteInfoOutID*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _ns1__SendNoteInfoOutIDResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__SendNoteInfoOutIDResponse::SendNoteInfoOutIDResult);
	this->_ns1__SendNoteInfoOutIDResponse::id = NULL;
	/* transient soap skipped */
}

void _ns1__SendNoteInfoOutIDResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfoOutIDResponse::id);
	/* transient soap skipped */
}

int _ns1__SendNoteInfoOutIDResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SendNoteInfoOutIDResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__SendNoteInfoOutIDResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SendNoteInfoOutIDResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendNoteInfoOutIDResponse(struct soap *soap, const char *tag, int id, const _ns1__SendNoteInfoOutIDResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SendNoteInfoOutIDResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:SendNoteInfoOutIDResult");
	if (soap_out_bool(soap, "ns1:SendNoteInfoOutIDResult", -1, &(a->_ns1__SendNoteInfoOutIDResponse::SendNoteInfoOutIDResult), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:id", -1, &(a->_ns1__SendNoteInfoOutIDResponse::id), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SendNoteInfoOutIDResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SendNoteInfoOutIDResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoOutIDResponse * SOAP_FMAC4 soap_get__ns1__SendNoteInfoOutIDResponse(struct soap *soap, _ns1__SendNoteInfoOutIDResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SendNoteInfoOutIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__SendNoteInfoOutIDResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SendNoteInfoOutIDResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoOutIDResponse * SOAP_FMAC4 soap_in__ns1__SendNoteInfoOutIDResponse(struct soap *soap, const char *tag, _ns1__SendNoteInfoOutIDResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SendNoteInfoOutIDResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SendNoteInfoOutIDResponse, sizeof(_ns1__SendNoteInfoOutIDResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SendNoteInfoOutIDResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SendNoteInfoOutIDResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SendNoteInfoOutIDResult1 = 1;
	size_t soap_flag_id1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SendNoteInfoOutIDResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:SendNoteInfoOutIDResult", &(a->_ns1__SendNoteInfoOutIDResponse::SendNoteInfoOutIDResult), "xsd:boolean"))
				{	soap_flag_SendNoteInfoOutIDResult1--;
					continue;
				}
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:id", &(a->_ns1__SendNoteInfoOutIDResponse::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SendNoteInfoOutIDResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SendNoteInfoOutIDResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SendNoteInfoOutIDResponse, 0, sizeof(_ns1__SendNoteInfoOutIDResponse), 0, soap_copy__ns1__SendNoteInfoOutIDResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SendNoteInfoOutIDResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__SendNoteInfoOutIDResponse * SOAP_FMAC6 soap_new__ns1__SendNoteInfoOutIDResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__SendNoteInfoOutIDResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__SendNoteInfoOutIDResponse(struct soap *soap, _ns1__SendNoteInfoOutIDResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__SendNoteInfoOutIDResponse * SOAP_FMAC4 soap_instantiate__ns1__SendNoteInfoOutIDResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SendNoteInfoOutIDResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SendNoteInfoOutIDResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__SendNoteInfoOutIDResponse;
		if (size)
			*size = sizeof(_ns1__SendNoteInfoOutIDResponse);
		((_ns1__SendNoteInfoOutIDResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__SendNoteInfoOutIDResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SendNoteInfoOutIDResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SendNoteInfoOutIDResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SendNoteInfoOutIDResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SendNoteInfoOutIDResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SendNoteInfoOutIDResponse %p -> %p\n", q, p));
	*(_ns1__SendNoteInfoOutIDResponse*)p = *(_ns1__SendNoteInfoOutIDResponse*)q;
}

void _ns1__SendNoteInfoOutID::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SendNoteInfoOutID::phoneNo = NULL;
	this->_ns1__SendNoteInfoOutID::notinfo = NULL;
	this->_ns1__SendNoteInfoOutID::vFlag = NULL;
	this->_ns1__SendNoteInfoOutID::destineDateTime = NULL;
	/* transient soap skipped */
}

void _ns1__SendNoteInfoOutID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfoOutID::phoneNo);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfoOutID::notinfo);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfoOutID::vFlag);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfoOutID::destineDateTime);
	/* transient soap skipped */
}

int _ns1__SendNoteInfoOutID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SendNoteInfoOutID);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__SendNoteInfoOutID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SendNoteInfoOutID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendNoteInfoOutID(struct soap *soap, const char *tag, int id, const _ns1__SendNoteInfoOutID *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SendNoteInfoOutID), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:phoneNo", -1, &(a->_ns1__SendNoteInfoOutID::phoneNo), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:notinfo", -1, &(a->_ns1__SendNoteInfoOutID::notinfo), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:vFlag", -1, &(a->_ns1__SendNoteInfoOutID::vFlag), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:destineDateTime", -1, &(a->_ns1__SendNoteInfoOutID::destineDateTime), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SendNoteInfoOutID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SendNoteInfoOutID(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoOutID * SOAP_FMAC4 soap_get__ns1__SendNoteInfoOutID(struct soap *soap, _ns1__SendNoteInfoOutID *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SendNoteInfoOutID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__SendNoteInfoOutID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SendNoteInfoOutID(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoOutID * SOAP_FMAC4 soap_in__ns1__SendNoteInfoOutID(struct soap *soap, const char *tag, _ns1__SendNoteInfoOutID *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SendNoteInfoOutID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SendNoteInfoOutID, sizeof(_ns1__SendNoteInfoOutID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SendNoteInfoOutID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SendNoteInfoOutID *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_phoneNo1 = 1;
	size_t soap_flag_notinfo1 = 1;
	size_t soap_flag_vFlag1 = 1;
	size_t soap_flag_destineDateTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_phoneNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:phoneNo", &(a->_ns1__SendNoteInfoOutID::phoneNo), "xsd:string"))
				{	soap_flag_phoneNo1--;
					continue;
				}
			if (soap_flag_notinfo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:notinfo", &(a->_ns1__SendNoteInfoOutID::notinfo), "xsd:string"))
				{	soap_flag_notinfo1--;
					continue;
				}
			if (soap_flag_vFlag1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:vFlag", &(a->_ns1__SendNoteInfoOutID::vFlag), "xsd:string"))
				{	soap_flag_vFlag1--;
					continue;
				}
			if (soap_flag_destineDateTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:destineDateTime", &(a->_ns1__SendNoteInfoOutID::destineDateTime), "xsd:string"))
				{	soap_flag_destineDateTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SendNoteInfoOutID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SendNoteInfoOutID, 0, sizeof(_ns1__SendNoteInfoOutID), 0, soap_copy__ns1__SendNoteInfoOutID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__SendNoteInfoOutID * SOAP_FMAC6 soap_new__ns1__SendNoteInfoOutID(struct soap *soap, int n)
{	return soap_instantiate__ns1__SendNoteInfoOutID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__SendNoteInfoOutID(struct soap *soap, _ns1__SendNoteInfoOutID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__SendNoteInfoOutID * SOAP_FMAC4 soap_instantiate__ns1__SendNoteInfoOutID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SendNoteInfoOutID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SendNoteInfoOutID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__SendNoteInfoOutID;
		if (size)
			*size = sizeof(_ns1__SendNoteInfoOutID);
		((_ns1__SendNoteInfoOutID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__SendNoteInfoOutID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SendNoteInfoOutID);
		for (int i = 0; i < n; i++)
			((_ns1__SendNoteInfoOutID*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SendNoteInfoOutID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SendNoteInfoOutID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SendNoteInfoOutID %p -> %p\n", q, p));
	*(_ns1__SendNoteInfoOutID*)p = *(_ns1__SendNoteInfoOutID*)q;
}

void _ns1__SendNoteInfoForUserOutIDResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__SendNoteInfoForUserOutIDResponse::SendNoteInfoForUserOutIDResult);
	this->_ns1__SendNoteInfoForUserOutIDResponse::id = NULL;
	/* transient soap skipped */
}

void _ns1__SendNoteInfoForUserOutIDResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfoForUserOutIDResponse::id);
	/* transient soap skipped */
}

int _ns1__SendNoteInfoForUserOutIDResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SendNoteInfoForUserOutIDResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__SendNoteInfoForUserOutIDResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SendNoteInfoForUserOutIDResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendNoteInfoForUserOutIDResponse(struct soap *soap, const char *tag, int id, const _ns1__SendNoteInfoForUserOutIDResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SendNoteInfoForUserOutIDResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:SendNoteInfoForUserOutIDResult");
	if (soap_out_bool(soap, "ns1:SendNoteInfoForUserOutIDResult", -1, &(a->_ns1__SendNoteInfoForUserOutIDResponse::SendNoteInfoForUserOutIDResult), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:id", -1, &(a->_ns1__SendNoteInfoForUserOutIDResponse::id), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SendNoteInfoForUserOutIDResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SendNoteInfoForUserOutIDResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoForUserOutIDResponse * SOAP_FMAC4 soap_get__ns1__SendNoteInfoForUserOutIDResponse(struct soap *soap, _ns1__SendNoteInfoForUserOutIDResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SendNoteInfoForUserOutIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__SendNoteInfoForUserOutIDResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SendNoteInfoForUserOutIDResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoForUserOutIDResponse * SOAP_FMAC4 soap_in__ns1__SendNoteInfoForUserOutIDResponse(struct soap *soap, const char *tag, _ns1__SendNoteInfoForUserOutIDResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SendNoteInfoForUserOutIDResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SendNoteInfoForUserOutIDResponse, sizeof(_ns1__SendNoteInfoForUserOutIDResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SendNoteInfoForUserOutIDResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SendNoteInfoForUserOutIDResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SendNoteInfoForUserOutIDResult1 = 1;
	size_t soap_flag_id1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SendNoteInfoForUserOutIDResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:SendNoteInfoForUserOutIDResult", &(a->_ns1__SendNoteInfoForUserOutIDResponse::SendNoteInfoForUserOutIDResult), "xsd:boolean"))
				{	soap_flag_SendNoteInfoForUserOutIDResult1--;
					continue;
				}
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:id", &(a->_ns1__SendNoteInfoForUserOutIDResponse::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SendNoteInfoForUserOutIDResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SendNoteInfoForUserOutIDResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SendNoteInfoForUserOutIDResponse, 0, sizeof(_ns1__SendNoteInfoForUserOutIDResponse), 0, soap_copy__ns1__SendNoteInfoForUserOutIDResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SendNoteInfoForUserOutIDResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__SendNoteInfoForUserOutIDResponse * SOAP_FMAC6 soap_new__ns1__SendNoteInfoForUserOutIDResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__SendNoteInfoForUserOutIDResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__SendNoteInfoForUserOutIDResponse(struct soap *soap, _ns1__SendNoteInfoForUserOutIDResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__SendNoteInfoForUserOutIDResponse * SOAP_FMAC4 soap_instantiate__ns1__SendNoteInfoForUserOutIDResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SendNoteInfoForUserOutIDResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SendNoteInfoForUserOutIDResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__SendNoteInfoForUserOutIDResponse;
		if (size)
			*size = sizeof(_ns1__SendNoteInfoForUserOutIDResponse);
		((_ns1__SendNoteInfoForUserOutIDResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__SendNoteInfoForUserOutIDResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SendNoteInfoForUserOutIDResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SendNoteInfoForUserOutIDResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SendNoteInfoForUserOutIDResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SendNoteInfoForUserOutIDResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SendNoteInfoForUserOutIDResponse %p -> %p\n", q, p));
	*(_ns1__SendNoteInfoForUserOutIDResponse*)p = *(_ns1__SendNoteInfoForUserOutIDResponse*)q;
}

void _ns1__SendNoteInfoForUserOutID::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SendNoteInfoForUserOutID::phoneNo = NULL;
	this->_ns1__SendNoteInfoForUserOutID::notinfo = NULL;
	this->_ns1__SendNoteInfoForUserOutID::vFlag = NULL;
	this->_ns1__SendNoteInfoForUserOutID::destineDateTime = NULL;
	soap_default_bool(soap, &this->_ns1__SendNoteInfoForUserOutID::needNCallBack);
	/* transient soap skipped */
}

void _ns1__SendNoteInfoForUserOutID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfoForUserOutID::phoneNo);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfoForUserOutID::notinfo);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfoForUserOutID::vFlag);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfoForUserOutID::destineDateTime);
	/* transient soap skipped */
}

int _ns1__SendNoteInfoForUserOutID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SendNoteInfoForUserOutID);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__SendNoteInfoForUserOutID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SendNoteInfoForUserOutID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendNoteInfoForUserOutID(struct soap *soap, const char *tag, int id, const _ns1__SendNoteInfoForUserOutID *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SendNoteInfoForUserOutID), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:phoneNo", -1, &(a->_ns1__SendNoteInfoForUserOutID::phoneNo), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:notinfo", -1, &(a->_ns1__SendNoteInfoForUserOutID::notinfo), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:vFlag", -1, &(a->_ns1__SendNoteInfoForUserOutID::vFlag), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:destineDateTime", -1, &(a->_ns1__SendNoteInfoForUserOutID::destineDateTime), ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:needNCallBack", -1, &(a->_ns1__SendNoteInfoForUserOutID::needNCallBack), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SendNoteInfoForUserOutID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SendNoteInfoForUserOutID(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoForUserOutID * SOAP_FMAC4 soap_get__ns1__SendNoteInfoForUserOutID(struct soap *soap, _ns1__SendNoteInfoForUserOutID *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SendNoteInfoForUserOutID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__SendNoteInfoForUserOutID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SendNoteInfoForUserOutID(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoForUserOutID * SOAP_FMAC4 soap_in__ns1__SendNoteInfoForUserOutID(struct soap *soap, const char *tag, _ns1__SendNoteInfoForUserOutID *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SendNoteInfoForUserOutID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SendNoteInfoForUserOutID, sizeof(_ns1__SendNoteInfoForUserOutID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SendNoteInfoForUserOutID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SendNoteInfoForUserOutID *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_phoneNo1 = 1;
	size_t soap_flag_notinfo1 = 1;
	size_t soap_flag_vFlag1 = 1;
	size_t soap_flag_destineDateTime1 = 1;
	size_t soap_flag_needNCallBack1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_phoneNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:phoneNo", &(a->_ns1__SendNoteInfoForUserOutID::phoneNo), "xsd:string"))
				{	soap_flag_phoneNo1--;
					continue;
				}
			if (soap_flag_notinfo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:notinfo", &(a->_ns1__SendNoteInfoForUserOutID::notinfo), "xsd:string"))
				{	soap_flag_notinfo1--;
					continue;
				}
			if (soap_flag_vFlag1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:vFlag", &(a->_ns1__SendNoteInfoForUserOutID::vFlag), "xsd:string"))
				{	soap_flag_vFlag1--;
					continue;
				}
			if (soap_flag_destineDateTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:destineDateTime", &(a->_ns1__SendNoteInfoForUserOutID::destineDateTime), "xsd:string"))
				{	soap_flag_destineDateTime1--;
					continue;
				}
			if (soap_flag_needNCallBack1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:needNCallBack", &(a->_ns1__SendNoteInfoForUserOutID::needNCallBack), "xsd:boolean"))
				{	soap_flag_needNCallBack1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SendNoteInfoForUserOutID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SendNoteInfoForUserOutID, 0, sizeof(_ns1__SendNoteInfoForUserOutID), 0, soap_copy__ns1__SendNoteInfoForUserOutID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_needNCallBack1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__SendNoteInfoForUserOutID * SOAP_FMAC6 soap_new__ns1__SendNoteInfoForUserOutID(struct soap *soap, int n)
{	return soap_instantiate__ns1__SendNoteInfoForUserOutID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__SendNoteInfoForUserOutID(struct soap *soap, _ns1__SendNoteInfoForUserOutID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__SendNoteInfoForUserOutID * SOAP_FMAC4 soap_instantiate__ns1__SendNoteInfoForUserOutID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SendNoteInfoForUserOutID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SendNoteInfoForUserOutID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__SendNoteInfoForUserOutID;
		if (size)
			*size = sizeof(_ns1__SendNoteInfoForUserOutID);
		((_ns1__SendNoteInfoForUserOutID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__SendNoteInfoForUserOutID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SendNoteInfoForUserOutID);
		for (int i = 0; i < n; i++)
			((_ns1__SendNoteInfoForUserOutID*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SendNoteInfoForUserOutID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SendNoteInfoForUserOutID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SendNoteInfoForUserOutID %p -> %p\n", q, p));
	*(_ns1__SendNoteInfoForUserOutID*)p = *(_ns1__SendNoteInfoForUserOutID*)q;
}

void _ns1__SendNoteInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__SendNoteInfoResponse::SendNoteInfoResult);
	/* transient soap skipped */
}

void _ns1__SendNoteInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__SendNoteInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SendNoteInfoResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__SendNoteInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SendNoteInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendNoteInfoResponse(struct soap *soap, const char *tag, int id, const _ns1__SendNoteInfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SendNoteInfoResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:SendNoteInfoResult");
	if (soap_out_bool(soap, "ns1:SendNoteInfoResult", -1, &(a->_ns1__SendNoteInfoResponse::SendNoteInfoResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SendNoteInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SendNoteInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoResponse * SOAP_FMAC4 soap_get__ns1__SendNoteInfoResponse(struct soap *soap, _ns1__SendNoteInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SendNoteInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__SendNoteInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SendNoteInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoResponse * SOAP_FMAC4 soap_in__ns1__SendNoteInfoResponse(struct soap *soap, const char *tag, _ns1__SendNoteInfoResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SendNoteInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SendNoteInfoResponse, sizeof(_ns1__SendNoteInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SendNoteInfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SendNoteInfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SendNoteInfoResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SendNoteInfoResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:SendNoteInfoResult", &(a->_ns1__SendNoteInfoResponse::SendNoteInfoResult), "xsd:boolean"))
				{	soap_flag_SendNoteInfoResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SendNoteInfoResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SendNoteInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SendNoteInfoResponse, 0, sizeof(_ns1__SendNoteInfoResponse), 0, soap_copy__ns1__SendNoteInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SendNoteInfoResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__SendNoteInfoResponse * SOAP_FMAC6 soap_new__ns1__SendNoteInfoResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__SendNoteInfoResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__SendNoteInfoResponse(struct soap *soap, _ns1__SendNoteInfoResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__SendNoteInfoResponse * SOAP_FMAC4 soap_instantiate__ns1__SendNoteInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SendNoteInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SendNoteInfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__SendNoteInfoResponse;
		if (size)
			*size = sizeof(_ns1__SendNoteInfoResponse);
		((_ns1__SendNoteInfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__SendNoteInfoResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SendNoteInfoResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SendNoteInfoResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SendNoteInfoResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SendNoteInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SendNoteInfoResponse %p -> %p\n", q, p));
	*(_ns1__SendNoteInfoResponse*)p = *(_ns1__SendNoteInfoResponse*)q;
}

void _ns1__SendNoteInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SendNoteInfo::phoneNo = NULL;
	this->_ns1__SendNoteInfo::notinfo = NULL;
	this->_ns1__SendNoteInfo::vFlag = NULL;
	this->_ns1__SendNoteInfo::destineDateTime = NULL;
	/* transient soap skipped */
}

void _ns1__SendNoteInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfo::phoneNo);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfo::notinfo);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfo::vFlag);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfo::destineDateTime);
	/* transient soap skipped */
}

int _ns1__SendNoteInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SendNoteInfo);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__SendNoteInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SendNoteInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendNoteInfo(struct soap *soap, const char *tag, int id, const _ns1__SendNoteInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SendNoteInfo), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:phoneNo", -1, &(a->_ns1__SendNoteInfo::phoneNo), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:notinfo", -1, &(a->_ns1__SendNoteInfo::notinfo), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:vFlag", -1, &(a->_ns1__SendNoteInfo::vFlag), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:destineDateTime", -1, &(a->_ns1__SendNoteInfo::destineDateTime), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SendNoteInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SendNoteInfo(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SendNoteInfo * SOAP_FMAC4 soap_get__ns1__SendNoteInfo(struct soap *soap, _ns1__SendNoteInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SendNoteInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__SendNoteInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SendNoteInfo(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SendNoteInfo * SOAP_FMAC4 soap_in__ns1__SendNoteInfo(struct soap *soap, const char *tag, _ns1__SendNoteInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SendNoteInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SendNoteInfo, sizeof(_ns1__SendNoteInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SendNoteInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SendNoteInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_phoneNo1 = 1;
	size_t soap_flag_notinfo1 = 1;
	size_t soap_flag_vFlag1 = 1;
	size_t soap_flag_destineDateTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_phoneNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:phoneNo", &(a->_ns1__SendNoteInfo::phoneNo), "xsd:string"))
				{	soap_flag_phoneNo1--;
					continue;
				}
			if (soap_flag_notinfo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:notinfo", &(a->_ns1__SendNoteInfo::notinfo), "xsd:string"))
				{	soap_flag_notinfo1--;
					continue;
				}
			if (soap_flag_vFlag1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:vFlag", &(a->_ns1__SendNoteInfo::vFlag), "xsd:string"))
				{	soap_flag_vFlag1--;
					continue;
				}
			if (soap_flag_destineDateTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:destineDateTime", &(a->_ns1__SendNoteInfo::destineDateTime), "xsd:string"))
				{	soap_flag_destineDateTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SendNoteInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SendNoteInfo, 0, sizeof(_ns1__SendNoteInfo), 0, soap_copy__ns1__SendNoteInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__SendNoteInfo * SOAP_FMAC6 soap_new__ns1__SendNoteInfo(struct soap *soap, int n)
{	return soap_instantiate__ns1__SendNoteInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__SendNoteInfo(struct soap *soap, _ns1__SendNoteInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__SendNoteInfo * SOAP_FMAC4 soap_instantiate__ns1__SendNoteInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SendNoteInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SendNoteInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__SendNoteInfo;
		if (size)
			*size = sizeof(_ns1__SendNoteInfo);
		((_ns1__SendNoteInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__SendNoteInfo[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SendNoteInfo);
		for (int i = 0; i < n; i++)
			((_ns1__SendNoteInfo*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SendNoteInfo*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SendNoteInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SendNoteInfo %p -> %p\n", q, p));
	*(_ns1__SendNoteInfo*)p = *(_ns1__SendNoteInfo*)q;
}

void _ns1__SendNoteInfoForUserResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__SendNoteInfoForUserResponse::SendNoteInfoForUserResult);
	/* transient soap skipped */
}

void _ns1__SendNoteInfoForUserResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__SendNoteInfoForUserResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SendNoteInfoForUserResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__SendNoteInfoForUserResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SendNoteInfoForUserResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendNoteInfoForUserResponse(struct soap *soap, const char *tag, int id, const _ns1__SendNoteInfoForUserResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SendNoteInfoForUserResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:SendNoteInfoForUserResult");
	if (soap_out_bool(soap, "ns1:SendNoteInfoForUserResult", -1, &(a->_ns1__SendNoteInfoForUserResponse::SendNoteInfoForUserResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SendNoteInfoForUserResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SendNoteInfoForUserResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoForUserResponse * SOAP_FMAC4 soap_get__ns1__SendNoteInfoForUserResponse(struct soap *soap, _ns1__SendNoteInfoForUserResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SendNoteInfoForUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__SendNoteInfoForUserResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SendNoteInfoForUserResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoForUserResponse * SOAP_FMAC4 soap_in__ns1__SendNoteInfoForUserResponse(struct soap *soap, const char *tag, _ns1__SendNoteInfoForUserResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SendNoteInfoForUserResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SendNoteInfoForUserResponse, sizeof(_ns1__SendNoteInfoForUserResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SendNoteInfoForUserResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SendNoteInfoForUserResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SendNoteInfoForUserResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SendNoteInfoForUserResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:SendNoteInfoForUserResult", &(a->_ns1__SendNoteInfoForUserResponse::SendNoteInfoForUserResult), "xsd:boolean"))
				{	soap_flag_SendNoteInfoForUserResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SendNoteInfoForUserResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SendNoteInfoForUserResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SendNoteInfoForUserResponse, 0, sizeof(_ns1__SendNoteInfoForUserResponse), 0, soap_copy__ns1__SendNoteInfoForUserResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SendNoteInfoForUserResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__SendNoteInfoForUserResponse * SOAP_FMAC6 soap_new__ns1__SendNoteInfoForUserResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__SendNoteInfoForUserResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__SendNoteInfoForUserResponse(struct soap *soap, _ns1__SendNoteInfoForUserResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__SendNoteInfoForUserResponse * SOAP_FMAC4 soap_instantiate__ns1__SendNoteInfoForUserResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SendNoteInfoForUserResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SendNoteInfoForUserResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__SendNoteInfoForUserResponse;
		if (size)
			*size = sizeof(_ns1__SendNoteInfoForUserResponse);
		((_ns1__SendNoteInfoForUserResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__SendNoteInfoForUserResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SendNoteInfoForUserResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SendNoteInfoForUserResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SendNoteInfoForUserResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SendNoteInfoForUserResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SendNoteInfoForUserResponse %p -> %p\n", q, p));
	*(_ns1__SendNoteInfoForUserResponse*)p = *(_ns1__SendNoteInfoForUserResponse*)q;
}

void _ns1__SendNoteInfoForUser::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SendNoteInfoForUser::phoneNo = NULL;
	this->_ns1__SendNoteInfoForUser::notinfo = NULL;
	this->_ns1__SendNoteInfoForUser::vFlag = NULL;
	this->_ns1__SendNoteInfoForUser::destineDateTime = NULL;
	soap_default_bool(soap, &this->_ns1__SendNoteInfoForUser::needNCallBack);
	/* transient soap skipped */
}

void _ns1__SendNoteInfoForUser::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfoForUser::phoneNo);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfoForUser::notinfo);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfoForUser::vFlag);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendNoteInfoForUser::destineDateTime);
	/* transient soap skipped */
}

int _ns1__SendNoteInfoForUser::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SendNoteInfoForUser);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__SendNoteInfoForUser::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SendNoteInfoForUser(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendNoteInfoForUser(struct soap *soap, const char *tag, int id, const _ns1__SendNoteInfoForUser *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SendNoteInfoForUser), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:phoneNo", -1, &(a->_ns1__SendNoteInfoForUser::phoneNo), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:notinfo", -1, &(a->_ns1__SendNoteInfoForUser::notinfo), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:vFlag", -1, &(a->_ns1__SendNoteInfoForUser::vFlag), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:destineDateTime", -1, &(a->_ns1__SendNoteInfoForUser::destineDateTime), ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:needNCallBack", -1, &(a->_ns1__SendNoteInfoForUser::needNCallBack), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SendNoteInfoForUser::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SendNoteInfoForUser(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoForUser * SOAP_FMAC4 soap_get__ns1__SendNoteInfoForUser(struct soap *soap, _ns1__SendNoteInfoForUser *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SendNoteInfoForUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__SendNoteInfoForUser::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SendNoteInfoForUser(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoForUser * SOAP_FMAC4 soap_in__ns1__SendNoteInfoForUser(struct soap *soap, const char *tag, _ns1__SendNoteInfoForUser *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SendNoteInfoForUser *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SendNoteInfoForUser, sizeof(_ns1__SendNoteInfoForUser), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SendNoteInfoForUser)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SendNoteInfoForUser *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_phoneNo1 = 1;
	size_t soap_flag_notinfo1 = 1;
	size_t soap_flag_vFlag1 = 1;
	size_t soap_flag_destineDateTime1 = 1;
	size_t soap_flag_needNCallBack1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_phoneNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:phoneNo", &(a->_ns1__SendNoteInfoForUser::phoneNo), "xsd:string"))
				{	soap_flag_phoneNo1--;
					continue;
				}
			if (soap_flag_notinfo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:notinfo", &(a->_ns1__SendNoteInfoForUser::notinfo), "xsd:string"))
				{	soap_flag_notinfo1--;
					continue;
				}
			if (soap_flag_vFlag1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:vFlag", &(a->_ns1__SendNoteInfoForUser::vFlag), "xsd:string"))
				{	soap_flag_vFlag1--;
					continue;
				}
			if (soap_flag_destineDateTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:destineDateTime", &(a->_ns1__SendNoteInfoForUser::destineDateTime), "xsd:string"))
				{	soap_flag_destineDateTime1--;
					continue;
				}
			if (soap_flag_needNCallBack1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:needNCallBack", &(a->_ns1__SendNoteInfoForUser::needNCallBack), "xsd:boolean"))
				{	soap_flag_needNCallBack1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SendNoteInfoForUser *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SendNoteInfoForUser, 0, sizeof(_ns1__SendNoteInfoForUser), 0, soap_copy__ns1__SendNoteInfoForUser);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_needNCallBack1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__SendNoteInfoForUser * SOAP_FMAC6 soap_new__ns1__SendNoteInfoForUser(struct soap *soap, int n)
{	return soap_instantiate__ns1__SendNoteInfoForUser(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__SendNoteInfoForUser(struct soap *soap, _ns1__SendNoteInfoForUser *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__SendNoteInfoForUser * SOAP_FMAC4 soap_instantiate__ns1__SendNoteInfoForUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SendNoteInfoForUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SendNoteInfoForUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__SendNoteInfoForUser;
		if (size)
			*size = sizeof(_ns1__SendNoteInfoForUser);
		((_ns1__SendNoteInfoForUser*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__SendNoteInfoForUser[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SendNoteInfoForUser);
		for (int i = 0; i < n; i++)
			((_ns1__SendNoteInfoForUser*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SendNoteInfoForUser*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SendNoteInfoForUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SendNoteInfoForUser %p -> %p\n", q, p));
	*(_ns1__SendNoteInfoForUser*)p = *(_ns1__SendNoteInfoForUser*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__SendNoteInfoOutID(struct soap *soap, struct __ns3__SendNoteInfoOutID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SendNoteInfoOutID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__SendNoteInfoOutID(struct soap *soap, const struct __ns3__SendNoteInfoOutID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SendNoteInfoOutID(soap, &a->ns1__SendNoteInfoOutID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__SendNoteInfoOutID(struct soap *soap, const struct __ns3__SendNoteInfoOutID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__SendNoteInfoOutID(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__SendNoteInfoOutID(struct soap *soap, const char *tag, int id, const struct __ns3__SendNoteInfoOutID *a, const char *type)
{
	if (soap_out_PointerTo_ns1__SendNoteInfoOutID(soap, "ns1:SendNoteInfoOutID", -1, &a->ns1__SendNoteInfoOutID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__SendNoteInfoOutID * SOAP_FMAC4 soap_get___ns3__SendNoteInfoOutID(struct soap *soap, struct __ns3__SendNoteInfoOutID *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__SendNoteInfoOutID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__SendNoteInfoOutID * SOAP_FMAC4 soap_in___ns3__SendNoteInfoOutID(struct soap *soap, const char *tag, struct __ns3__SendNoteInfoOutID *a, const char *type)
{
	size_t soap_flag_ns1__SendNoteInfoOutID = 1;
	short soap_flag;
	a = (struct __ns3__SendNoteInfoOutID *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__SendNoteInfoOutID, sizeof(struct __ns3__SendNoteInfoOutID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__SendNoteInfoOutID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SendNoteInfoOutID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SendNoteInfoOutID(soap, "ns1:SendNoteInfoOutID", &a->ns1__SendNoteInfoOutID, ""))
				{	soap_flag_ns1__SendNoteInfoOutID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__SendNoteInfoOutID * SOAP_FMAC6 soap_new___ns3__SendNoteInfoOutID(struct soap *soap, int n)
{	return soap_instantiate___ns3__SendNoteInfoOutID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__SendNoteInfoOutID(struct soap *soap, struct __ns3__SendNoteInfoOutID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__SendNoteInfoOutID * SOAP_FMAC4 soap_instantiate___ns3__SendNoteInfoOutID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__SendNoteInfoOutID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__SendNoteInfoOutID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__SendNoteInfoOutID;
		if (size)
			*size = sizeof(struct __ns3__SendNoteInfoOutID);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__SendNoteInfoOutID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__SendNoteInfoOutID);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__SendNoteInfoOutID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__SendNoteInfoOutID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__SendNoteInfoOutID %p -> %p\n", q, p));
	*(struct __ns3__SendNoteInfoOutID*)p = *(struct __ns3__SendNoteInfoOutID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__SendNoteInfoForUserOutID(struct soap *soap, struct __ns3__SendNoteInfoForUserOutID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SendNoteInfoForUserOutID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__SendNoteInfoForUserOutID(struct soap *soap, const struct __ns3__SendNoteInfoForUserOutID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SendNoteInfoForUserOutID(soap, &a->ns1__SendNoteInfoForUserOutID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__SendNoteInfoForUserOutID(struct soap *soap, const struct __ns3__SendNoteInfoForUserOutID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__SendNoteInfoForUserOutID(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__SendNoteInfoForUserOutID(struct soap *soap, const char *tag, int id, const struct __ns3__SendNoteInfoForUserOutID *a, const char *type)
{
	if (soap_out_PointerTo_ns1__SendNoteInfoForUserOutID(soap, "ns1:SendNoteInfoForUserOutID", -1, &a->ns1__SendNoteInfoForUserOutID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__SendNoteInfoForUserOutID * SOAP_FMAC4 soap_get___ns3__SendNoteInfoForUserOutID(struct soap *soap, struct __ns3__SendNoteInfoForUserOutID *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__SendNoteInfoForUserOutID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__SendNoteInfoForUserOutID * SOAP_FMAC4 soap_in___ns3__SendNoteInfoForUserOutID(struct soap *soap, const char *tag, struct __ns3__SendNoteInfoForUserOutID *a, const char *type)
{
	size_t soap_flag_ns1__SendNoteInfoForUserOutID = 1;
	short soap_flag;
	a = (struct __ns3__SendNoteInfoForUserOutID *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__SendNoteInfoForUserOutID, sizeof(struct __ns3__SendNoteInfoForUserOutID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__SendNoteInfoForUserOutID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SendNoteInfoForUserOutID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SendNoteInfoForUserOutID(soap, "ns1:SendNoteInfoForUserOutID", &a->ns1__SendNoteInfoForUserOutID, ""))
				{	soap_flag_ns1__SendNoteInfoForUserOutID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__SendNoteInfoForUserOutID * SOAP_FMAC6 soap_new___ns3__SendNoteInfoForUserOutID(struct soap *soap, int n)
{	return soap_instantiate___ns3__SendNoteInfoForUserOutID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__SendNoteInfoForUserOutID(struct soap *soap, struct __ns3__SendNoteInfoForUserOutID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__SendNoteInfoForUserOutID * SOAP_FMAC4 soap_instantiate___ns3__SendNoteInfoForUserOutID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__SendNoteInfoForUserOutID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__SendNoteInfoForUserOutID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__SendNoteInfoForUserOutID;
		if (size)
			*size = sizeof(struct __ns3__SendNoteInfoForUserOutID);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__SendNoteInfoForUserOutID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__SendNoteInfoForUserOutID);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__SendNoteInfoForUserOutID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__SendNoteInfoForUserOutID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__SendNoteInfoForUserOutID %p -> %p\n", q, p));
	*(struct __ns3__SendNoteInfoForUserOutID*)p = *(struct __ns3__SendNoteInfoForUserOutID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__SendNoteInfo(struct soap *soap, struct __ns3__SendNoteInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SendNoteInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__SendNoteInfo(struct soap *soap, const struct __ns3__SendNoteInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SendNoteInfo(soap, &a->ns1__SendNoteInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__SendNoteInfo(struct soap *soap, const struct __ns3__SendNoteInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__SendNoteInfo(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__SendNoteInfo(struct soap *soap, const char *tag, int id, const struct __ns3__SendNoteInfo *a, const char *type)
{
	if (soap_out_PointerTo_ns1__SendNoteInfo(soap, "ns1:SendNoteInfo", -1, &a->ns1__SendNoteInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__SendNoteInfo * SOAP_FMAC4 soap_get___ns3__SendNoteInfo(struct soap *soap, struct __ns3__SendNoteInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__SendNoteInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__SendNoteInfo * SOAP_FMAC4 soap_in___ns3__SendNoteInfo(struct soap *soap, const char *tag, struct __ns3__SendNoteInfo *a, const char *type)
{
	size_t soap_flag_ns1__SendNoteInfo = 1;
	short soap_flag;
	a = (struct __ns3__SendNoteInfo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__SendNoteInfo, sizeof(struct __ns3__SendNoteInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__SendNoteInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SendNoteInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SendNoteInfo(soap, "ns1:SendNoteInfo", &a->ns1__SendNoteInfo, ""))
				{	soap_flag_ns1__SendNoteInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__SendNoteInfo * SOAP_FMAC6 soap_new___ns3__SendNoteInfo(struct soap *soap, int n)
{	return soap_instantiate___ns3__SendNoteInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__SendNoteInfo(struct soap *soap, struct __ns3__SendNoteInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__SendNoteInfo * SOAP_FMAC4 soap_instantiate___ns3__SendNoteInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__SendNoteInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__SendNoteInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__SendNoteInfo;
		if (size)
			*size = sizeof(struct __ns3__SendNoteInfo);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__SendNoteInfo[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__SendNoteInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__SendNoteInfo*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__SendNoteInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__SendNoteInfo %p -> %p\n", q, p));
	*(struct __ns3__SendNoteInfo*)p = *(struct __ns3__SendNoteInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__SendNoteInfoForUser(struct soap *soap, struct __ns3__SendNoteInfoForUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SendNoteInfoForUser = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__SendNoteInfoForUser(struct soap *soap, const struct __ns3__SendNoteInfoForUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SendNoteInfoForUser(soap, &a->ns1__SendNoteInfoForUser);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__SendNoteInfoForUser(struct soap *soap, const struct __ns3__SendNoteInfoForUser *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__SendNoteInfoForUser(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__SendNoteInfoForUser(struct soap *soap, const char *tag, int id, const struct __ns3__SendNoteInfoForUser *a, const char *type)
{
	if (soap_out_PointerTo_ns1__SendNoteInfoForUser(soap, "ns1:SendNoteInfoForUser", -1, &a->ns1__SendNoteInfoForUser, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__SendNoteInfoForUser * SOAP_FMAC4 soap_get___ns3__SendNoteInfoForUser(struct soap *soap, struct __ns3__SendNoteInfoForUser *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__SendNoteInfoForUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__SendNoteInfoForUser * SOAP_FMAC4 soap_in___ns3__SendNoteInfoForUser(struct soap *soap, const char *tag, struct __ns3__SendNoteInfoForUser *a, const char *type)
{
	size_t soap_flag_ns1__SendNoteInfoForUser = 1;
	short soap_flag;
	a = (struct __ns3__SendNoteInfoForUser *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__SendNoteInfoForUser, sizeof(struct __ns3__SendNoteInfoForUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__SendNoteInfoForUser(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SendNoteInfoForUser && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SendNoteInfoForUser(soap, "ns1:SendNoteInfoForUser", &a->ns1__SendNoteInfoForUser, ""))
				{	soap_flag_ns1__SendNoteInfoForUser--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__SendNoteInfoForUser * SOAP_FMAC6 soap_new___ns3__SendNoteInfoForUser(struct soap *soap, int n)
{	return soap_instantiate___ns3__SendNoteInfoForUser(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__SendNoteInfoForUser(struct soap *soap, struct __ns3__SendNoteInfoForUser *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__SendNoteInfoForUser * SOAP_FMAC4 soap_instantiate___ns3__SendNoteInfoForUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__SendNoteInfoForUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__SendNoteInfoForUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__SendNoteInfoForUser;
		if (size)
			*size = sizeof(struct __ns3__SendNoteInfoForUser);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__SendNoteInfoForUser[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__SendNoteInfoForUser);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__SendNoteInfoForUser*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__SendNoteInfoForUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__SendNoteInfoForUser %p -> %p\n", q, p));
	*(struct __ns3__SendNoteInfoForUser*)p = *(struct __ns3__SendNoteInfoForUser*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__SendNoteInfoOutID(struct soap *soap, struct __ns2__SendNoteInfoOutID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SendNoteInfoOutID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__SendNoteInfoOutID(struct soap *soap, const struct __ns2__SendNoteInfoOutID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SendNoteInfoOutID(soap, &a->ns1__SendNoteInfoOutID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__SendNoteInfoOutID(struct soap *soap, const struct __ns2__SendNoteInfoOutID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__SendNoteInfoOutID(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__SendNoteInfoOutID(struct soap *soap, const char *tag, int id, const struct __ns2__SendNoteInfoOutID *a, const char *type)
{
	if (soap_out_PointerTo_ns1__SendNoteInfoOutID(soap, "ns1:SendNoteInfoOutID", -1, &a->ns1__SendNoteInfoOutID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__SendNoteInfoOutID * SOAP_FMAC4 soap_get___ns2__SendNoteInfoOutID(struct soap *soap, struct __ns2__SendNoteInfoOutID *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__SendNoteInfoOutID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__SendNoteInfoOutID * SOAP_FMAC4 soap_in___ns2__SendNoteInfoOutID(struct soap *soap, const char *tag, struct __ns2__SendNoteInfoOutID *a, const char *type)
{
	size_t soap_flag_ns1__SendNoteInfoOutID = 1;
	short soap_flag;
	a = (struct __ns2__SendNoteInfoOutID *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__SendNoteInfoOutID, sizeof(struct __ns2__SendNoteInfoOutID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__SendNoteInfoOutID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SendNoteInfoOutID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SendNoteInfoOutID(soap, "ns1:SendNoteInfoOutID", &a->ns1__SendNoteInfoOutID, ""))
				{	soap_flag_ns1__SendNoteInfoOutID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__SendNoteInfoOutID * SOAP_FMAC6 soap_new___ns2__SendNoteInfoOutID(struct soap *soap, int n)
{	return soap_instantiate___ns2__SendNoteInfoOutID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__SendNoteInfoOutID(struct soap *soap, struct __ns2__SendNoteInfoOutID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__SendNoteInfoOutID * SOAP_FMAC4 soap_instantiate___ns2__SendNoteInfoOutID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__SendNoteInfoOutID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__SendNoteInfoOutID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__SendNoteInfoOutID;
		if (size)
			*size = sizeof(struct __ns2__SendNoteInfoOutID);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__SendNoteInfoOutID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__SendNoteInfoOutID);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__SendNoteInfoOutID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__SendNoteInfoOutID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__SendNoteInfoOutID %p -> %p\n", q, p));
	*(struct __ns2__SendNoteInfoOutID*)p = *(struct __ns2__SendNoteInfoOutID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__SendNoteInfoForUserOutID(struct soap *soap, struct __ns2__SendNoteInfoForUserOutID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SendNoteInfoForUserOutID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__SendNoteInfoForUserOutID(struct soap *soap, const struct __ns2__SendNoteInfoForUserOutID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SendNoteInfoForUserOutID(soap, &a->ns1__SendNoteInfoForUserOutID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__SendNoteInfoForUserOutID(struct soap *soap, const struct __ns2__SendNoteInfoForUserOutID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__SendNoteInfoForUserOutID(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__SendNoteInfoForUserOutID(struct soap *soap, const char *tag, int id, const struct __ns2__SendNoteInfoForUserOutID *a, const char *type)
{
	if (soap_out_PointerTo_ns1__SendNoteInfoForUserOutID(soap, "ns1:SendNoteInfoForUserOutID", -1, &a->ns1__SendNoteInfoForUserOutID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__SendNoteInfoForUserOutID * SOAP_FMAC4 soap_get___ns2__SendNoteInfoForUserOutID(struct soap *soap, struct __ns2__SendNoteInfoForUserOutID *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__SendNoteInfoForUserOutID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__SendNoteInfoForUserOutID * SOAP_FMAC4 soap_in___ns2__SendNoteInfoForUserOutID(struct soap *soap, const char *tag, struct __ns2__SendNoteInfoForUserOutID *a, const char *type)
{
	size_t soap_flag_ns1__SendNoteInfoForUserOutID = 1;
	short soap_flag;
	a = (struct __ns2__SendNoteInfoForUserOutID *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__SendNoteInfoForUserOutID, sizeof(struct __ns2__SendNoteInfoForUserOutID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__SendNoteInfoForUserOutID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SendNoteInfoForUserOutID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SendNoteInfoForUserOutID(soap, "ns1:SendNoteInfoForUserOutID", &a->ns1__SendNoteInfoForUserOutID, ""))
				{	soap_flag_ns1__SendNoteInfoForUserOutID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__SendNoteInfoForUserOutID * SOAP_FMAC6 soap_new___ns2__SendNoteInfoForUserOutID(struct soap *soap, int n)
{	return soap_instantiate___ns2__SendNoteInfoForUserOutID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__SendNoteInfoForUserOutID(struct soap *soap, struct __ns2__SendNoteInfoForUserOutID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__SendNoteInfoForUserOutID * SOAP_FMAC4 soap_instantiate___ns2__SendNoteInfoForUserOutID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__SendNoteInfoForUserOutID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__SendNoteInfoForUserOutID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__SendNoteInfoForUserOutID;
		if (size)
			*size = sizeof(struct __ns2__SendNoteInfoForUserOutID);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__SendNoteInfoForUserOutID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__SendNoteInfoForUserOutID);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__SendNoteInfoForUserOutID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__SendNoteInfoForUserOutID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__SendNoteInfoForUserOutID %p -> %p\n", q, p));
	*(struct __ns2__SendNoteInfoForUserOutID*)p = *(struct __ns2__SendNoteInfoForUserOutID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__SendNoteInfo(struct soap *soap, struct __ns2__SendNoteInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SendNoteInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__SendNoteInfo(struct soap *soap, const struct __ns2__SendNoteInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SendNoteInfo(soap, &a->ns1__SendNoteInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__SendNoteInfo(struct soap *soap, const struct __ns2__SendNoteInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__SendNoteInfo(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__SendNoteInfo(struct soap *soap, const char *tag, int id, const struct __ns2__SendNoteInfo *a, const char *type)
{
	if (soap_out_PointerTo_ns1__SendNoteInfo(soap, "ns1:SendNoteInfo", -1, &a->ns1__SendNoteInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__SendNoteInfo * SOAP_FMAC4 soap_get___ns2__SendNoteInfo(struct soap *soap, struct __ns2__SendNoteInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__SendNoteInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__SendNoteInfo * SOAP_FMAC4 soap_in___ns2__SendNoteInfo(struct soap *soap, const char *tag, struct __ns2__SendNoteInfo *a, const char *type)
{
	size_t soap_flag_ns1__SendNoteInfo = 1;
	short soap_flag;
	a = (struct __ns2__SendNoteInfo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__SendNoteInfo, sizeof(struct __ns2__SendNoteInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__SendNoteInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SendNoteInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SendNoteInfo(soap, "ns1:SendNoteInfo", &a->ns1__SendNoteInfo, ""))
				{	soap_flag_ns1__SendNoteInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__SendNoteInfo * SOAP_FMAC6 soap_new___ns2__SendNoteInfo(struct soap *soap, int n)
{	return soap_instantiate___ns2__SendNoteInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__SendNoteInfo(struct soap *soap, struct __ns2__SendNoteInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__SendNoteInfo * SOAP_FMAC4 soap_instantiate___ns2__SendNoteInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__SendNoteInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__SendNoteInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__SendNoteInfo;
		if (size)
			*size = sizeof(struct __ns2__SendNoteInfo);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__SendNoteInfo[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__SendNoteInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__SendNoteInfo*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__SendNoteInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__SendNoteInfo %p -> %p\n", q, p));
	*(struct __ns2__SendNoteInfo*)p = *(struct __ns2__SendNoteInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__SendNoteInfoForUser(struct soap *soap, struct __ns2__SendNoteInfoForUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SendNoteInfoForUser = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__SendNoteInfoForUser(struct soap *soap, const struct __ns2__SendNoteInfoForUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SendNoteInfoForUser(soap, &a->ns1__SendNoteInfoForUser);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__SendNoteInfoForUser(struct soap *soap, const struct __ns2__SendNoteInfoForUser *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__SendNoteInfoForUser(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__SendNoteInfoForUser(struct soap *soap, const char *tag, int id, const struct __ns2__SendNoteInfoForUser *a, const char *type)
{
	if (soap_out_PointerTo_ns1__SendNoteInfoForUser(soap, "ns1:SendNoteInfoForUser", -1, &a->ns1__SendNoteInfoForUser, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__SendNoteInfoForUser * SOAP_FMAC4 soap_get___ns2__SendNoteInfoForUser(struct soap *soap, struct __ns2__SendNoteInfoForUser *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__SendNoteInfoForUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__SendNoteInfoForUser * SOAP_FMAC4 soap_in___ns2__SendNoteInfoForUser(struct soap *soap, const char *tag, struct __ns2__SendNoteInfoForUser *a, const char *type)
{
	size_t soap_flag_ns1__SendNoteInfoForUser = 1;
	short soap_flag;
	a = (struct __ns2__SendNoteInfoForUser *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__SendNoteInfoForUser, sizeof(struct __ns2__SendNoteInfoForUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__SendNoteInfoForUser(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SendNoteInfoForUser && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SendNoteInfoForUser(soap, "ns1:SendNoteInfoForUser", &a->ns1__SendNoteInfoForUser, ""))
				{	soap_flag_ns1__SendNoteInfoForUser--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__SendNoteInfoForUser * SOAP_FMAC6 soap_new___ns2__SendNoteInfoForUser(struct soap *soap, int n)
{	return soap_instantiate___ns2__SendNoteInfoForUser(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__SendNoteInfoForUser(struct soap *soap, struct __ns2__SendNoteInfoForUser *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__SendNoteInfoForUser * SOAP_FMAC4 soap_instantiate___ns2__SendNoteInfoForUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__SendNoteInfoForUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__SendNoteInfoForUser, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__SendNoteInfoForUser;
		if (size)
			*size = sizeof(struct __ns2__SendNoteInfoForUser);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__SendNoteInfoForUser[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__SendNoteInfoForUser);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__SendNoteInfoForUser*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__SendNoteInfoForUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__SendNoteInfoForUser %p -> %p\n", q, p));
	*(struct __ns2__SendNoteInfoForUser*)p = *(struct __ns2__SendNoteInfoForUser*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SendNoteInfoOutIDResponse(struct soap *soap, _ns1__SendNoteInfoOutIDResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SendNoteInfoOutIDResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SendNoteInfoOutIDResponse(struct soap *soap, _ns1__SendNoteInfoOutIDResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SendNoteInfoOutIDResponse);
	if (soap_out_PointerTo_ns1__SendNoteInfoOutIDResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SendNoteInfoOutIDResponse(struct soap *soap, const char *tag, int id, _ns1__SendNoteInfoOutIDResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SendNoteInfoOutIDResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoOutIDResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SendNoteInfoOutIDResponse(struct soap *soap, _ns1__SendNoteInfoOutIDResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SendNoteInfoOutIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__SendNoteInfoOutIDResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SendNoteInfoOutIDResponse(struct soap *soap, const char *tag, _ns1__SendNoteInfoOutIDResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SendNoteInfoOutIDResponse **)soap_malloc(soap, sizeof(_ns1__SendNoteInfoOutIDResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SendNoteInfoOutIDResponse *)soap_instantiate__ns1__SendNoteInfoOutIDResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SendNoteInfoOutIDResponse ** p = (_ns1__SendNoteInfoOutIDResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SendNoteInfoOutIDResponse, sizeof(_ns1__SendNoteInfoOutIDResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SendNoteInfoOutID(struct soap *soap, _ns1__SendNoteInfoOutID *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SendNoteInfoOutID))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SendNoteInfoOutID(struct soap *soap, _ns1__SendNoteInfoOutID *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SendNoteInfoOutID);
	if (soap_out_PointerTo_ns1__SendNoteInfoOutID(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SendNoteInfoOutID(struct soap *soap, const char *tag, int id, _ns1__SendNoteInfoOutID *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SendNoteInfoOutID);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoOutID ** SOAP_FMAC4 soap_get_PointerTo_ns1__SendNoteInfoOutID(struct soap *soap, _ns1__SendNoteInfoOutID **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SendNoteInfoOutID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__SendNoteInfoOutID ** SOAP_FMAC4 soap_in_PointerTo_ns1__SendNoteInfoOutID(struct soap *soap, const char *tag, _ns1__SendNoteInfoOutID **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SendNoteInfoOutID **)soap_malloc(soap, sizeof(_ns1__SendNoteInfoOutID *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SendNoteInfoOutID *)soap_instantiate__ns1__SendNoteInfoOutID(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SendNoteInfoOutID ** p = (_ns1__SendNoteInfoOutID **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SendNoteInfoOutID, sizeof(_ns1__SendNoteInfoOutID), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SendNoteInfoForUserOutIDResponse(struct soap *soap, _ns1__SendNoteInfoForUserOutIDResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SendNoteInfoForUserOutIDResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SendNoteInfoForUserOutIDResponse(struct soap *soap, _ns1__SendNoteInfoForUserOutIDResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SendNoteInfoForUserOutIDResponse);
	if (soap_out_PointerTo_ns1__SendNoteInfoForUserOutIDResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SendNoteInfoForUserOutIDResponse(struct soap *soap, const char *tag, int id, _ns1__SendNoteInfoForUserOutIDResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SendNoteInfoForUserOutIDResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoForUserOutIDResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SendNoteInfoForUserOutIDResponse(struct soap *soap, _ns1__SendNoteInfoForUserOutIDResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SendNoteInfoForUserOutIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__SendNoteInfoForUserOutIDResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SendNoteInfoForUserOutIDResponse(struct soap *soap, const char *tag, _ns1__SendNoteInfoForUserOutIDResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SendNoteInfoForUserOutIDResponse **)soap_malloc(soap, sizeof(_ns1__SendNoteInfoForUserOutIDResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SendNoteInfoForUserOutIDResponse *)soap_instantiate__ns1__SendNoteInfoForUserOutIDResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SendNoteInfoForUserOutIDResponse ** p = (_ns1__SendNoteInfoForUserOutIDResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SendNoteInfoForUserOutIDResponse, sizeof(_ns1__SendNoteInfoForUserOutIDResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SendNoteInfoForUserOutID(struct soap *soap, _ns1__SendNoteInfoForUserOutID *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SendNoteInfoForUserOutID))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SendNoteInfoForUserOutID(struct soap *soap, _ns1__SendNoteInfoForUserOutID *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SendNoteInfoForUserOutID);
	if (soap_out_PointerTo_ns1__SendNoteInfoForUserOutID(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SendNoteInfoForUserOutID(struct soap *soap, const char *tag, int id, _ns1__SendNoteInfoForUserOutID *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SendNoteInfoForUserOutID);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoForUserOutID ** SOAP_FMAC4 soap_get_PointerTo_ns1__SendNoteInfoForUserOutID(struct soap *soap, _ns1__SendNoteInfoForUserOutID **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SendNoteInfoForUserOutID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__SendNoteInfoForUserOutID ** SOAP_FMAC4 soap_in_PointerTo_ns1__SendNoteInfoForUserOutID(struct soap *soap, const char *tag, _ns1__SendNoteInfoForUserOutID **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SendNoteInfoForUserOutID **)soap_malloc(soap, sizeof(_ns1__SendNoteInfoForUserOutID *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SendNoteInfoForUserOutID *)soap_instantiate__ns1__SendNoteInfoForUserOutID(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SendNoteInfoForUserOutID ** p = (_ns1__SendNoteInfoForUserOutID **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SendNoteInfoForUserOutID, sizeof(_ns1__SendNoteInfoForUserOutID), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SendNoteInfoResponse(struct soap *soap, _ns1__SendNoteInfoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SendNoteInfoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SendNoteInfoResponse(struct soap *soap, _ns1__SendNoteInfoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SendNoteInfoResponse);
	if (soap_out_PointerTo_ns1__SendNoteInfoResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SendNoteInfoResponse(struct soap *soap, const char *tag, int id, _ns1__SendNoteInfoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SendNoteInfoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SendNoteInfoResponse(struct soap *soap, _ns1__SendNoteInfoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SendNoteInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__SendNoteInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SendNoteInfoResponse(struct soap *soap, const char *tag, _ns1__SendNoteInfoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SendNoteInfoResponse **)soap_malloc(soap, sizeof(_ns1__SendNoteInfoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SendNoteInfoResponse *)soap_instantiate__ns1__SendNoteInfoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SendNoteInfoResponse ** p = (_ns1__SendNoteInfoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SendNoteInfoResponse, sizeof(_ns1__SendNoteInfoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SendNoteInfo(struct soap *soap, _ns1__SendNoteInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SendNoteInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SendNoteInfo(struct soap *soap, _ns1__SendNoteInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SendNoteInfo);
	if (soap_out_PointerTo_ns1__SendNoteInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SendNoteInfo(struct soap *soap, const char *tag, int id, _ns1__SendNoteInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SendNoteInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SendNoteInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__SendNoteInfo(struct soap *soap, _ns1__SendNoteInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SendNoteInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__SendNoteInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__SendNoteInfo(struct soap *soap, const char *tag, _ns1__SendNoteInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SendNoteInfo **)soap_malloc(soap, sizeof(_ns1__SendNoteInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SendNoteInfo *)soap_instantiate__ns1__SendNoteInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SendNoteInfo ** p = (_ns1__SendNoteInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SendNoteInfo, sizeof(_ns1__SendNoteInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SendNoteInfoForUserResponse(struct soap *soap, _ns1__SendNoteInfoForUserResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SendNoteInfoForUserResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SendNoteInfoForUserResponse(struct soap *soap, _ns1__SendNoteInfoForUserResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SendNoteInfoForUserResponse);
	if (soap_out_PointerTo_ns1__SendNoteInfoForUserResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SendNoteInfoForUserResponse(struct soap *soap, const char *tag, int id, _ns1__SendNoteInfoForUserResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SendNoteInfoForUserResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoForUserResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SendNoteInfoForUserResponse(struct soap *soap, _ns1__SendNoteInfoForUserResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SendNoteInfoForUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__SendNoteInfoForUserResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SendNoteInfoForUserResponse(struct soap *soap, const char *tag, _ns1__SendNoteInfoForUserResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SendNoteInfoForUserResponse **)soap_malloc(soap, sizeof(_ns1__SendNoteInfoForUserResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SendNoteInfoForUserResponse *)soap_instantiate__ns1__SendNoteInfoForUserResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SendNoteInfoForUserResponse ** p = (_ns1__SendNoteInfoForUserResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SendNoteInfoForUserResponse, sizeof(_ns1__SendNoteInfoForUserResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SendNoteInfoForUser(struct soap *soap, _ns1__SendNoteInfoForUser *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SendNoteInfoForUser))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SendNoteInfoForUser(struct soap *soap, _ns1__SendNoteInfoForUser *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SendNoteInfoForUser);
	if (soap_out_PointerTo_ns1__SendNoteInfoForUser(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SendNoteInfoForUser(struct soap *soap, const char *tag, int id, _ns1__SendNoteInfoForUser *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SendNoteInfoForUser);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SendNoteInfoForUser ** SOAP_FMAC4 soap_get_PointerTo_ns1__SendNoteInfoForUser(struct soap *soap, _ns1__SendNoteInfoForUser **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SendNoteInfoForUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__SendNoteInfoForUser ** SOAP_FMAC4 soap_in_PointerTo_ns1__SendNoteInfoForUser(struct soap *soap, const char *tag, _ns1__SendNoteInfoForUser **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SendNoteInfoForUser **)soap_malloc(soap, sizeof(_ns1__SendNoteInfoForUser *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SendNoteInfoForUser *)soap_instantiate__ns1__SendNoteInfoForUser(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SendNoteInfoForUser ** p = (_ns1__SendNoteInfoForUser **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SendNoteInfoForUser, sizeof(_ns1__SendNoteInfoForUser), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

/* End of soapC.cpp */
